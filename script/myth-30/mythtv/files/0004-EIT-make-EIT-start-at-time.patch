diff -Naur mythtv-master-20190105-g3382e1a-old/mythtv/libs/libmythtv/tv_rec.cpp mythtv-master-20190105-g3382e1a-new/mythtv/libs/libmythtv/tv_rec.cpp
--- mythtv-master-20190105-g3382e1a-old/mythtv/libs/libmythtv/tv_rec.cpp	2019-01-05 12:44:41.480000000 +0100
+++ mythtv-master-20190105-g3382e1a-new/mythtv/libs/libmythtv/tv_rec.cpp	2019-01-05 12:44:42.926666667 +0100
@@ -95,7 +95,7 @@
       // Configuration variables from database
       transcodeFirst(false),
       earlyCommFlag(false),         runJobOnHostOnly(false),
-      eitCrawlIdleStart(60),        eitTransportTimeout(5*60),
+      eitCrawlIdleStart(60),        eitTransportTimeout(5*60),  eitCrawlDuration(240),
       audioSampleRateDB(0),
       overRecordSecNrml(0),         overRecordSecCat(0),
       overRecordCategory(""),
@@ -194,6 +194,10 @@
     eitTransportTimeout =
         max(gCoreContext->GetNumSetting("EITTransportTimeout", 5) * 60, 6);
     eitCrawlIdleStart = gCoreContext->GetNumSetting("EITCrawIdleStart", 60);
+    // eitCrawlDuration currently defaulted to 240min.
+    // if user wants diferent value, EITCrawlDuration setting shoud be added to settings table
+    eitCrawlDuration  = gCoreContext->GetNumSetting("EITCrawDuration", 240);
+    // eitCrawlDuration  = 240;
     audioSampleRateDB = gCoreContext->GetNumSetting("AudioSampleRate");
     overRecordSecNrml = gCoreContext->GetNumSetting("RecordOverTime");
     overRecordSecCat  = gCoreContext->GetNumSetting("CategoryOverTime") * 60;
@@ -1082,6 +1086,8 @@
         ClearFlags(kFlagEITScannerRunning, __FILE__, __LINE__);
         eitScanStartTime = MythDate::current().addSecs(
             eitCrawlIdleStart + eit_start_rand(eitTransportTimeout));
+        LOG(VB_GENERAL, LOG_INFO, LOC +
+            "EIT active scanner stopped by Recording or LiveTV");
     }
 
     // Handle different state transitions
@@ -1134,11 +1140,53 @@
     internalState = nextState;
     changeState = false;
 
-    eitScanStartTime = MythDate::current();
+    eitScanStartTime = QDateTime::currentDateTime();
     if (scanner && (internalState == kState_None))
     {
-        eitScanStartTime = eitScanStartTime.addSecs(
-            eitCrawlIdleStart + eit_start_rand(eitTransportTimeout));
+        int start_delay = eit_start_rand(eitTransportTimeout);
+        // If eitCrawlIdleStart is above 3600 then we enter schedulled mode.
+        // For values 3600 and below we have old behaviour.
+        if (eitCrawlIdleStart <= 3600)
+        {
+            eitScanStartTime = eitScanStartTime.addSecs(
+                eitCrawlIdleStart + start_delay);
+            eitScanEndTime   = eitScanStartTime.addYears(1);
+            LOG(VB_GENERAL, LOG_INFO, LOC +
+                QString("EIT active scan will resume after %1 sec.").arg(eitCrawlIdleStart + start_delay));
+        }
+        else
+        {
+            // Check is current event within active EIT scan window. If it is,
+            // then scanner will be resumed after 60sec.
+            // If not, set start/end times next nearest window.
+            if ((QDateTime::currentDateTime() < eitScanStartTime) ||
+               (QDateTime::currentDateTime() > eitScanEndTime))
+            {
+                eitScanStartTime.setTime(QTime(0, 0));
+                eitScanStartTime = eitScanStartTime.addSecs(eitCrawlIdleStart);
+                eitScanEndTime = eitScanStartTime.addSecs(eitCrawlDuration*60);
+
+                // distribute scan resume time evenly over eitTransportTimeout
+                eitScanStartTime = eitScanStartTime.addSecs(start_delay);
+
+                // IF we started after window, move start & end
+                // time to next day
+                if (QDateTime::currentDateTime() > eitScanEndTime)
+                {
+                    eitScanStartTime = eitScanStartTime.addDays(1);
+                    eitScanEndTime = eitScanEndTime.addDays(1);
+                }
+                LOG(VB_GENERAL, LOG_INFO, LOC +
+                    QString("EIT active scan will resume at:%1").arg(eitScanStartTime.toString(Qt::ISODate)));
+            }
+            else
+            {
+                eitScanStartTime = eitScanStartTime.addSecs(60 + start_delay);
+                LOG(VB_GENERAL, LOG_INFO, LOC +
+                    QString("EIT active scan is in %1min. window. If enabled, will (re)start after %2 sec.")
+                    .arg(eitCrawlDuration).arg(60 + start_delay));
+            }
+        }
     }
     else
     {
@@ -1338,19 +1386,58 @@
     SetFlags(kFlagRunMainLoop, __FILE__, __LINE__);
     ClearFlags(kFlagExitPlayer | kFlagFinishRecording, __FILE__, __LINE__);
 
-    eitScanStartTime = MythDate::current();
+    eitScanStartTime = QDateTime::currentDateTime();
     // check whether we should use the EITScanner in this TVRec instance
     if (CardUtil::IsEITCapable(genOpt.inputtype) &&
         (!GetDTVChannel() || GetDTVChannel()->IsMaster()) &&
         (dvbOpt.dvb_eitscan || get_use_eit(inputid)))
     {
         scanner = new EITScanner(inputid);
-        eitScanStartTime = eitScanStartTime.addSecs(
+        int start_delay = eit_start_rand(eitTransportTimeout);
+
+        if (eitCrawlIdleStart <= 3600)
+        {
+            eitScanStartTime = eitScanStartTime.addSecs(eitCrawlIdleStart + start_delay);
+
+            eitScanEndTime   = eitScanStartTime.addYears(1);
+            LOG(VB_GENERAL, LOG_INFO, LOC +
+                QString("EIT active scan start after %1 sec.").arg(eitCrawlIdleStart + start_delay));
+        }
+        else
+        {
+            // Set initial scan start / end times to
+            // 0:00+eitCrawlIdleStart / eitCrawlIdleStart+eitCrawlDuration.
+            eitScanStartTime.setTime(QTime(0, 0));
+            eitScanStartTime = eitScanStartTime.addSecs(eitCrawlIdleStart + start_delay);
+            eitScanEndTime = eitScanStartTime.addSecs(eitCrawlDuration*60);
+
+            // If we are in scan window then delay and randomize start
+            if (QDateTime::currentDateTime() > eitScanStartTime && QDateTime::currentDateTime() < eitScanEndTime)
+            {
+                eitScanStartTime = QDateTime::currentDateTime();
+                eitScanStartTime = eitScanStartTime.addSecs(60 + start_delay);
+                LOG(VB_GENERAL, LOG_INFO, LOC +
+                   QString("EIT scanner is in window & will start: %1").arg(eitScanStartTime.toString(Qt::ISODate)));
+            }
+
+            // If we are started after scan window, then move start & end
+            // times to next day
+            if (QDateTime::currentDateTime() > eitScanEndTime)
+            {
+                eitScanStartTime = eitScanStartTime.addDays(1);
+                eitScanEndTime = eitScanEndTime.addDays(1);
+            }
+
+            LOG(VB_GENERAL, LOG_INFO, LOC +
+                QString("EIT active scan window: %1").arg(eitScanStartTime.toString(Qt::ISODate)) +
+                QString(" <--> %1 ").arg(eitScanEndTime.toString(Qt::ISODate)) + QString("(%1min duration)").arg(eitCrawlDuration));
+        }        eitScanStartTime = eitScanStartTime.addSecs(
             eitCrawlIdleStart + eit_start_rand(eitTransportTimeout));
     }
     else
     {
         eitScanStartTime = eitScanStartTime.addYears(1);
+        eitScanEndTime = eitScanStartTime;
     }
 
     while (HasFlags(kFlagRunMainLoop))
@@ -1491,46 +1578,61 @@
         }
 
         if (scanner && channel &&
-            MythDate::current() > eitScanStartTime)
+            (QDateTime::currentDateTime() > eitScanStartTime || QDateTime::currentDateTime() > eitScanEndTime))
         {
             if (!dvbOpt.dvb_eitscan)
             {
                 LOG(VB_EIT, LOG_INFO, LOC +
                     "EIT scanning disabled for this input.");
                 eitScanStartTime = eitScanStartTime.addYears(1);
+                eitScanEndTime = eitScanEndTime.addYears(1);
             }
             else if (!get_use_eit(GetInputId()))
             {
                 LOG(VB_EIT, LOG_INFO, LOC +
                     "EIT scanning disabled for all sources on this input.");
                 eitScanStartTime = eitScanStartTime.addYears(1);
+                eitScanEndTime = eitScanEndTime.addYears(1);
             }
             else
             {
-                // Check if another card in the same input group is
-                // busy.  This could be either virtual DVB-devices or
-                // a second tuner on a single card
-                inputsLock.lockForRead();
-                bool allow_eit = true;
-                vector<uint> inputids =
-                    CardUtil::GetConflictingInputs(inputid);
-                InputInfo busy_input;
-                for (uint i = 0; i < inputids.size() && allow_eit; ++i)
-                    allow_eit = !RemoteIsBusy(inputids[i], busy_input);
-                if (allow_eit)
-                {
-                    scanner->StartActiveScan(this, eitTransportTimeout);
-                    SetFlags(kFlagEITScannerRunning, __FILE__, __LINE__);
-                    eitScanStartTime =
-                        QDateTime::currentDateTime().addYears(1);
-                }
-                else
+
+                if (QDateTime::currentDateTime() > eitScanStartTime && QDateTime::currentDateTime() < eitScanEndTime)
                 {
-                    LOG(VB_CHANNEL, LOG_INFO, LOC + QString(
+
+                    // Check if another card in the same input group is
+                    // busy.  This could be either virtual DVB-devices or
+                    // a second tuner on a single card
+                    inputsLock.lockForRead();
+                    bool allow_eit = true;
+                    vector<uint> inputids =
+                        CardUtil::GetConflictingInputs(inputid);
+                    InputInfo busy_input;
+                    for (uint i = 0; i < inputids.size() && allow_eit; ++i)
+                        allow_eit = !RemoteIsBusy(inputids[i], busy_input);
+                    if (allow_eit)
+                    {
+                        scanner->StartActiveScan(this, eitTransportTimeout);
+                        SetFlags(kFlagEITScannerRunning, __FILE__, __LINE__);
+                        eitScanStartTime = MythDate::current().addYears(1);
+                        LOG(VB_GENERAL, LOG_INFO, LOC +
+                            "EIT active scan started.");
+                    }
+                    else
+                    {
+                        LOG(VB_CHANNEL, LOG_INFO, LOC + QString(
                             "Postponing EIT scan on input [%1] "
                             "because input %2 is busy")
-                        .arg(inputid).arg(busy_input.inputid));
-                    eitScanStartTime = eitScanStartTime.addSecs(300);
+                            .arg(inputid).arg(busy_input.inputid));
+                        eitScanStartTime = eitScanStartTime.addSecs(300);
+                    }
+                }
+                else if (QDateTime::currentDateTime() > eitScanEndTime && HasFlags(kFlagEITScannerRunning))
+                {
+                    scanner->StopActiveScan();
+                    ClearFlags(kFlagEITScannerRunning, __FILE__, __LINE__);
+                    LOG(VB_GENERAL, LOG_INFO, LOC +
+                        "EIT active scan stopped by reaching time window.");
                 }
                 inputsLock.unlock();
             }
diff -Naur mythtv-master-20190105-g3382e1a-old/mythtv/libs/libmythtv/tv_rec.h mythtv-master-20190105-g3382e1a-new/mythtv/libs/libmythtv/tv_rec.h
--- mythtv-master-20190105-g3382e1a-old/mythtv/libs/libmythtv/tv_rec.h	2019-01-05 12:44:41.480000000 +0100
+++ mythtv-master-20190105-g3382e1a-new/mythtv/libs/libmythtv/tv_rec.h	2019-01-05 12:44:42.926666667 +0100
@@ -367,6 +367,7 @@
     bool    runJobOnHostOnly;
     int     eitCrawlIdleStart;
     int     eitTransportTimeout;
+    int     eitCrawlDuration;
     int     audioSampleRateDB;
     int     overRecordSecNrml;
     int     overRecordSecCat;
@@ -397,6 +398,7 @@
     TuningQueue    tuningRequests;
     TuningRequest  lastTuningRequest;
     QDateTime      eitScanStartTime;
+    QDateTime      eitScanEndTime;
     mutable QMutex triggerEventLoopLock;
     QWaitCondition triggerEventLoopWait;
     bool           triggerEventLoopSignal;
diff -Naur mythtv-master-20190105-g3382e1a-old/mythtv/programs/mythtv-setup/backendsettings.cpp mythtv-master-20190105-g3382e1a-new/mythtv/programs/mythtv-setup/backendsettings.cpp
--- mythtv-master-20190105-g3382e1a-old/mythtv/programs/mythtv-setup/backendsettings.cpp	2019-01-05 12:44:41.560000000 +0100
+++ mythtv-master-20190105-g3382e1a-new/mythtv/programs/mythtv-setup/backendsettings.cpp	2019-01-05 12:44:42.926666667 +0100
@@ -380,12 +380,15 @@
 
 static GlobalSpinBoxSetting *EITCrawIdleStart()
 {
-    GlobalSpinBoxSetting *gc = new GlobalSpinBoxSetting("EITCrawIdleStart", 30, 7200, 30);
+    GlobalSpinBoxSetting *gc = new GlobalSpinBoxSetting("EITCrawIdleStart", 30, 86400, 20);
     gc->setLabel(QObject::tr("Backend idle before EIT crawl (secs)"));
     gc->setValue(60);
     QString help = QObject::tr(
-        "The minimum number of seconds after a recorder becomes idle "
-        "to wait before MythTV begins collecting EIT listings data.");
+        "The number of seconds for idle recorders when collecting EIT listings begins. "
+        "If this value is higher than 3600 sec, MythTV will switch to schedulled mode"
+        " where collecting starts this number of seconds after midnight and will go"
+        " for EITCrawDuration or if not defined, 4h time window."
+        );
     gc->setHelpText(help);
     return gc;
 }
