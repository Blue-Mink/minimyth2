diff -Naur perl-5.12.3-old/ext/Errno/Errno_pm.PL perl-5.12.3-new/ext/Errno/Errno_pm.PL
--- perl-5.12.3-old/ext/Errno/Errno_pm.PL	2011-01-09 21:20:55.000000000 +0100
+++ perl-5.12.3-new/ext/Errno/Errno_pm.PL	2016-03-07 17:30:03.613333330 +0100
@@ -2,7 +2,7 @@
 use Config;
 use strict;
 
-our $VERSION = "1.11";
+our $VERSION = "1.12";
 
 my %err = ();
 my %wsa = ();
@@ -257,20 +257,29 @@
     unless ($^O eq 'MacOS' || $^O eq 'beos') {	# trust what we have / get later
     # invoke CPP and read the output
 
+       my $inhibit_linemarkers = '';
+       if ($Config{gccversion} =~ /\A(\d+)\./ and $1 >= 5) {
+           # GCC 5.0 interleaves expanded macros with line numbers breaking
+           # each line into multiple lines. RT#123784
+           $inhibit_linemarkers = ' -P';
+       }
+
 	if ($^O eq 'VMS') {
-	    my $cpp = "$Config{cppstdin} $Config{cppflags} $Config{cppminus}";
+           my $cpp = "$Config{cppstdin} $Config{cppflags}" .
+               $inhibit_linemarkers . " $Config{cppminus}";
 	    $cpp =~ s/sys\$input//i;
 	    open(CPPO,"$cpp  errno.c |") or
 		die "Cannot exec $Config{cppstdin}";
 	} elsif ($IsMSWin32 || $^O eq 'NetWare') {
-	    open(CPPO,"$Config{cpprun} $Config{cppflags} errno.c |") or
-		die "Cannot run '$Config{cpprun} $Config{cppflags} errno.c'";
+           my $cpp = "$Config{cpprun} $Config{cppflags}" . $inhibit_linemarkers;
+           open(CPPO,"$cpp errno.c |") or
+               die "Cannot run '$cpp errno.c'";
 	} elsif ($IsSymbian) {
-            my $cpp = "gcc -E -I$ENV{SDK}\\epoc32\\include\\libc -";
+            my $cpp = "gcc -E -I$ENV{SDK}\\epoc32\\include\\libc" . $inhibit_linemarkers ." -";
 	    open(CPPO,"$cpp < errno.c |")
 		or die "Cannot exec $cpp";
         } else {
-	    my $cpp = default_cpp();
+           my $cpp = default_cpp() . $inhibit_linemarkers;
 	    open(CPPO,"$cpp < errno.c |")
 		or die "Cannot exec $cpp";
 	}
diff -Naur perl-5.12.3-old/lib/h2ph.t perl-5.12.3-new/lib/h2ph.t
--- perl-5.12.3-old/lib/h2ph.t	2011-01-09 21:20:56.000000000 +0100
+++ perl-5.12.3-new/lib/h2ph.t	2016-03-07 17:27:23.959999992 +0100
@@ -41,7 +41,7 @@
                    stderr => 1 );
 like( $result, qr/syntax OK$/, "output compiles");
 
-$result = runperl( switches => ["-w"], 
+$result = runperl( switches => ['-I.', "-w"],
                    prog => '$SIG{__WARN__} = sub { die $_[0] }; require q(lib/h2ph.pht);');
 is( $result, '', "output free of warnings" );
 
diff -Naur perl-5.12.3-old/utils/h2ph.PL perl-5.12.3-new/utils/h2ph.PL
--- perl-5.12.3-old/utils/h2ph.PL	2011-01-09 21:20:58.000000000 +0100
+++ perl-5.12.3-new/utils/h2ph.PL	2016-03-07 17:23:47.233333328 +0100
@@ -770,7 +770,7 @@
 sub build_preamble_if_necessary
 {
     # Increment $VERSION every time this function is modified:
-    my $VERSION     = 2;
+    my $VERSION     = 3;
     my $preamble    = "$Dest_dir/_h2ph_pre.ph";
 
     # Can we skip building the preamble file?
@@ -789,6 +789,7 @@
 
     open  PREAMBLE, ">$preamble" or die "Cannot open $preamble:  $!";
 	print PREAMBLE "# This file was created by h2ph version $VERSION\n";
+	print PREAMBLE "no warnings qw(portable);\n";
 
 	foreach (sort keys %define) {
 	    if ($opt_D) {
@@ -806,6 +807,18 @@
 		# integer:
 		print PREAMBLE
 		    "unless (defined &$_) { sub $_() { $1 } }\n\n";
+	    } elsif ($define{$_} =~ /^([+-]?0x[\da-f]+)U?L{0,2}$/i) {
+		# hex integer
+		# Special cased, since perl warns on hex integers
+		# that can't be represented in a UV.
+		#
+		# This way we get the warning at time of use, so the user
+		# only gets the warning if they happen to use this
+		# platform-specific definition.
+		my $code = $1;
+		$code = "hex('$code')" if length $code > 10;
+		print PREAMBLE
+		    "unless (defined &$_) { sub $_() { $code } }\n\n";
 	    } elsif ($define{$_} =~ /^\w+$/) {
 		print PREAMBLE
 		    "unless (defined &$_) { sub $_() { &$define{$_} } }\n\n";
