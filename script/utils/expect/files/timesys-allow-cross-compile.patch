diff --speed-large-files --no-dereference --minimal -Naur expect5.45.4/configure.in expect5.45.4/configure.in
--- expect5.45.4/configure.in	2018-02-04 11:43:58.000000000 +0100
+++ expect5.45.4/configure.in	2023-11-19 17:37:36.003392439 +0100
@@ -481,7 +481,7 @@
 ,
 	AC_MSG_RESULT(no)
 ,
-	AC_MSG_ERROR([Expect can't be cross compiled])
+	AC_MSG_RESULT(no)
 )
 
 AC_MSG_CHECKING([if any value exists for WNOHANG])
@@ -506,7 +506,9 @@
 	AC_MSG_RESULT(no)
 	AC_DEFINE(WNOHANG_BACKUP_VALUE, 1)
 ,
-	AC_MSG_ERROR([Expect can't be cross compiled])
+	AC_MSG_RESULT(yes)
+	AC_DEFINE_UNQUOTED(WNOHANG_BACKUP_VALUE, 1)
+	rm -f wnohang
 )
 
 #
@@ -574,7 +576,8 @@
 	AC_DEFINE(REARM_SIG)
 ,
 	AC_MSG_RESULT(no)
-, AC_MSG_WARN([Expect can't be cross compiled])
+,
+	AC_MSG_RESULT(no)
 )
 
 # HPUX7 has trouble with the big cat so split it
@@ -725,7 +728,9 @@
 ,
         AC_MSG_RESULT(no)
 ,
-	AC_MSG_ERROR([Expect can't be cross compiled])
+        AC_MSG_RESULT(yes)
+        AC_DEFINE(HAVE_SGTTYB)
+        PTY_TYPE=sgttyb
 )
 
 # mach systems have include files for unimplemented features
@@ -749,7 +754,9 @@
 ,
         AC_MSG_RESULT(no)
 ,
-	AC_MSG_ERROR([Expect can't be cross compiled])
+        AC_DEFINE(HAVE_TERMIO)
+        PTY_TYPE=termios
+        AC_MSG_RESULT(yes)
 )
 
   # now check for the new style ttys (not yet posix)
@@ -771,7 +778,9 @@
   ,
         AC_MSG_RESULT(no)
   ,
-	AC_MSG_ERROR([Expect can't be cross compiled])
+        AC_DEFINE(HAVE_TERMIOS)
+        PTY_TYPE=termios
+        AC_MSG_RESULT(yes)
   )
 fi
 
@@ -794,7 +803,7 @@
 ,
 	AC_MSG_RESULT(no)
 ,
-	AC_MSG_ERROR([Expect can't be cross compiled])
+	AC_MSG_RESULT(no)
 )
 
 AC_MSG_CHECKING([if TIOCGWINSZ in termios.h])
@@ -816,7 +825,7 @@
 ,
 	AC_MSG_RESULT(no)
 ,
-	AC_MSG_ERROR([Expect can't be cross compiled])
+	AC_MSG_RESULT(no)
 )
 
 # finally check for Cray style ttys
@@ -837,7 +846,7 @@
 ,
 	AC_MSG_RESULT(no)
 ,
-	AC_MSG_ERROR([Expect can't be cross compiled])
+	AC_MSG_RESULT(no)
 )
 
 #
@@ -869,7 +878,9 @@
 AC_HAVE_FUNCS(getpty)
 
 # following test sets SETPGRP_VOID if setpgrp takes 0 args, else takes 2
-AC_FUNC_SETPGRP
+cat >>expect_cf.h <<\_ACEOF
+#define SETPGRP_VOID 1
+_ACEOF
 
 #
 # check for timezones
@@ -889,7 +900,9 @@
 	AC_MSG_RESULT(yes),
 	AC_MSG_RESULT(no)
 ,
-	AC_MSG_ERROR([Expect can't be cross compiled])
+	AC_DEFINE(HAVE_SV_TIMEZONE)
+	AC_MSG_RESULT(yes),
+	AC_MSG_RESULT(no)
 )
 
 
diff --speed-large-files --no-dereference --minimal -Naur expect5.45.4/expect_cf.h.in expect5.45.4/expect_cf.h.in
--- expect5.45.4/expect_cf.h.in	2018-02-02 20:15:52.000000000 +0100
+++ expect5.45.4/expect_cf.h.in	2023-11-19 17:38:45.440059334 +0100
@@ -34,7 +34,7 @@
 #undef TIME_WITH_SYS_TIME
 
 /* if setpgrp takes 0 args */
-#undef SETPGRP_VOID
+#undef SETPGRP_VOID 1
 
 /*
  * This section is for compile macros needed by
