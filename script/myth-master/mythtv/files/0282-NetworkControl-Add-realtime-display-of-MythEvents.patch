diff -Naur mythtv-master-20190328-gdcb0847-old/mythtv/programs/mythfrontend/networkcontrol.cpp mythtv-master-20190328-gdcb0847-new/mythtv/programs/mythfrontend/networkcontrol.cpp
--- mythtv-master-20190328-gdcb0847-old/mythtv/programs/mythfrontend/networkcontrol.cpp	2019-03-29 08:41:00.243333334 +0100
+++ mythtv-master-20190328-gdcb0847-new/mythtv/programs/mythfrontend/networkcontrol.cpp	2019-03-29 08:41:01.903333334 +0100
@@ -288,10 +288,11 @@
 
 void NetworkControl::processNetworkControlCommand(NetworkCommand *nc)
 {
-    QMutexLocker locker(&clientLock);
     QString result;
 
+    clientLock.lock();
     int clientID = clients.indexOf(nc->getClient());
+    clientLock.unlock();
 
     if (is_abbrev("jump", nc->getArg(0)))
         result = processJump(nc);
@@ -387,7 +388,7 @@
     notifyDataAvailable();
 }
 
-NetworkControlClient::NetworkControlClient(QTcpSocket *s)
+NetworkControlClient::NetworkControlClient(QTcpSocket *s) : m_bEvents(false)
 {
     m_socket = s;
     m_textStream = new QTextStream(s);
@@ -1043,6 +1044,10 @@
         return QString("ERROR: See 'help %1' for usage information "
                        "(parameters mismatch)").arg(nc->getArg(0));
     }
+    else if (is_abbrev("events", nc->getArg(1)))
+    {
+        result = nc->getClient()->WantsEvents() ? "On" : "Off";
+    }
     else
         return QString("ERROR: See 'help %1' for usage information")
                        .arg(nc->getArg(0));
@@ -1084,6 +1089,21 @@
 
         return result;
     }
+    else if (is_abbrev("events", nc->getArg(1)))
+    {
+        QString res = "OK";
+
+        if (nc->getArgCount() < 3)
+            res = "ERROR: Missing event value.";
+        else if (nc->getArg(2) == "0" || nc->getArg(2).toLower() == "off")
+            nc->getClient()->WantsEvents(false);
+        else if (nc->getArg(2) == "1" || nc->getArg(2).toLower() == "on")
+            nc->getClient()->WantsEvents(true);
+        else
+            res = "ERROR: Invalid event value.";
+
+        return res;
+    }
 
     return QString("ERROR: See 'help %1' for usage information")
                    .arg(nc->getArg(0));
@@ -1545,6 +1565,27 @@
     {
         MythEvent *me = static_cast<MythEvent *>(e);
         QString message = me->Message();
+        QString data = (me->ExtraDataCount() > 0 && me->ExtraData(0) != "empty") ?
+            " [" + me->ExtraDataList().join("][") + "]" : QString();
+
+        bool notify = false;
+        clientLock.lock();
+        for ( QList<NetworkControlClient*>::const_iterator it = clients.begin();
+            it != clients.end(); ++it)
+        {
+            NetworkControlClient* ncc = *it;
+            if (ncc->WantsEvents())
+            {
+                nrLock.lock();
+                networkControlReplies.push_back(new NetworkCommand(ncc, message + data));
+                nrLock.unlock();
+                notify = true;
+            }
+        }
+        clientLock.unlock();
+
+        if (notify)
+            notifyDataAvailable();
 
         if (message.startsWith("MUSIC_CONTROL"))
         {
diff -Naur mythtv-master-20190328-gdcb0847-old/mythtv/programs/mythfrontend/networkcontrol.h mythtv-master-20190328-gdcb0847-new/mythtv/programs/mythfrontend/networkcontrol.h
--- mythtv-master-20190328-gdcb0847-old/mythtv/programs/mythfrontend/networkcontrol.h	2019-03-29 08:41:00.240000000 +0100
+++ mythtv-master-20190328-gdcb0847-new/mythtv/programs/mythfrontend/networkcontrol.h	2019-03-29 08:41:01.903333334 +0100
@@ -31,6 +31,9 @@
     QTcpSocket  *getSocket()     { return m_socket; }
     QTextStream *getTextStream() { return m_textStream; }
 
+    bool WantsEvents() const { return m_bEvents; }
+    void WantsEvents(bool b) { m_bEvents = b; }
+
   signals:
     void commandReceived(QString&);
 
@@ -40,6 +43,7 @@
   private:
     QTcpSocket  *m_socket     {nullptr};
     QTextStream *m_textStream {nullptr};
+    bool m_bEvents;
 };
 
 class NetworkCommand : public QObject
