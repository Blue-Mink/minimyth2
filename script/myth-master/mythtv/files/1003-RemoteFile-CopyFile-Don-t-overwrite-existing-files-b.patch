From 78bbb5cf75a09153caba8546a71b58b170e92b5f Mon Sep 17 00:00:00 2001
From: Roger Siddons <dizygotheca@ntlworld.com>
Date: Sat, 22 Aug 2015 13:25:45 +0100
Subject: [PATCH 03/10] RemoteFile::CopyFile: Don't overwrite existing files by
 default

CopyFile doesn't check for a file's existance before writing to it.
For storage groups containing multiple dirs this can lead to multiple versions of a remote file (only
one of which will be read).

This patch will fail the copy (by default) if the destination file exists.
If the overwrite flag is set the destination file is deleted first, ensuring that multiple versions
are not created.

It also adds optional verification that the copy succeeded (by comparing file sizes) as write can fail
silently if the filesystem fills up.

diff --git a/mythplugins/mythmusic/mythmusic/cdrip.cpp b/mythplugins/mythmusic/mythmusic/cdrip.cpp
index 77a5ce0..aadb893 100644
--- a/mythplugins/mythmusic/mythmusic/cdrip.cpp
+++ b/mythplugins/mythmusic/mythmusic/cdrip.cpp
@@ -394,7 +394,7 @@ void CDRipperThread::run(void)
                 destFile = gCoreContext->GenMythURL(url.host(), 0, destFile, "Music");
 
                 QApplication::postEvent(m_parent, new RipStatusEvent(RipStatusEvent::kCopyStartEvent, 0));
-                RemoteFile::CopyFile(saveDir + outfile, destFile);
+                RemoteFile::CopyFile(saveDir + outfile, destFile, true);
                 QApplication::postEvent(m_parent, new RipStatusEvent(RipStatusEvent::kCopyEndEvent, 0));
             }
         }
diff --git a/mythplugins/mythmusic/mythmusic/editmetadata.cpp b/mythplugins/mythmusic/mythmusic/editmetadata.cpp
index 0370b6b..37b6301 100644
--- a/mythplugins/mythmusic/mythmusic/editmetadata.cpp
+++ b/mythplugins/mythmusic/mythmusic/editmetadata.cpp
@@ -860,7 +860,7 @@ void EditMetadataDialog::customEvent(QEvent *event)
                     return;
                 }
 
-                RemoteFile::CopyFile(oldFilename, newFilename);
+                RemoteFile::CopyFile(oldFilename, newFilename, true);
                 QFile::remove(oldFilename);
 
                 if (m_searchType == "album")
@@ -1373,7 +1373,7 @@ void EditAlbumartDialog::doCopyImageToTag(const AlbumArtImage *image)
                                                     QString("AlbumArt/") + fi.fileName(),
                                                     "MusicArt");
 
-    RemoteFile::CopyFile(image->filename, saveFilename);
+    RemoteFile::CopyFile(image->filename, saveFilename, true);
 
     // ask the backend to add the image to the tracks tag
     QStringList strList("MUSIC_TAG_ADDIMAGE");
diff --git a/mythplugins/mythmusic/mythmusic/importmusic.cpp b/mythplugins/mythmusic/mythmusic/importmusic.cpp
index 4c465cf..f60b939 100644
--- a/mythplugins/mythmusic/mythmusic/importmusic.cpp
+++ b/mythplugins/mythmusic/mythmusic/importmusic.cpp
@@ -53,7 +53,7 @@ FileCopyThread::FileCopyThread(const QString &src, const QString &dst) :
 void FileCopyThread::run()
 {
     RunProlog();
-    m_result = RemoteFile::CopyFile(m_srcFile, m_dstFile);
+    m_result = RemoteFile::CopyFile(m_srcFile, m_dstFile, true);
     RunEpilog();
 }
 
@@ -438,7 +438,7 @@ void ImportMusicDialog::addPressed()
 
         m_somethingWasImported = true;
 
-        m_tracks->at(m_currentTrack)->isNewTune = 
+        m_tracks->at(m_currentTrack)->isNewTune =
                 isNewTune(meta->Artist(), meta->Album(), meta->Title());
 
         // update the UI
@@ -543,7 +543,7 @@ void ImportMusicDialog::startScan()
         location.append('/');
 
     MythScreenStack *popupStack = GetMythMainWindow()->GetStack("popup stack");
-    MythUIBusyDialog *busy = 
+    MythUIBusyDialog *busy =
             new MythUIBusyDialog(tr("Searching for music files"),
                                      popupStack,
                                      "scanbusydialog");
@@ -814,7 +814,7 @@ void ImportMusicDialog::setAlbum(void)
     MusicMetadata *data = m_tracks->at(m_currentTrack)->metadata;
     data->setAlbum(m_defaultAlbum);
 
-    m_tracks->at(m_currentTrack)->isNewTune = 
+    m_tracks->at(m_currentTrack)->isNewTune =
             isNewTune(data->Artist(), data->Album(), data->Title());
 
     fillWidgets();
@@ -1075,7 +1075,7 @@ void ImportCoverArtDialog::copyPressed()
 {
     if (m_filelist.size() > 0)
     {
-        if (!RemoteFile::CopyFile(m_filelist[m_currentFile], m_saveFilename))
+        if (!RemoteFile::CopyFile(m_filelist[m_currentFile], m_saveFilename, true))
         {
             //: %1 is the filename
             ShowOkPopup(tr("Copy CoverArt Failed.\nCopying to %1").arg(m_saveFilename));
diff --git a/mythtv/libs/libmythbase/remotefile.cpp b/mythtv/libs/libmythbase/remotefile.cpp
index 469c292..594a6eb 100644
--- a/mythtv/libs/libmythbase/remotefile.cpp
+++ b/mythtv/libs/libmythbase/remotefile.cpp
@@ -558,9 +558,11 @@ QString RemoteFile::GetFileHash(const QString &url)
     return result;
 }
 
-bool RemoteFile::CopyFile (const QString& src, const QString& dst)
+bool RemoteFile::CopyFile (const QString& src, const QString& dst,
+                           bool overwrite, bool verify)
 {
-    LOG(VB_FILE, LOG_INFO, QString("RemoteFile::CopyFile: Copying file from '%1' to '%2'").arg(src).arg(dst));
+    LOG(VB_FILE, LOG_INFO,
+        QString("RemoteFile::CopyFile: Copying file from '%1' to '%2'").arg(src).arg(dst));
 
     // sanity check
     if (src == dst)
@@ -586,6 +588,16 @@ bool RemoteFile::CopyFile (const QString& src, const QString& dst)
          return false;
     }
 
+    if (overwrite)
+    {
+        DeleteFile(dst);
+    }
+    else if (Exists(dst))
+    {
+        LOG(VB_GENERAL, LOG_ERR, "RemoteFile::CopyFile: File already exists");
+        return false;
+    }
+
     RemoteFile dstFile(dst, true);
     if (!dstFile.isOpen())
     {
@@ -596,6 +608,9 @@ bool RemoteFile::CopyFile (const QString& src, const QString& dst)
          return false;
     }
 
+    dstFile.SetBlocking(true);
+
+    bool success = true;
     int srcLen, dstLen;
 
     while ((srcLen = srcFile.Read(buf, readSize)) > 0)
@@ -605,11 +620,8 @@ bool RemoteFile::CopyFile (const QString& src, const QString& dst)
         if (dstLen == -1 || srcLen != dstLen)
         {
             LOG(VB_GENERAL, LOG_ERR,
-                "RemoteFile::CopyFile:: Error while trying to write to destination file.");
-            srcFile.Close();
-            dstFile.Close();
-            delete[] buf;
-            return false;
+                "RemoteFile::CopyFile: Error while trying to write to destination file.");
+            success = false;
         }
     }
 
@@ -617,7 +629,23 @@ bool RemoteFile::CopyFile (const QString& src, const QString& dst)
     dstFile.Close();
     delete[] buf;
 
-    return true;
+    if (success && verify)
+    {
+        // Check written file is correct size
+        struct stat fileinfo;
+        long long dstSize = Exists(dst, &fileinfo) ? fileinfo.st_size : -1;
+        long long srcSize = srcFile.GetFileSize();
+        if (dstSize != srcSize)
+        {
+            LOG(VB_GENERAL, LOG_ERR,
+                QString("RemoteFile::CopyFile: Copied file is wrong size (%1 rather than %2)")
+                    .arg(dstSize).arg(srcSize));
+            success = false;
+            DeleteFile(dst);
+        }
+    }
+
+    return success;
 }
 
 void RemoteFile::Reset(void)
diff --git a/mythtv/libs/libmythbase/remotefile.h b/mythtv/libs/libmythbase/remotefile.h
index 3c18a05..42fd38e 100644
--- a/mythtv/libs/libmythbase/remotefile.h
+++ b/mythtv/libs/libmythbase/remotefile.h
@@ -41,7 +41,8 @@ class MBASE_PUBLIC RemoteFile
     static QStringList FindFileList(const QString &filename, const QString &host,
                                     const QString &storageGroup, bool useRegex = false,
                                     bool allowFallback = false);
-    static bool CopyFile(const QString &src, const QString &dest);
+    static bool CopyFile(const QString &src, const QString &dest,
+                         bool overwrite = false, bool verify = false);
 
     int Write(const void *data, int size);
     int Read(void *data, int size);
-- 
2.1.4

