From e8710667ff2a14c2cf8a5bf968cf5e222e758350 Mon Sep 17 00:00:00 2001
From: David Hampton <mythtv@love2code.net>
Date: Thu, 30 Dec 2021 18:18:13 -0500
Subject: [PATCH] Add percentage finished to "View Recordings" and "Upcoming
 Recordings".

Buttonlist buttons can now contain a progressbar, as an intuitive way
to show contextual 'progress'.  This is up to the theme.

'Watch Recordings' uses it to show playback posiiton. Previews aren't
regenerated whilst a file is in use, so playback by another frontend
only updates the progress bar/counter, until playback ceases.

'Upcoming Recordings' uses the bar to show the progress of time for
recordings - it will progress to 100% for failing (0-byte)
recordings. Filesize is also available for 'Upcoming Recordings' now
(although Scheduler Updates will reset it to 0.00 for 10 secs)

A percentage progress value is also provided that can be used for
sorting, or as a "depends" for a 'part-watched' icon. This can also be
used in text templates.

The modified MythCenter and MythCenter-Wide themes demonstrate the UI
changes by using putting a progress bar behind the show title in the
"View Recordings" and "Upcoming Recordings" pages.

Video Library has no UI indication of progress.

This is based on Roger Siddons work from 2015. See
https://code.mythtv.org/trac/ticket/12809 for the full details.

Fixes #331.
---
 mythtv/libs/libmyth/programinfo.cpp           |  39 ++++
 mythtv/libs/libmyth/programinfo.h             |   5 +
 mythtv/libs/libmythbase/libmythbase.pro       |   2 +-
 mythtv/libs/libmythbase/mconcurrent.h         | 175 ++++++++++++++++++
 mythtv/libs/libmythtv/tv_play.cpp             |  29 +--
 mythtv/libs/libmythui/mythuibuttonlist.cpp    |  21 +++
 mythtv/libs/libmythui/mythuibuttonlist.h      |   7 +
 mythtv/libs/libmythui/mythuiprogressbar.cpp   |  10 +
 mythtv/libs/libmythui/mythuiprogressbar.h     |   1 +
 mythtv/programs/mythfrontend/playbackbox.cpp  |  81 ++++----
 mythtv/programs/mythfrontend/playbackbox.h    |   3 +-
 .../mythfrontend/programinfocache.cpp         | 124 +++++++++----
 .../programs/mythfrontend/programinfocache.h  |  16 +-
 .../programs/mythfrontend/viewscheduled.cpp   |  96 ++++++++--
 mythtv/programs/mythfrontend/viewscheduled.h  |   1 +
 .../themes/MythCenter-wide/recordings-ui.xml  |  29 ++-
 mythtv/themes/MythCenter-wide/schedule-ui.xml |  20 +-
 mythtv/themes/MythCenter/recordings-ui.xml    |  28 ++-
 mythtv/themes/MythCenter/schedule-ui.xml      |  18 ++
 19 files changed, 573 insertions(+), 132 deletions(-)
 create mode 100644 mythtv/libs/libmythbase/mconcurrent.h

diff --git a/mythtv/libs/libmyth/programinfo.cpp b/mythtv/libs/libmyth/programinfo.cpp
index abef88cf110..80a6ccabb8e 100644
--- a/mythtv/libs/libmyth/programinfo.cpp
+++ b/mythtv/libs/libmyth/programinfo.cpp
@@ -1718,6 +1718,11 @@ void ProgramInfo::ToMap(InfoMap &progMap,
         progMap["lentime"] = QObject::tr("%n hour(s)","", hours);
     }
 
+    progMap["progresspercent"] =
+        ((m_progressPercent > 0) && !IsWatched())
+        ? QString::number(m_progressPercent)
+        : QString();
+
     // This is calling toChar from recordingtypes.cpp, not the QChar
     // constructor.
     progMap["rectypechar"] = toQChar(GetRecordingRuleType());
@@ -6381,4 +6386,38 @@ uint64_t ProgramInfo::GetFilesize(void) const
     return db_filesize;
 }
 
+void ProgramInfo::CalculateProgress(uint64_t pos)
+{
+    if (pos == 0)
+    {
+        m_progressPercent = 0;
+        return;
+    }
+
+    uint lastPlayPercent {0};
+    uint64_t total = 0;
+
+    switch (GetRecordingStatus())
+    {
+      case RecStatus::Recorded:
+          total = std::max((int64_t)0, QueryTotalFrames());
+        break;
+      case RecStatus::Recording:
+        // Active recordings won't have total frames set yet.
+        total = QueryLastFrameInPosMap();
+        break;
+      default:
+        break;
+    }
+
+    lastPlayPercent = (total > pos) ? (100 * pos) / total : 0;
+
+    LOG(VB_GUI, LOG_DEBUG, QString("%1 %2  %3/%4 = %5%")
+        .arg(GetRecordingID()).arg(GetTitle())
+        .arg(pos).arg(total).arg(lastPlayPercent));
+
+    m_progressPercent = lastPlayPercent;
+}
+
+
 /* vim: set expandtab tabstop=4 shiftwidth=4: */
diff --git a/mythtv/libs/libmyth/programinfo.h b/mythtv/libs/libmyth/programinfo.h
index 8feb445d548..81d6face3d4 100644
--- a/mythtv/libs/libmyth/programinfo.h
+++ b/mythtv/libs/libmyth/programinfo.h
@@ -584,6 +584,10 @@ class MPUBLIC ProgramInfo
     void SetPositionMapDBReplacement(PMapDBReplacement *pmap)
         { m_positionMapDBReplacement = pmap; }
 
+    uint GetProgressPercent() const        { return m_progressPercent; }
+    void SetProgressPercent(uint progress) { m_progressPercent = progress; }
+    void CalculateProgress(uint64_t pos);
+
     // Slow DB gets
     QString     QueryBasename(void) const;
 //  uint64_t    QueryFilesize(void) const; // TODO Remove
@@ -828,6 +832,7 @@ class MPUBLIC ProgramInfo
 
 // everything below this line is not serialized
     uint8_t         m_availableStatus {asAvailable}; // only used for playbackbox.cpp
+    uint64_t        m_progressPercent {0};           // only used by UI
   public:
     void SetAvailableStatus(AvailableStatusType status, const QString &where);
     AvailableStatusType GetAvailableStatus(void) const
diff --git a/mythtv/libs/libmythbase/libmythbase.pro b/mythtv/libs/libmythbase/libmythbase.pro
index 8d18de9e2fb..c74d48336f1 100644
--- a/mythtv/libs/libmythbase/libmythbase.pro
+++ b/mythtv/libs/libmythbase/libmythbase.pro
@@ -11,7 +11,7 @@ QT += xml
 QMAKE_CLEAN += $(TARGET) $(TARGETA) $(TARGETD) $(TARGET0) $(TARGET1) $(TARGET2)
 
 # Input
-HEADERS += mthread.h mthreadpool.h mythchrono.h
+HEADERS += mthread.h mthreadpool.h mythchrono.h mconcurrent.h
 HEADERS += mythsocket.h mythsocket_cb.h
 HEADERS += mythbaseexp.h mythdbcon.h mythdb.h mythdbparams.h
 HEADERS += verbosedefs.h mythversion.h compat.h mythconfig.h
diff --git a/mythtv/libs/libmythbase/mconcurrent.h b/mythtv/libs/libmythbase/mconcurrent.h
new file mode 100644
index 00000000000..846430b82c4
--- /dev/null
+++ b/mythtv/libs/libmythbase/mconcurrent.h
@@ -0,0 +1,175 @@
+#ifndef MCONCURRENT_H
+#define MCONCURRENT_H
+
+#include "mthreadpool.h"
+#include "logging.h"
+
+
+/// Provides a simple version of QtConcurrent::run() that uses MThreadPool rather
+/// than QThreadPool. Useful for starting background threads in 1 line.
+///
+/// Given a class method of:
+///
+///   void Class::fn(arg1, arg2...)
+///
+/// you can run it in a different thread using:
+///
+///   MConcurrent::run("thread name", &Class instance, &Class::fn, arg1, arg2...)
+///
+/// Refer to QtConcurrent::run for further details
+///
+/// Restrictions:
+/// 1. Accepts 0-5 arguments
+/// 2. Only class methods are supported (most typical in Myth)
+/// 3. Only non-const classes & methods are supported (most typical in Myth)
+/// 4. The method must have return type of void (QFuture is not easily ported to
+/// MThreadPool. Use signals/events instead)
+///
+namespace MConcurrent {
+
+class RunFunctionTask : public QRunnable
+{
+public:
+    void start(const QString &name)
+    {
+        MThreadPool::globalInstance()->start(this, name, /*m_priority*/ 0);
+    }
+
+    virtual void runFunctor() = 0;
+
+    void run() override
+    {
+        try
+        {
+            this->runFunctor();
+        }
+        catch (...)
+        {
+            LOG(VB_GENERAL, LOG_ERR, "An exception occurred");
+        }
+    }
+};
+
+template <typename Class>
+class VoidStoredMemberFunctionPointerCall0 : public RunFunctionTask
+{
+public:
+    VoidStoredMemberFunctionPointerCall0(void (Class::*fn)() , Class *object)
+    : m_fn(fn), m_object(object) { }
+
+    void runFunctor() override { (m_object->*m_fn)(); }
+private:
+    void (Class::*m_fn)();
+    Class *m_object;
+};
+
+template <typename Class, typename Param1, typename Arg1>
+class VoidStoredMemberFunctionPointerCall1 : public RunFunctionTask
+{
+public:
+    VoidStoredMemberFunctionPointerCall1(void (Class::*fn)(Param1) , Class *object, const Arg1 &arg1)
+    : m_fn(fn), m_object(object), m_arg1(arg1){ }
+
+    void runFunctor() override { (m_object->*m_fn)(m_arg1); }
+private:
+    void (Class::*m_fn)(Param1);
+    Class *m_object;
+    Arg1 m_arg1;
+};
+
+template <typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2>
+class VoidStoredMemberFunctionPointerCall2 : public RunFunctionTask
+{
+public:
+    VoidStoredMemberFunctionPointerCall2(void (Class::*fn)(Param1, Param2) , Class *object, const Arg1 &arg1, const Arg2 &arg2)
+    : m_fn(fn), m_object(object), m_arg1(arg1), m_arg2(arg2){ }
+
+    void runFunctor() override { (m_object->*m_fn)(m_arg1, m_arg2); }
+private:
+    void (Class::*m_fn)(Param1, Param2);
+    Class *m_object;
+    Arg1 m_arg1; Arg2 m_arg2;
+};
+
+template <typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3>
+class VoidStoredMemberFunctionPointerCall3 : public RunFunctionTask
+{
+public:
+    VoidStoredMemberFunctionPointerCall3(void (Class::*fn)(Param1, Param2, Param3) , Class *object, const Arg1 &arg1, const Arg2 &arg2, const Arg3 &arg3)
+    : m_fn(fn), m_object(object), m_arg1(arg1), m_arg2(arg2), m_arg3(arg3){ }
+
+    void runFunctor() override { (m_object->*m_fn)(m_arg1, m_arg2, m_arg3); }
+private:
+    void (Class::*m_fn)(Param1, Param2, Param3);
+    Class *m_object;
+    Arg1 m_arg1; Arg2 m_arg2; Arg3 m_arg3;
+};
+
+template <typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4>
+class VoidStoredMemberFunctionPointerCall4 : public RunFunctionTask
+{
+public:
+    VoidStoredMemberFunctionPointerCall4(void (Class::*fn)(Param1, Param2, Param3, Param4) , Class *object, const Arg1 &arg1, const Arg2 &arg2, const Arg3 &arg3, const Arg4 &arg4)
+    : m_fn(fn), m_object(object), m_arg1(arg1), m_arg2(arg2), m_arg3(arg3), m_arg4(arg4){ }
+
+    void runFunctor() override { (m_object->*m_fn)(m_arg1, m_arg2, m_arg3, m_arg4); }
+private:
+    void (Class::*m_fn)(Param1, Param2, Param3, Param4);
+    Class *m_object;
+    Arg1 m_arg1; Arg2 m_arg2; Arg3 m_arg3; Arg4 m_arg4;
+};
+
+template <typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4, typename Param5, typename Arg5>
+class VoidStoredMemberFunctionPointerCall5 : public RunFunctionTask
+{
+public:
+    VoidStoredMemberFunctionPointerCall5(void (Class::*fn)(Param1, Param2, Param3, Param4, Param5) , Class *object, const Arg1 &arg1, const Arg2 &arg2, const Arg3 &arg3, const Arg4 &arg4, const Arg5 &arg5)
+    : m_fn(fn), m_object(object), m_arg1(arg1), m_arg2(arg2), m_arg3(arg3), m_arg4(arg4), m_arg5(arg5){ }
+
+    void runFunctor() override { (m_object->*m_fn)(m_arg1, m_arg2, m_arg3, m_arg4, m_arg5); }
+private:
+    void (Class::*m_fn)(Param1, Param2, Param3, Param4, Param5);
+    Class *m_object;
+    Arg1 m_arg1; Arg2 m_arg2; Arg3 m_arg3; Arg4 m_arg4; Arg5 m_arg5;
+};
+
+template <typename Class>
+void run(const QString &name, Class *object, void (Class::*fn)())
+{
+    (new VoidStoredMemberFunctionPointerCall0<Class>(fn, object))->start(name);
+}
+
+template <typename Class, typename Param1, typename Arg1>
+void run(const QString &name, Class *object, void (Class::*fn)(Param1), const Arg1 &arg1)
+{
+    (new VoidStoredMemberFunctionPointerCall1<Class, Param1, Arg1>(fn, object, arg1))->start(name);
+}
+
+template <typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2>
+void run(const QString &name, Class *object, void (Class::*fn)(Param1, Param2), const Arg1 &arg1, const Arg2 &arg2)
+{
+    (new VoidStoredMemberFunctionPointerCall2<Class, Param1, Arg1, Param2, Arg2>(fn, object, arg1, arg2))->start(name);
+}
+
+template <typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3>
+void run(const QString &name, Class *object, void (Class::*fn)(Param1, Param2, Param3), const Arg1 &arg1, const Arg2 &arg2, const Arg3 &arg3)
+{
+    (new VoidStoredMemberFunctionPointerCall3<Class, Param1, Arg1, Param2, Arg2, Param3, Arg3>(fn, object, arg1, arg2, arg3))->start(name);
+}
+
+template <typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4>
+void run(const QString &name, Class *object, void (Class::*fn)(Param1, Param2, Param3, Param4), const Arg1 &arg1, const Arg2 &arg2, const Arg3 &arg3, const Arg4 &arg4)
+{
+    (new VoidStoredMemberFunctionPointerCall4<Class, Param1, Arg1, Param2, Arg2, Param3, Arg3, Param4, Arg4>(fn, object, arg1, arg2, arg3, arg4))->start(name);
+}
+
+template <typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4, typename Param5, typename Arg5>
+void run(const QString &name, Class *object, void (Class::*fn)(Param1, Param2, Param3, Param4, Param5), const Arg1 &arg1, const Arg2 &arg2, const Arg3 &arg3, const Arg4 &arg4, const Arg4 &arg5)
+{
+    (new VoidStoredMemberFunctionPointerCall5<Class, Param1, Arg1, Param2, Arg2, Param3, Arg3, Param4, Arg4, Param5, Arg5>(fn, object, arg1, arg2, arg3, arg4, arg5))->start(name);
+}
+
+
+} //namespace QtConcurrent
+
+#endif // MCONCURRENT_H
diff --git a/mythtv/libs/libmythtv/tv_play.cpp b/mythtv/libs/libmythtv/tv_play.cpp
index 9f02a703b0f..11cce7f65e7 100644
--- a/mythtv/libs/libmythtv/tv_play.cpp
+++ b/mythtv/libs/libmythtv/tv_play.cpp
@@ -24,6 +24,7 @@
 #include "mythdirs.h"
 #include "mythmedia.h"
 #include "mythdate.h"
+#include "mconcurrent.h"
 
 // libmyth
 #include "programinfo.h"
@@ -9963,31 +9964,6 @@ bool TV::HandleOSDVideoExit(const QString& Action)
 
 void TV::HandleSaveLastPlayPosEvent()
 {
-    // Helper class to save the latest playback position (in a background thread
-    // to avoid playback glitches).  The ctor makes a copy of the ProgramInfo
-    // struct to avoid race conditions if playback ends and deletes objects
-    // before or while the background thread runs.
-    class PositionSaver : public QRunnable
-    {
-      public:
-        PositionSaver(const ProgramInfo &pginfo, uint64_t frame)
-          : m_pginfo(pginfo),
-            m_frame(frame) {}
-
-        void run() override
-        {
-            LOG(VB_PLAYBACK, LOG_DEBUG, QString("PositionSaver frame=%1").arg(m_frame));
-            frm_dir_map_t lastPlayPosMap;
-            lastPlayPosMap[m_frame] = MARK_UTIL_LASTPLAYPOS;
-            m_pginfo.ClearMarkupMap(MARK_UTIL_LASTPLAYPOS);
-            m_pginfo.SaveMarkupMap(lastPlayPosMap, MARK_UTIL_LASTPLAYPOS);
-        }
-
-      private:
-        const ProgramInfo m_pginfo;
-        const uint64_t m_frame;
-    };
-
     GetPlayerReadLock();
     m_playerContext.LockDeletePlayer(__FILE__, __LINE__);
     bool playing = m_player && !m_player->IsPaused();
@@ -9995,7 +9971,8 @@ void TV::HandleSaveLastPlayPosEvent()
     if (playing)
     {
         uint64_t framesPlayed = m_player->GetFramesPlayed();
-        MThreadPool::globalInstance()->start(new PositionSaver(*m_playerContext.m_playingInfo, framesPlayed), "PositionSaver");
+        MConcurrent::run("PositionSaver", m_playerContext.m_playingInfo,
+                         &ProgramInfo::SaveLastPlayPos, framesPlayed);
     }
     m_playerContext.UnlockDeletePlayer(__FILE__, __LINE__);
     ReturnPlayerLock();
diff --git a/mythtv/libs/libmythui/mythuibuttonlist.cpp b/mythtv/libs/libmythui/mythuibuttonlist.cpp
index 55ab554a0d9..0571349ea9f 100644
--- a/mythtv/libs/libmythui/mythuibuttonlist.cpp
+++ b/mythtv/libs/libmythui/mythuibuttonlist.cpp
@@ -23,6 +23,7 @@
 #include "mythuigroup.h"
 #include "mythuiimage.h"
 #include "mythgesture.h"
+#include "mythuiprogressbar.h"
 
 #define LOC     QString("MythUIButtonList(%1): ").arg(objectName())
 
@@ -3543,6 +3544,16 @@ QString MythUIButtonListItem::GetImageFilename(const QString &name) const
     return QString();
 }
 
+void MythUIButtonListItem::SetProgress(int start, int total, int used)
+{
+    m_progress      = used;
+    m_progressStart = start;
+    m_progressTotal = total;
+
+    if (m_parent && m_isVisible)
+        m_parent->Update();
+}
+
 void MythUIButtonListItem::DisplayState(const QString &state,
                                         const QString &name)
 {
@@ -3705,6 +3716,14 @@ void MythUIButtonListItem::DoButtonCheck (MythUIStateType *buttoncheck)
         buttoncheck->DisplayState(MythUIStateType::Full);
 }
 
+void MythUIButtonListItem::DoButtonProgress (MythUIProgressBar *buttonprogress)
+{
+    if (!buttonprogress)
+        return;
+
+    buttonprogress->Set(m_progressStart, m_progressTotal, m_progress);
+}
+
 void MythUIButtonListItem::DoButtonLookupText (MythUIText *text,
                                                const TextProperties& textprop)
 {
@@ -3847,6 +3866,8 @@ void MythUIButtonListItem::SetToRealButton(MythUIStateType *button, bool selecte
             DoButtonArrow(dynamic_cast<MythUIImage *>(obj));
         else if (name == "buttoncheck")
             DoButtonCheck(dynamic_cast<MythUIStateType *>(obj));
+        else if (name == "buttonprogress")
+            DoButtonProgress(dynamic_cast<MythUIProgressBar *>(obj));
 
         TextProperties textprop = GetTextProp(name);
         if (!textprop.text.isEmpty())
diff --git a/mythtv/libs/libmythui/mythuibuttonlist.h b/mythtv/libs/libmythui/mythuibuttonlist.h
index d6cd99f1520..87cc473fb9a 100644
--- a/mythtv/libs/libmythui/mythuibuttonlist.h
+++ b/mythtv/libs/libmythui/mythuibuttonlist.h
@@ -18,6 +18,7 @@ class MythUIButtonList;
 class MythUIScrollBar;
 class MythUIStateType;
 class MythUIGroup;
+class MythUIProgressBar;
 
 struct TextProperties {
     QString text;
@@ -103,6 +104,8 @@ class MUI_PUBLIC MythUIButtonListItem
     void SetImageCb(muibCbFn fn, void *data);
     QString GetImageFilename(const QString &name="") const;
 
+    void SetProgress(int start, int total, int used);
+
     void DisplayState(const QString &state, const QString &name);
     void SetStatesFromMap(const InfoMap &stateMap);
     void SetStateCb(muibCbFn fn, void *data);
@@ -134,6 +137,7 @@ class MUI_PUBLIC MythUIButtonListItem
     void DoButtonImage(MythUIImage *buttonimage);
     void DoButtonArrow(MythUIImage *buttonarrow) const;
     void DoButtonCheck(MythUIStateType *buttoncheck);
+    void DoButtonProgress(MythUIProgressBar *buttonprogress);
     void DoButtonLookupText(MythUIText *text, const TextProperties& textprop);
     static void DoButtonLookupFilename(MythUIImage *image, const QString& filename);
     static void DoButtonLookupImage(MythUIImage *uiimage, MythImage *image);
@@ -152,6 +156,9 @@ class MUI_PUBLIC MythUIButtonListItem
     bool            m_isVisible     {false};
     bool            m_enabled       {true};
     bool            m_debugme       {false};
+    int             m_progress      {0};
+    int             m_progressStart {0};
+    int             m_progressTotal {0};
 
     QMap<QString, TextProperties> m_strings;
     QMap<QString, MythImage*> m_images;
diff --git a/mythtv/libs/libmythui/mythuiprogressbar.cpp b/mythtv/libs/libmythui/mythuiprogressbar.cpp
index 6efffe01407..8e483646223 100644
--- a/mythtv/libs/libmythui/mythuiprogressbar.cpp
+++ b/mythtv/libs/libmythui/mythuiprogressbar.cpp
@@ -50,6 +50,16 @@ bool MythUIProgressBar::ParseElement(
     return true;
 }
 
+void MythUIProgressBar::Set(int start, int total, int used)
+{
+    if (used != m_current || start != m_start || total != m_total)
+    {
+        m_start = start;
+        m_total = total;
+        SetUsed(used);
+    }
+}
+
 void MythUIProgressBar::SetStart(int value)
 {
     m_start = value;
diff --git a/mythtv/libs/libmythui/mythuiprogressbar.h b/mythtv/libs/libmythui/mythuiprogressbar.h
index fe099054997..59771f0fabc 100644
--- a/mythtv/libs/libmythui/mythuiprogressbar.h
+++ b/mythtv/libs/libmythui/mythuiprogressbar.h
@@ -21,6 +21,7 @@ class MUI_PUBLIC MythUIProgressBar : public MythUIType
     enum LayoutType { LayoutVertical, LayoutHorizontal };
     enum EffectType { EffectReveal, EffectSlide, EffectAnimate };
 
+    void Set(int start, int total, int used);
     void SetStart(int value);
     void SetUsed(int value);
     void SetTotal(int value);
diff --git a/mythtv/programs/mythfrontend/playbackbox.cpp b/mythtv/programs/mythfrontend/playbackbox.cpp
index b85ed26d4ce..09cde409faa 100644
--- a/mythtv/programs/mythfrontend/playbackbox.cpp
+++ b/mythtv/programs/mythfrontend/playbackbox.cpp
@@ -43,6 +43,7 @@
 #include "mythdb.h"
 #include "mythdate.h"
 #include "tv.h"
+#include "mconcurrent.h"
 
 #ifdef _MSC_VER
 #  include "compat.h"                   // for random
@@ -1028,6 +1029,9 @@ void PlaybackBox::ItemVisible(MythUIButtonListItem *item)
     // Flagging status (queued, running, no, yes)
     item->DisplayState(extract_commflag_state(*pginfo), "commflagged");
 
+    item->SetProgress(0, pginfo->IsWatched() ? 0 : 100,
+                      pginfo->GetProgressPercent());
+
     MythUIButtonListItem *sel_item = item->parent()->GetItemCurrent();
     if ((item != sel_item) && item->GetImageFilename("preview").isEmpty() &&
         (asAvailable == pginfo->GetAvailableStatus()))
@@ -4087,7 +4091,11 @@ void PlaybackBox::customEvent(QEvent *event)
             {
                 ProgramInfo evinfo(me->ExtraDataList());
                 if (evinfo.HasPathname() || evinfo.GetChanID())
-                    HandleUpdateProgramInfoEvent(evinfo);
+                 {
+                     uint32_t flags = m_programInfoCache.Update(evinfo);
+                     if (flags != ProgramInfoCache::PIC_NO_ACTION)
+                         HandleUpdateItemEvent(evinfo.GetRecordingID(), flags);
+                 }
             }
             else if (recordingID && (tokens[1] == "ADD"))
             {
@@ -4135,18 +4143,19 @@ void PlaybackBox::customEvent(QEvent *event)
         else if (message.startsWith("UPDATE_FILE_SIZE"))
         {
             QStringList tokens = message.simplified().split(" ");
-            bool ok = false;
-            uint recordingID = 0;
-            uint64_t filesize = 0ULL;
             if (tokens.size() >= 3)
             {
-                recordingID = tokens[1].toUInt();
-                filesize   = tokens[2].toLongLong(&ok);
-            }
-            if (recordingID && ok)
-            {
-
-                HandleUpdateProgramInfoFileSizeEvent(recordingID, filesize);
+                bool ok = false;
+                uint recordingID  = tokens[1].toUInt();
+                uint64_t filesize = tokens[2].toLongLong(&ok);
+                if (ok)
+                {
+                    // Delegate to background thread
+                    MConcurrent::run("UpdateFileSize", &m_programInfoCache,
+                                     &ProgramInfoCache::UpdateFileSize,
+                                     recordingID, filesize,
+                                     ProgramInfoCache::PIC_NONE);
+                }
             }
         }
         else if (message == "UPDATE_UI_LIST")
@@ -4159,6 +4168,18 @@ void PlaybackBox::customEvent(QEvent *event)
                 m_helper.ForceFreeSpaceUpdate();
             }
         }
+        else if (message.startsWith("UPDATE_UI_ITEM"))
+        {
+            QStringList tokens = message.simplified().split(" ");
+            if (tokens.size() < 3)
+                return;
+
+            uint recordingID  = tokens[1].toUInt();
+            auto flags = static_cast<ProgramInfoCache::UpdateState>(tokens[2].toUInt());
+
+            if (flags != ProgramInfoCache::PIC_NO_ACTION)
+                HandleUpdateItemEvent(recordingID, flags);
+        }
         else if (message == "UPDATE_USAGE_UI")
         {
             UpdateUsageUI();
@@ -4472,35 +4493,21 @@ void PlaybackBox::HandleRecordingAddEvent(const ProgramInfo &evinfo)
     ScheduleUpdateUIList();
 }
 
-void PlaybackBox::HandleUpdateProgramInfoEvent(const ProgramInfo &evinfo)
+void PlaybackBox::HandleUpdateItemEvent(uint recordingID, uint flags)
 {
-    QString old_recgroup = m_programInfoCache.GetRecGroup(
-        evinfo.GetRecordingID());
-
-    if (!m_programInfoCache.Update(evinfo))
-        return;
-
-    // If the recording group has changed, reload lists from the recently
-    // updated cache; if not, only update UI for the updated item
-    if (evinfo.GetRecordingGroup() == old_recgroup)
+    // Changing recording group full reload
+    if (flags & ProgramInfoCache::PIC_RECGROUP_CHANGED)
     {
-        ProgramInfo *dst = FindProgramInUILists(evinfo);
-        if (dst)
-            UpdateUIListItem(dst, true);
-        return;
+        ScheduleUpdateUIList();
+    }
+    else
+    {
+        ProgramInfo *pginfo = FindProgramInUILists(recordingID);
+        if (pginfo == nullptr)
+            return;
+        bool genPreview = (flags & ProgramInfoCache::PIC_MARK_CHANGED);
+        UpdateUIListItem(pginfo, genPreview);
     }
-
-    ScheduleUpdateUIList();
-}
-
-void PlaybackBox::HandleUpdateProgramInfoFileSizeEvent(uint recordingID,
-                                                       uint64_t filesize)
-{
-    m_programInfoCache.UpdateFileSize(recordingID, filesize);
-
-    ProgramInfo *dst = FindProgramInUILists(recordingID);
-    if (dst)
-        UpdateUIListItem(dst, false);
 }
 
 void PlaybackBox::ScheduleUpdateUIList(void)
diff --git a/mythtv/programs/mythfrontend/playbackbox.h b/mythtv/programs/mythfrontend/playbackbox.h
index e5093c4e887..59fc9cd81ca 100644
--- a/mythtv/programs/mythfrontend/playbackbox.h
+++ b/mythtv/programs/mythfrontend/playbackbox.h
@@ -339,8 +339,7 @@ class PlaybackBox : public ScheduleCommon
     void HandlePreviewEvent(const QStringList &list);
     void HandleRecordingRemoveEvent(uint recordingID);
     void HandleRecordingAddEvent(const ProgramInfo &evinfo);
-    void HandleUpdateProgramInfoEvent(const ProgramInfo &evinfo);
-    void HandleUpdateProgramInfoFileSizeEvent(uint recordingID, uint64_t filesize);
+    void HandleUpdateItemEvent(uint recordingId, uint flags);
 
     void ScheduleUpdateUIList(void);
     void ShowMenu(void) override; // MythScreenType
diff --git a/mythtv/programs/mythfrontend/programinfocache.cpp b/mythtv/programs/mythfrontend/programinfocache.cpp
index eced756d767..653b37c344b 100644
--- a/mythtv/programs/mythfrontend/programinfocache.cpp
+++ b/mythtv/programs/mythfrontend/programinfocache.cpp
@@ -10,6 +10,8 @@
 #include "programinfo.h"
 #include "remoteutil.h"
 #include "mythevent.h"
+#include "mythdb.h"
+#include "mconcurrent.h"
 
 #include <QCoreApplication>
 #include <QRunnable>
@@ -72,12 +74,47 @@ void ProgramInfoCache::Load(const bool updateUI)
     m_loadIsQueued = false;
 
     locker.unlock();
-    /**/
+
     // Get an unsorted list (sort = 0) from RemoteGetRecordedList
     // we sort the list later anyway.
     std::vector<ProgramInfo*> *tmp = RemoteGetRecordedList(0);
-    /**/
-    locker.relock();
+
+    // Calculate play positions for UI
+    if (tmp)
+    {
+        // Played progress
+        using ProgId = QPair<uint, QDateTime>;
+        QHash<ProgId, uint> lastPlayFrames;
+
+        // Get all lastplaypos marks in a single lookup
+        MSqlQuery query(MSqlQuery::InitCon());
+        query.prepare("SELECT chanid, starttime, mark "
+                      "FROM recordedmarkup "
+                      "WHERE type = :TYPE ");
+        query.bindValue(":TYPE", MARK_UTIL_LASTPLAYPOS);
+
+        if (query.exec())
+        {
+            while (query.next())
+            {
+                ProgId id = qMakePair(query.value(0).toUInt(),
+                                      MythDate::as_utc(query.value(1).toDateTime()));
+                lastPlayFrames[id] = query.value(2).toUInt();
+            }
+
+            // Determine progress of each prog
+            for (ProgramInfo* pg : *tmp)
+            {
+                ProgId id = qMakePair(pg->GetChanID(),
+                                      pg->GetRecordingStartTime());
+                pg->CalculateProgress(lastPlayFrames.value(id));
+            }
+        }
+        else
+            MythDB::DBError("Watched progress", query);
+     }
+
+   locker.relock();
 
     free_vec(m_nextCache);
     m_nextCache = tmp;
@@ -149,52 +186,75 @@ void ProgramInfoCache::Refresh(void)
  *  \note This must only be called from the UI thread.
  *  \return True iff the ProgramInfo was in the cache and was updated.
  */
-bool ProgramInfoCache::Update(const ProgramInfo &pginfo)
+ProgramInfoCache::UpdateStates ProgramInfoCache::Update(const ProgramInfo &pginfo)
 {
     QMutexLocker locker(&m_lock);
 
-    Cache::iterator it = m_cache.find(pginfo.GetRecordingID());
+    uint recordingId = pginfo.GetRecordingID();
+    Cache::iterator it = m_cache.find(recordingId);
 
-    if (it != m_cache.end())
-        (*it)->clone(pginfo, true);
+    if (it == m_cache.end())
+        return PIC_NO_ACTION;
 
-    return it != m_cache.end();
-}
+    ProgramInfo& pg = **it;
+    UpdateStates flags { PIC_NONE };
 
-/** \brief Updates a ProgramInfo in the cache.
- *  \note This must only be called from the UI thread.
- *  \return True iff the ProgramInfo was in the cache and was updated.
- */
-bool ProgramInfoCache::UpdateFileSize(uint recordingID, uint64_t filesize)
-{
-    QMutexLocker locker(&m_lock);
+    if (pginfo.GetBookmarkUpdate() != pg.GetBookmarkUpdate())
+        flags |= PIC_MARK_CHANGED;
 
-    Cache::iterator it = m_cache.find(recordingID);
+    if (pginfo.GetRecordingGroup() != pg.GetRecordingGroup())
+        flags |= PIC_RECGROUP_CHANGED;
 
-    if (it != m_cache.end())
+    pg.clone(pginfo, true);
+
+    if (flags & PIC_MARK_CHANGED)
     {
-        (*it)->SetFilesize(filesize);
-        if (filesize)
-            (*it)->SetAvailableStatus(asAvailable, "PIC::UpdateFileSize");
+        // Delegate this update to a background task
+        MConcurrent::run("UpdateProg", this, &ProgramInfoCache::UpdateFileSize,
+                         recordingId, 0, flags);
+
+        // Ignore this update
+        flags = PIC_NO_ACTION;
     }
 
-    return it != m_cache.end();
+    LOG(VB_GUI, LOG_DEBUG, QString("Pg %1 %2 update state %3")
+        .arg(recordingId).arg(pg.GetTitle()).arg(flags));
+    return flags;
 }
 
-/** \brief Returns the ProgramInfo::recgroup or an empty string if not found.
- *  \note This must only be called from the UI thread.
+/** \brief Updates a ProgramInfo in the cache.
+ *  \note This spawns a background thread as it contains multiple Db
+ *   queries.
  */
-QString ProgramInfoCache::GetRecGroup(uint recordingID) const
+void ProgramInfoCache::UpdateFileSize(uint recordingID, uint64_t filesize,
+                                      UpdateStates flags)
 {
-    QMutexLocker locker(&m_lock);
+    Cache::iterator it = m_cache.find(recordingID);
+    if (it == m_cache.end())
+        return;
 
-    Cache::const_iterator it = m_cache.find(recordingID);
+    ProgramInfo *pg = *it;
 
-    QString recgroup;
-    if (it != m_cache.end())
-        recgroup = (*it)->GetRecordingGroup();
+    pg->CalculateProgress(pg->QueryLastPlayPos());
+
+    if (filesize > 0)
+    {
+        // Filesize update
+        pg->SetFilesize(filesize);
+        pg->SetAvailableStatus(asAvailable, "PIC::UpdateFileSize");
+    }
+    else // Info update
+    {
+        // Don't keep regenerating previews of files being played
+        QString byWhom;
+        if (pg->QueryIsInUse(byWhom) && byWhom.contains(QObject::tr("Playing")))
+            flags &= ~PIC_MARK_CHANGED;
+    }
+
+    QString mesg = QString("UPDATE_UI_ITEM %1 %2").arg(recordingID).arg(flags);
+    QCoreApplication::postEvent(m_listener, new MythEvent(mesg));
 
-    return recgroup;
+    LOG(VB_GUI, LOG_DEBUG, mesg);
 }
 
 /** \brief Adds a ProgramInfo to the cache.
@@ -202,7 +262,7 @@ QString ProgramInfoCache::GetRecGroup(uint recordingID) const
  */
 void ProgramInfoCache::Add(const ProgramInfo &pginfo)
 {
-    if (!pginfo.GetRecordingID() || Update(pginfo))
+    if (!pginfo.GetRecordingID() || (Update(pginfo) != PIC_NO_ACTION))
         return;
 
     m_cache[pginfo.GetRecordingID()] = new ProgramInfo(pginfo);
diff --git a/mythtv/programs/mythfrontend/programinfocache.h b/mythtv/programs/mythfrontend/programinfocache.h
index fdf1ad62966..875be614cb2 100644
--- a/mythtv/programs/mythfrontend/programinfocache.h
+++ b/mythtv/programs/mythfrontend/programinfocache.h
@@ -20,7 +20,16 @@ class QObject;
 class ProgramInfoCache
 {
     friend class ProgramInfoLoader;
+
   public:
+    enum UpdateState {
+        PIC_NONE              = 0x00,
+        PIC_MARK_CHANGED      = 0x01,
+        PIC_RECGROUP_CHANGED  = 0x02,
+        PIC_NO_ACTION         = 0x80,
+    };
+    Q_DECLARE_FLAGS(UpdateStates, UpdateState);
+
     explicit ProgramInfoCache(QObject *o)
         : m_listener(o) {}
     ~ProgramInfoCache();
@@ -33,9 +42,8 @@ class ProgramInfoCache
     void Refresh(void);
     void Add(const ProgramInfo &pginfo);
     bool Remove(uint recordingID);
-    bool Update(const ProgramInfo &pginfo);
-    bool UpdateFileSize(uint recordingID, uint64_t filesize);
-    QString GetRecGroup(uint recordingID) const;
+    ProgramInfoCache::UpdateStates Update(const ProgramInfo &pginfo);
+    void UpdateFileSize(uint recordingID, uint64_t filesize, UpdateStates flags);
     void GetOrdered(std::vector<ProgramInfo*> &list, bool newest_first = false);
     /// \note This must only be called from the UI thread.
     bool empty(void) const { return m_cache.empty(); }
@@ -62,4 +70,6 @@ class ProgramInfoCache
     mutable QWaitCondition  m_loadWait;
 };
 
+Q_DECLARE_OPERATORS_FOR_FLAGS(ProgramInfoCache::UpdateStates)
+
 #endif // PROGRAM_INFO_CACHE_H
diff --git a/mythtv/programs/mythfrontend/viewscheduled.cpp b/mythtv/programs/mythfrontend/viewscheduled.cpp
index 874a13cc278..52185ecb20a 100644
--- a/mythtv/programs/mythfrontend/viewscheduled.cpp
+++ b/mythtv/programs/mythfrontend/viewscheduled.cpp
@@ -267,12 +267,16 @@ void ViewScheduled::LoadList(bool useExistingData)
     if (!useExistingData)
         LoadFromScheduler(m_recList, m_conflictBool);
 
-    auto pit = m_recList.begin();
     m_recgroupList[m_defaultGroup] = ProgramList(false);
     m_recgroupList[m_defaultGroup].setAutoDelete(false);
+
+    auto pit = m_recList.begin();
     while (pit != m_recList.end())
     {
         ProgramInfo *pginfo = *pit;
+
+        CalcRecordedPercent(*pginfo);
+
         const RecStatus::Type recstatus = pginfo->GetRecordingStatus();
         if ((pginfo->GetRecordingEndTime() >= now ||
              pginfo->GetScheduledEndTime() >= now ||
@@ -416,6 +420,8 @@ void ViewScheduled::UpdateUIListItem(MythUIButtonListItem* item,
     pginfo->ToMap(infoMap);
     item->SetTextFromMap(infoMap, state);
 
+    item->SetProgress(0, 100, pginfo->GetProgressPercent());
+
     QString rating = QString::number(pginfo->GetStars(10));
     item->DisplayState(rating, "ratingstate");
     item->DisplayState(state, "status");
@@ -445,16 +451,12 @@ void ViewScheduled::FillList()
     while (pit != plist.end())
     {
         ProgramInfo *pginfo = *pit;
-        if (!pginfo)
+        if (pginfo)
         {
-            ++pit;
-            continue;
+            auto *item = new MythUIButtonListItem(m_schedulesList,"",
+                                                  QVariant::fromValue(pginfo));
+            UpdateUIListItem(item, pginfo);
         }
-
-        auto *item = new MythUIButtonListItem(m_schedulesList,"",
-                                              QVariant::fromValue(pginfo));
-
-        UpdateUIListItem(item, pginfo);
         ++pit;
     }
 
@@ -587,19 +589,62 @@ void ViewScheduled::customEvent(QEvent *event)
             return;
 
         const QString& message = me->Message();
-        if (message != "SCHEDULE_CHANGE")
-            return;
+        if (message == "SCHEDULE_CHANGE")
+        {
+            m_needFill = true;
 
-        m_needFill = true;
+            if (m_inEvent)
+                return;
 
-        if (m_inEvent)
-            return;
+            m_inEvent = true;
 
-        m_inEvent = true;
+            LoadList();
 
-        LoadList();
+            m_inEvent = false;
+        }
+        else if (message.startsWith("UPDATE_FILE_SIZE"))
+        {
+            QStringList tokens = message.simplified().split(" ");
+            if (tokens.size() < 3)
+                return;
 
-        m_inEvent = false;
+            bool ok {false};
+            uint recordingID  = tokens[1].toUInt();
+            uint64_t filesize = tokens[2].toLongLong(&ok);
+
+            // Locate program
+            auto pit = m_recList.begin();
+            while (pit != m_recList.end())
+            {
+                ProgramInfo* pginfo = *pit;
+                if (pginfo && pginfo->GetRecordingID() == recordingID)
+                {
+                    // Update size & progress
+                    pginfo->SetFilesize(filesize);
+                    uint current = pginfo->GetProgressPercent();
+                    CalcRecordedPercent(*pginfo);
+                    if (pginfo->GetProgressPercent() != current)
+                    {
+                        // Update display, if it's shown
+                        MythUIButtonListItem *item =
+                            m_schedulesList->
+                            GetItemByData(QVariant::fromValue(pginfo));
+                        if (item)
+                        {
+                            UpdateUIListItem(item, pginfo);
+
+                            // Update selected item if necessary
+                            MythUIButtonListItem *selected =
+                                m_schedulesList->GetItemCurrent();
+                            if (item == selected)
+                                updateInfo(selected);
+                        }
+                    }
+                    break;
+                }
+                ++pit;
+            }
+        }
     }
     else if (event->type() == DialogCompletionEvent::kEventType)
     {
@@ -680,6 +725,23 @@ void ViewScheduled::customEvent(QEvent *event)
     }
 }
 
+void ViewScheduled::CalcRecordedPercent(ProgramInfo &pg)
+{
+    QDateTime start = pg.GetRecordingStartTime();
+    int current = start.secsTo(MythDate::current());
+    uint recordedPercent = 0;
+    int duration = 0;
+    if (current > 0)
+    {
+        // Recording stops at end of the final minute
+        duration        = start.secsTo(pg.GetRecordingEndTime()) + 60;
+        recordedPercent = duration > current ? current * 100 / duration : 100;
+    }
+    pg.SetProgressPercent(recordedPercent);
+    LOG(VB_GUI, LOG_DEBUG, QString("%1  %2/%3 = %4%")
+        .arg(pg.GetTitle()).arg(current).arg(duration).arg(recordedPercent));
+}
+
 ProgramInfo *ViewScheduled::GetCurrentProgram(void) const
 {
     MythUIButtonListItem *item = m_schedulesList->GetItemCurrent();
diff --git a/mythtv/programs/mythfrontend/viewscheduled.h b/mythtv/programs/mythfrontend/viewscheduled.h
index 4295c472bcf..99f107589c8 100644
--- a/mythtv/programs/mythfrontend/viewscheduled.h
+++ b/mythtv/programs/mythfrontend/viewscheduled.h
@@ -61,6 +61,7 @@ class ViewScheduled : public ScheduleCommon
 
     void UpdateUIListItem(MythUIButtonListItem* item,
                           ProgramInfo *pginfo);
+    static void CalcRecordedPercent(ProgramInfo &pg);
 
     bool  m_conflictBool              {false};
     QDate m_conflictDate;
diff --git a/mythtv/themes/MythCenter-wide/recordings-ui.xml b/mythtv/themes/MythCenter-wide/recordings-ui.xml
index 60ffbbf7243..a1c0ed97540 100644
--- a/mythtv/themes/MythCenter-wide/recordings-ui.xml
+++ b/mythtv/themes/MythCenter-wide/recordings-ui.xml
@@ -194,6 +194,16 @@
             <statetype name="buttonitem">
                 <state name="active">
                     <area>0,0,880,30</area>
+                    <progressbar name="buttonprogress">
+                        <area>0,0,100%,100%</area>
+                        <layout>horizontal</layout>
+                        <style>reveal</style>
+                        <shape name="progressimage">
+                            <area>0,1,100%,100%-1</area>
+                            <type>box</type>
+                            <fill color="#000000" alpha="128"/>
+                        </shape>
+                    </progressbar>
                     <statetype name="status">
                         <position>3,2</position>
                         <state name="disabled">
@@ -226,12 +236,13 @@
                     <textarea name="titlesubtitle" from="buttontext">
                         <area>32,2,656,28</area>
                         <align>vcenter</align>
+                        <template>%titlesubtitle%% (|progresspercent|%)%</template>
                     </textarea>
-                    <textarea name="shortstartdate" from="titlesubtitle">
+                    <textarea name="shortstartdate" from="buttontext">
                         <area>634,2,120,28</area>
                         <align>right,vcenter</align>
                     </textarea>
-                    <textarea name="starttime" from="shortstartdate">
+                    <textarea name="starttime" from="buttontext">
                         <area>760,2,114,28</area>
                         <align>right,vcenter</align>
                     </textarea>
@@ -264,8 +275,7 @@
                     <shape name="selectbar">
                         <area>0,0,100%,30</area>
                     </shape>
-                    <textarea name="titlesubtitle" from="buttontext">
-                        <area>32,2,656,28</area>
+                    <textarea name="fonts" from="buttontext">
                         <font>basesmall_normal_selected</font>
                         <font state="disabled">basesmall_disabled_selected</font>
                         <font state="error">basesmall_error_selected</font>
@@ -274,11 +284,15 @@
                         <font state="running">basesmall_running_selected</font>
                         <align>vcenter</align>
                     </textarea>
-                    <textarea name="shortstartdate" from="titlesubtitle">
-                        <area>634,2,120,28</area>
+                    <textarea name="titlesubtitle" from="fonts">
+                         <area>32,2,656,28</area>
+                         <template>%titlesubtitle%% (|progresspercent|%)%</template>
+                    </textarea>
+                    <textarea name="shortstartdate" from="fonts">
+                       <area>634,2,120,28</area>
                         <align>right,vcenter</align>
                     </textarea>
-                    <textarea name="starttime" from="shortstartdate">
+                    <textarea name="starttime" from="fonts">
                         <area>760,2,114,28</area>
                         <align>right,vcenter</align>
                     </textarea>
@@ -397,6 +411,7 @@
             <font>baselarge</font>
             <cutdown>yes</cutdown>
             <align>vcenter</align>
+            <template>%title%% (|progresspercent|%)%</template>
         </textarea>
 
         <textarea name="channel" from="basetextarea">
diff --git a/mythtv/themes/MythCenter-wide/schedule-ui.xml b/mythtv/themes/MythCenter-wide/schedule-ui.xml
index bbf49f1696a..f3b9f4ff59e 100644
--- a/mythtv/themes/MythCenter-wide/schedule-ui.xml
+++ b/mythtv/themes/MythCenter-wide/schedule-ui.xml
@@ -521,6 +521,17 @@
                     </textarea>
                     <textarea name="title" from="shortstarttimedate">
                         <area>480,2,655,24</area>
+                        <template>%title%% (|progresspercent|%)%</template>
+                        <progressbar name="buttonprogress">
+                            <area>0,0,100%,100%</area>
+                            <layout>horizontal</layout>
+                            <style>reveal</style>
+                            <shape name="progressimage">
+                                <area>0,0,100%,100%</area>
+                                <type>box</type>
+                                <fill color="#000000" alpha="128"/>
+                            </shape>
+                        </progressbar>
                     </textarea>
                     <textarea name="card" from="shortstarttimedate">
                         <area>1145,2,40,24</area>
@@ -542,6 +553,7 @@
                     </textarea>
                     <textarea name="title" from="shortstarttimedate">
                         <area>480,2,655,24</area>
+                        <template>%title%% (|progresspercent|%)%</template>
                     </textarea>
                     <textarea name="card" from="shortstarttimedate">
                         <area>1145,2,40,24</area>
@@ -562,10 +574,16 @@
         </buttonlist>
 
         <textarea name="title" from="basetextarea">
-            <area>30,454,1200,50</area>
+            <area>30,454,1160,50</area>
             <font>baselarge</font>
         </textarea>
 
+        <textarea name="progresspercent" from="basetextarea">
+            <area>1200,454,50,50</area>
+            <align>right,vcenter</align>
+            <template>%progresspercent|%%</template>
+        </textarea>
+
         <textarea name="channel" from="basetextarea">
             <area>30,494,360,30</area>
         </textarea>
diff --git a/mythtv/themes/MythCenter/recordings-ui.xml b/mythtv/themes/MythCenter/recordings-ui.xml
index 1c48a09f04b..133d1668b93 100644
--- a/mythtv/themes/MythCenter/recordings-ui.xml
+++ b/mythtv/themes/MythCenter/recordings-ui.xml
@@ -194,6 +194,16 @@
             <statetype name="buttonitem">
                 <state name="active">
                     <area>0,0,535,30</area>
+                    <progressbar name="buttonprogress">
+                        <area>0,0,100%,100%</area>
+                        <layout>horizontal</layout>
+                        <style>reveal</style>
+                        <shape name="progressimage">
+                            <area>0,1,100%,100%-1</area>
+                            <type>box</type>
+                            <fill color="#000000" alpha="128"/>
+                        </shape>
+                    </progressbar>
                     <statetype name="status">
                         <position>3,2</position>
                         <state name="disabled">
@@ -226,12 +236,13 @@
                     <textarea name="titlesubtitle" from="buttontext">
                         <area>32,0,336,30</area>
                         <align>vcenter</align>
+                        <template>%titlesubtitle%% (|progresspercent|%)%</template>
                     </textarea>
-                    <textarea name="shortstartdate" from="titlesubtitle">
+                    <textarea name="shortstartdate" from="buttontext">
                         <area>295,0,130,30</area>
                         <align>right,vcenter</align>
                     </textarea>
-                    <textarea name="starttime" from="shortstartdate">
+                    <textarea name="starttime" from="buttontext">
                         <area>415,0,114,30</area>
                         <align>right,vcenter</align>
                     </textarea>
@@ -264,8 +275,8 @@
                     <shape name="selectbar">
                         <area>0,0,100%,30</area>
                     </shape>
-                    <textarea name="titlesubtitle" from="buttontext">
-                        <area>32,0,336,30</area>
+                    <textarea name="fonts" from="buttontext">
+                        <font>basesmall_normal_selected</font>
                         <font>basesmall_normal_selected</font>
                         <font state="disabled">basesmall_disabled_selected</font>
                         <font state="error">basesmall_error_selected</font>
@@ -274,11 +285,15 @@
                         <font state="running">basesmall_running_selected</font>
                         <align>vcenter</align>
                     </textarea>
-                    <textarea name="shortstartdate" from="titlesubtitle">
+                    <textarea name="titlesubtitle" from="fonts">
+                        <area>32,0,336,30</area>
+                        <template>%titlesubtitle%% (|progresspercent|%)%</template>
+                    </textarea>
+                    <textarea name="shortstartdate" from="fonts">
                         <area>295,0,130,30</area>
                         <align>right,vcenter</align>
                     </textarea>
-                    <textarea name="starttime" from="shortstartdate">
+                    <textarea name="starttime" from="fonts">
                         <area>415,0,114,30</area>
                         <align>right,vcenter</align>
                     </textarea>
@@ -397,6 +412,7 @@
             <font>baselarge</font>
             <cutdown>yes</cutdown>
             <align>vcenter</align>
+            <template>%title%% (|progresspercent|%)%</template>
         </textarea>
 
         <textarea name="channel" from="basetextarea">
diff --git a/mythtv/themes/MythCenter/schedule-ui.xml b/mythtv/themes/MythCenter/schedule-ui.xml
index 3e3ebe65daf..cbbed8b9c88 100644
--- a/mythtv/themes/MythCenter/schedule-ui.xml
+++ b/mythtv/themes/MythCenter/schedule-ui.xml
@@ -456,6 +456,17 @@
                     </textarea>
                     <textarea name="title" from="shortstarttimedate">
                         <area>375,1,340,24</area>
+                        <template>%title%% (|progresspercent|%)%</template>
+                        <progressbar name="buttonprogress">
+                            <area>0,0,100%,100%</area>
+                            <layout>horizontal</layout>
+                            <style>reveal</style>
+                            <shape name="progressimage">
+                                <area>0,0,100%,100%</area>
+                                <type>box</type>
+                                <fill color="#000000" alpha="128"/>
+                            </shape>
+                        </progressbar>
                     </textarea>
                     <textarea name="card" from="shortstarttimedate">
                         <area>715,1,35,24</area>
@@ -477,6 +488,7 @@
                     </textarea>
                     <textarea name="title" from="shortstarttimedate">
                         <area>375,1,340,24</area>
+                        <template>%title%% (|progresspercent|%)%</template>
                     </textarea>
                     <textarea name="card" from="shortstarttimedate">
                         <area>715,1,35,24</area>
@@ -495,6 +507,12 @@
             <font>baselarge</font>
         </textarea>
 
+        <textarea name="progresspercent" from="basetextarea">
+            <area>740,360,50,40</area>
+            <align>right,vcenter</align>
+            <template>%progresspercent|%%</template>
+        </textarea>
+
         <textarea name="channel" from="basetextarea">
             <area>20,400,160,30</area>
         </textarea>
