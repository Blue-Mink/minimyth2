From 38204803ac3d6bce0274df0e731f9f67c052e41b Mon Sep 17 00:00:00 2001
From: Lawrence Rust <lvr@softsystem.co.uk>
Date: Thu, 18 Aug 2016 18:33:11 +0100
Subject: [PATCH 348/348] MythMusic: Add network control commands to list and
 play an album

Adds the following network control commands:

query artists [ARTIST]
query albums [TITLE[//ARTIST]]
query tracks [TITLE[//ARTIST[//TRACK]]]
play music album TITLE[//ARTIST[//TRACK]]

TITLE and ARTIST can contain unix style wildcards and default to '*'.

The 'query artists' and 'query albums' commands return a newline
separated list.

The 'query tracks' command returns a comma separated list of track names
followed by '//ID' where ID can be passed to 'play music track ID'.

The 'play music album' command replaces the active playlist with tracks
from the specified album and then restarts playback at the 1st track.

Signed-off-by: Lawrence Rust <lvr@softsystem.co.uk>
---
 mythplugins/mythmusic/mythmusic/musicdata.cpp      |   72 +++---
 mythplugins/mythmusic/mythmusic/musicdata.h        |    6 +-
 mythplugins/mythmusic/mythmusic/musicplayer.cpp    |  239 +++++++++++++++++++-
 mythplugins/mythmusic/mythmusic/playlist.cpp       |   17 ++
 mythplugins/mythmusic/mythmusic/playlist.h         |    1 +
 .../mythmusic/mythmusic/playlistcontainer.cpp      |    2 +-
 mythplugins/mythmusic/mythmusic/streamview.cpp     |    1 +
 mythtv/programs/mythfrontend/networkcontrol.cpp    |  111 ++++++---
 8 files changed, 363 insertions(+), 86 deletions(-)

diff --git a/mythplugins/mythmusic/mythmusic/musicdata.cpp b/mythplugins/mythmusic/mythmusic/musicdata.cpp
index a7b192b..dbb3cbf 100644
--- a/mythplugins/mythmusic/mythmusic/musicdata.cpp
+++ b/mythplugins/mythmusic/mythmusic/musicdata.cpp
@@ -104,46 +104,40 @@ void MusicData::reloadMusic(void)
         gPlayer->restorePosition();
 }
 
-void MusicData::loadMusic(void)
+// load music
+bool MusicData::loadMusic(void)
 {
-    // only do this once
-    if (initialized)
-        return;
-
-    MythScreenStack *popupStack = GetMythMainWindow()->GetStack("popup stack");
-    QString message = qApp->translate("(MythMusicMain)",
-                                      "Loading Music. Please wait ...");
-
-    MythUIBusyDialog *busy = new MythUIBusyDialog(message, popupStack,
-                                                  "musicscanbusydialog");
-    if (busy->Create())
-        popupStack->AddScreen(busy, false);
-    else
-        busy = NULL;
-
-    // Set the various track formatting modes
-    MusicMetadata::setArtistAndTrackFormats();
-
-    AllMusic *all_music = new AllMusic();
-
-    //  Load all playlists into RAM (once!)
-    PlaylistContainer *all_playlists = new PlaylistContainer(all_music);
-
-    gMusicData->all_music = all_music;
-    gMusicData->all_streams = new AllStream();
-    gMusicData->all_playlists = all_playlists;
-
-    gMusicData->initialized = true;
-
-    while (!gMusicData->all_playlists->doneLoading() || !gMusicData->all_music->doneLoading())
+    if (!initialized.fetchAndStoreAcquire(1))
     {
-        qApp->processEvents();
-        usleep(50000);
+        MythScreenStack *popupStack = GetMythMainWindow()->GetStack("popup stack");
+        QString message = qApp->translate("(MythMusicMain)",
+                                          "Loading Music. Please wait ...");
+
+        MythUIBusyDialog *busy = new MythUIBusyDialog(message, popupStack,
+                                                      "musicscanbusydialog");
+        if (busy->Create())
+            popupStack->AddScreen(busy, false);
+        else
+            busy = NULL;
+
+        // Set the various track formatting modes
+        MusicMetadata::setArtistAndTrackFormats();
+
+        all_music = new AllMusic();
+        all_playlists = new PlaylistContainer(all_music);
+        all_streams = new AllStream();
+
+        while (!all_playlists->doneLoading() || !all_music->doneLoading())
+        {
+            qApp->processEvents();
+            usleep(50000);
+        }
+
+        gPlayer->loadStreamPlaylist();
+        gPlayer->loadPlaylist();
+
+        if (busy)
+            busy->Close();
     }
-
-    gPlayer->loadStreamPlaylist();
-    gPlayer->loadPlaylist();
-
-    if (busy)
-        busy->Close();
+    return all_music && all_playlists && all_streams;
 }
diff --git a/mythplugins/mythmusic/mythmusic/musicdata.h b/mythplugins/mythmusic/mythmusic/musicdata.h
index e1afe6b..f8e0a87 100644
--- a/mythplugins/mythmusic/mythmusic/musicdata.h
+++ b/mythplugins/mythmusic/mythmusic/musicdata.h
@@ -1,9 +1,9 @@
 #ifndef MUSICDATA_H_
 #define MUSICDATA_H_
 
-
 // qt
 #include <QRunnable>
+#include <QAtomicInt>
 
 // myth
 #include <mythexp.h>
@@ -46,7 +46,7 @@ class MusicData : public QObject
     ~MusicData();
 
     void scanMusic(void);
-    void loadMusic(void);
+    bool loadMusic(void);
 
   public slots:
     void reloadMusic(void);
@@ -55,7 +55,7 @@ class MusicData : public QObject
     PlaylistContainer  *all_playlists;
     AllMusic           *all_music;
     AllStream          *all_streams;
-    bool                initialized;
+    QAtomicInt         initialized;
 };
 
 // This global variable contains the MusicData instance for the application
diff --git a/mythplugins/mythmusic/mythmusic/musicplayer.cpp b/mythplugins/mythmusic/mythmusic/musicplayer.cpp
index be1025f..ebf84c0 100644
--- a/mythplugins/mythmusic/mythmusic/musicplayer.cpp
+++ b/mythplugins/mythmusic/mythmusic/musicplayer.cpp
@@ -638,6 +638,8 @@ void MusicPlayer::customEvent(QEvent *event)
 
         if (me->Message().left(13) == "MUSIC_COMMAND")
         {
+            static QString const kSep("//");
+
             QStringList list = me->Message().simplified().split(' ');
 
             if (list.size() >= 3 && list[1] == gCoreContext->GetHostName())
@@ -717,21 +719,65 @@ void MusicPlayer::customEvent(QEvent *event)
                              QString("MusicPlayer: got invalid MUSIC_COMMAND "
                                      "PLAY_LIST - %1").arg(me->Message()));
                     }
-                    else if (gMusicData && gMusicData->all_playlists)
+                    else if (gMusicData && gMusicData->loadMusic())
                     {
-                        int start = me->Message().indexOf("'");
-                        int end = me->Message().lastIndexOf("'");
-                        if (start != -1 && end != -1 && start != end)
+                        Playlist *plist = gMusicData->all_playlists->getPlaylist(
+                                            me->Message().section(' ', 3));
+                        if (plist)
                         {
-                            QString name = me->Message().mid(start + 1, end - start - 1);
-                            Playlist *plist = gMusicData->all_playlists->getPlaylist(name);
-                            if (plist)
+                            gMusicData->all_playlists->copyToActive(plist->getID());
+                            qApp->processEvents();
+
+                            setCurrentTrackPos(0);
+                            if (!hasClient())
+                                showMiniPlayer();
+                        }
+                    }
+                }
+                else if (list[2] == "PLAY_ALBUM")
+                {
+                    if (list.size() < 4)
+                    {
+                        LOG(VB_GENERAL, LOG_ERR,
+                             QString("MusicPlayer: got invalid MUSIC_COMMAND "
+                                     "PLAY_ALBUM - %1").arg(me->Message()));
+                    }
+                    else if (gMusicData && gMusicData->loadMusic())
+                    {
+                        stop();
+                        gMusicData->all_playlists->clearActive();
+
+                        QString album, artist, title;
+                        title = me->Message().section(' ', 3);
+                        album = title.section(kSep,0,0);
+                        artist = title.section(kSep,1,1);
+                        title = title.section(kSep,2);
+
+                        QRegExp reAlbum(!album.isEmpty() ? album : QString("*"),
+                            Qt::CaseInsensitive, QRegExp::WildcardUnix);
+                        QRegExp reArtist(!artist.isEmpty() ? artist : QString("*"),
+                            Qt::CaseInsensitive, QRegExp::WildcardUnix);
+                        QRegExp reTitle(!title.isEmpty() ? title : QString("*"),
+                            Qt::CaseInsensitive, QRegExp::WildcardUnix);
+
+                        MetadataPtrList *mlist = gMusicData->all_music->
+                                                    getAllMetadata();
+                        for (MetadataPtrList::const_iterator it = mlist->begin();
+                            it != mlist->end(); ++it)
+                        {
+                            MusicMetadata *meta = *it;
+                            if (reAlbum.exactMatch(meta->Album()) &&
+                                reArtist.exactMatch(meta->Artist()) &&
+                                reTitle.exactMatch(meta->Title()) )
                             {
-                                gMusicData->all_playlists->copyToActive(plist->getID());
-                                qApp->processEvents();
-                                setCurrentTrackPos(0);
+                                gMusicData->all_playlists->
+                                    getActive()->addTrack(meta->ID(), false);
                             }
                         }
+
+                        setCurrentTrackPos(0);
+                        if (!hasClient())
+                            showMiniPlayer();
                     }
                 }
                 else if (list[2] == "GET_METADATA")
@@ -766,8 +812,12 @@ void MusicPlayer::customEvent(QEvent *event)
                 {
                     QString mdataStr;
 
-                    if (gMusicData && gMusicData->all_playlists)
-                        mdataStr = gMusicData->all_playlists->getPlaylistNames().join(", ");
+                    if (gMusicData && gMusicData->loadMusic())
+                    {
+                        mdataStr = gMusicData->all_playlists->getPlaylistNames().join("\n");
+                        if (mdataStr.isEmpty())
+                            mdataStr = "<None>";
+                    }
                     else
                         mdataStr = "<Uninitialised>";
 
@@ -776,6 +826,171 @@ void MusicPlayer::customEvent(QEvent *event)
                     MythEvent me(message);
                     gCoreContext->dispatch(me);
                 }
+                else if (list[2] == "GET_ARTISTS")
+                {
+                    QString artist;
+                    if (list.size() >= 4)
+                        artist = QStringList(list.mid(3)).join(" ");
+
+                    QRegExp reArtist(!artist.isEmpty() ? artist : QString("*"),
+                        Qt::CaseInsensitive, QRegExp::WildcardUnix);
+
+                    QStringList matching;
+                    if (gMusicData && gMusicData->loadMusic())
+                    {
+                        MetadataPtrList *mlist = gMusicData->all_music->
+                                                    getAllMetadata();
+                        for ( MetadataPtrList::const_iterator it = mlist->begin();
+                            it != mlist->end(); ++it)
+                        {
+                            MusicMetadata *meta = *it;
+                            if (reArtist.exactMatch(meta->Artist()) )
+                            {
+                                if (!matching.contains(meta->Artist(),
+                                                        Qt::CaseInsensitive))
+                                    matching << meta->Artist();
+                            }
+                        }
+                        if (!matching.isEmpty())
+                            matching.sort();
+                        else
+                            matching << "<None>";
+                    }
+                    else
+                        matching << "<Uninitialised>";
+
+                    QString message = QString("MUSIC_CONTROL ANSWER %1 %2")
+                            .arg(gCoreContext->GetHostName())
+                            .arg(matching.join("\n"));
+                    MythEvent me(message);
+                    gCoreContext->dispatch(me);
+                }
+                else if (list[2] == "GET_ALBUMS")
+                {
+                    QString album, artist;
+                    if (list.size() >= 4)
+                    {
+                        album = QStringList(list.mid(3)).join(" ");
+                        artist = album.section(kSep,1);
+                        album = album.section(kSep,0,0);
+                    }
+
+                    QRegExp reAlbum(!album.isEmpty() ? album : QString("*"),
+                        Qt::CaseInsensitive, QRegExp::WildcardUnix);
+                    QRegExp reArtist(!artist.isEmpty() ? artist : QString("*"),
+                        Qt::CaseInsensitive, QRegExp::WildcardUnix);
+
+                    QStringList matching;
+                    if (gMusicData && gMusicData->loadMusic())
+                    {
+                        MetadataPtrList *mlist = gMusicData->all_music->
+                                                    getAllMetadata();
+                        for ( MetadataPtrList::const_iterator it = mlist->begin();
+                            it != mlist->end(); ++it)
+                        {
+                            MusicMetadata *meta = *it;
+                            if (reAlbum.exactMatch(meta->Album()) &&
+                                reArtist.exactMatch(meta->Artist()) )
+                            {
+                                QString match = meta->Album() + kSep + meta->Artist();
+                                if (!matching.contains(match, Qt::CaseInsensitive))
+                                    matching << match;
+                            }
+                        }
+                        if (!matching.isEmpty())
+                            matching.sort();
+                        else
+                            matching << "<None>";
+                    }
+                    else
+                        matching << "<Uninitialised>";
+
+                    QString message = QString("MUSIC_CONTROL ANSWER %1 %2")
+                            .arg(gCoreContext->GetHostName())
+                            .arg(matching.join("\n"));
+                    MythEvent me(message);
+                    gCoreContext->dispatch(me);
+                }
+                else if (list[2] == "GET_TRACKS")
+                {
+                    QString album, artist, title, playlist;
+                    if (list.size() >= 4)
+                    {
+                        artist = QStringList(list.mid(3)).join(" ");
+                        if (artist.startsWith("@"))
+                        {
+                            playlist = artist.section(kSep,0,0);
+                            album = artist.section(kSep,1,1);
+                            title = artist.section(kSep,3);
+                            artist = artist.section(kSep,2,2);
+                        }
+                        else
+                        {
+                            album = artist.section(kSep,0,0);
+                            title = artist.section(kSep,2);
+                            artist = artist.section(kSep,1,1);
+                        }
+                    }
+
+                    QStringList matching;
+                    if (gMusicData && gMusicData->loadMusic())
+                    {
+                        const MetadataPtrList *mlist;
+                        MetadataPtrList songs;
+
+                        if (!playlist.isEmpty())
+                        {
+                            playlist = playlist.mid(1); // strip leading @
+                            Playlist *plist = playlist.isEmpty() ?
+                                gMusicData->all_playlists->getActive() :
+                                gMusicData->all_playlists->getPlaylist(playlist);
+                            if (plist)
+                            {
+                                songs = plist->getSongs();
+                                mlist = &songs;
+                            }
+                            else
+                                mlist = NULL;
+                        }
+                        else
+                            mlist = gMusicData->all_music->getAllMetadata();
+
+                        if (mlist)
+                        {
+                            QRegExp reAlbum(!album.isEmpty() ? album : QString("*"),
+                                Qt::CaseInsensitive, QRegExp::WildcardUnix);
+                            QRegExp reArtist(!artist.isEmpty() ? artist : QString("*"),
+                                Qt::CaseInsensitive, QRegExp::WildcardUnix);
+                            QRegExp reTitle(!title.isEmpty() ? title : QString("*"),
+                                Qt::CaseInsensitive, QRegExp::WildcardUnix);
+
+                            for (MetadataPtrList::const_iterator it = mlist->begin();
+                                it != mlist->end(); ++it)
+                            {
+                                MusicMetadata *meta = *it;
+                                if (reAlbum.exactMatch(meta->Album()) &&
+                                    reArtist.exactMatch(meta->Artist()) &&
+                                    reTitle.exactMatch(meta->Title()) )
+                                {
+                                    matching << meta->Artist() + kSep +
+                                                meta->Album() + kSep +
+                                                meta->Title() + kSep +
+                                                QString::number(meta->ID());
+                                }
+                            }
+                        }
+                        if (matching.isEmpty())
+                            matching << "<None>";
+                    }
+                    else
+                        matching << "<Uninitialised>";
+
+                    QString message = QString("MUSIC_CONTROL ANSWER %1 %2")
+                            .arg(gCoreContext->GetHostName())
+                            .arg(matching.join("\n"));
+                    MythEvent me(message);
+                    gCoreContext->dispatch(me);
+                }
             }
             else
                 LOG(VB_GENERAL, LOG_ERR,
diff --git a/mythplugins/mythmusic/mythmusic/playlist.cpp b/mythplugins/mythmusic/mythmusic/playlist.cpp
index 9efb61f..9f6cc32 100644
--- a/mythplugins/mythmusic/mythmusic/playlist.cpp
+++ b/mythplugins/mythmusic/mythmusic/playlist.cpp
@@ -1444,3 +1444,20 @@ int Playlist::CreateCDAudio(void)
 {
     return -1;
 }
+
+MetadataPtrList Playlist::getSongs() const
+{
+    MetadataPtrList list;
+    for ( SongList::const_iterator it = m_shuffledSongs.begin();
+        it != m_shuffledSongs.end(); ++it)
+    {
+        MusicMetadata::IdType id = *it;
+        int repo = ID_TO_REPO(id);
+
+        if (repo == RT_Radio)
+            list << gMusicData->all_streams->getMetadata(id);
+        else
+            list << gMusicData->all_music->getMetadata(id);
+    }
+    return list;
+}
diff --git a/mythplugins/mythmusic/mythmusic/playlist.h b/mythplugins/mythmusic/mythmusic/playlist.h
index b658696..286ba92 100644
--- a/mythplugins/mythmusic/mythmusic/playlist.h
+++ b/mythplugins/mythmusic/mythmusic/playlist.h
@@ -75,6 +75,7 @@ class Playlist : public QObject
 
 
     MusicMetadata* getSongAt(int pos) const;
+    MetadataPtrList getSongs() const;
 
     int getTrackCount(void) { return m_songs.count(); }
 
diff --git a/mythplugins/mythmusic/mythmusic/playlistcontainer.cpp b/mythplugins/mythmusic/mythmusic/playlistcontainer.cpp
index 16719cc..2d00620 100644
--- a/mythplugins/mythmusic/mythmusic/playlistcontainer.cpp
+++ b/mythplugins/mythmusic/mythmusic/playlistcontainer.cpp
@@ -173,7 +173,7 @@ Playlist *PlaylistContainer::getPlaylist(const QString &name)
     QList<Playlist*>::iterator it = m_allPlaylists->begin();
     for (; it != m_allPlaylists->end(); ++it)
     {
-        if ((*it)->getName() == name)
+        if (0 == name.compare((*it)->getName(), Qt::CaseInsensitive))
             return *it;
     }
 
diff --git a/mythplugins/mythmusic/mythmusic/streamview.cpp b/mythplugins/mythmusic/mythmusic/streamview.cpp
index 67a5389..c5a75f8 100644
--- a/mythplugins/mythmusic/mythmusic/streamview.cpp
+++ b/mythplugins/mythmusic/mythmusic/streamview.cpp
@@ -74,6 +74,7 @@ bool StreamView::Create(void)
     connect(m_streamList, SIGNAL(itemVisible(MythUIButtonListItem*)),
             this, SLOT(streamItemVisible(MythUIButtonListItem*)));
 
+    gPlayer->loadStreamPlaylist();
     gPlayer->setPlayMode(MusicPlayer::PLAYMODE_RADIO);
 
     updateStreamList();
diff --git a/mythtv/programs/mythfrontend/networkcontrol.cpp b/mythtv/programs/mythfrontend/networkcontrol.cpp
index 97c4d35..c44fc51 100644
--- a/mythtv/programs/mythfrontend/networkcontrol.cpp
+++ b/mythtv/programs/mythfrontend/networkcontrol.cpp
@@ -779,32 +779,13 @@ QString NetworkControl::processPlay(NetworkCommand *nc, int clientID)
                                 .arg(nc->getFrom(3));
             else if (is_abbrev("list", nc->getArg(2)))
             {
-                gotAnswer = false;
-
-                MythEvent me(QString("MUSIC_COMMAND %1 GET_PLAYLISTS")
-                                .arg(gCoreContext->GetHostName()) );
-                gCoreContext->dispatch(me);
-
-                QTime timer;
-                timer.start();
-                while (timer.elapsed() < FE_SHORT_TO && !gotAnswer)
-                {
-                    qApp->processEvents();
-                    usleep(10000);
-                }
-
-                if (gotAnswer && answer == "<Uninitialised>")
-                {
-                    GetMythMainWindow()->JumpTo(jumpMap["playlistview"]);
-
-                    QTime timer;
-                    timer.start();
-                    while ((timer.elapsed() < FE_LONG_TO) &&
-                           (GetMythUI()->GetCurrentLocation().toLower() != "playlistview"))
-                        usleep(10000);
-                }
-
-                message = QString("MUSIC_COMMAND %1 PLAY_LIST '%2'")
+                message = QString("MUSIC_COMMAND %1 PLAY_LIST %2")
+                                .arg(hostname)
+                                .arg(nc->getFrom(3));
+            }
+            else if (is_abbrev("album", nc->getArg(2)))
+            {
+                message = QString("MUSIC_COMMAND %1 PLAY_ALBUM %2")
                                 .arg(hostname)
                                 .arg(nc->getFrom(3));
             }
@@ -1107,6 +1088,72 @@ QString NetworkControl::processQuery(NetworkCommand *nc)
 
         return "unknown";
     }
+    else if (is_abbrev("artists", nc->getArg(1)))
+    {
+        gotAnswer = false;
+
+        MythEvent me(QString("MUSIC_COMMAND %1 GET_ARTISTS %2")
+                        .arg(gCoreContext->GetHostName())
+                        .arg(nc->getArgCount() >= 3 ? nc->getFrom(2) : "") );
+        gCoreContext->dispatch(me);
+
+        QTime timer;
+        timer.start();
+        while (timer.elapsed() < FE_SHORT_TO && !gotAnswer)
+        {
+            qApp->processEvents();
+            usleep(10000);
+        }
+
+        if (gotAnswer)
+            return answer;
+
+        return "unknown";
+    }
+    else if (is_abbrev("albums", nc->getArg(1)))
+    {
+        gotAnswer = false;
+
+        MythEvent me(QString("MUSIC_COMMAND %1 GET_ALBUMS %2")
+                        .arg(gCoreContext->GetHostName())
+                        .arg(nc->getArgCount() >= 3 ? nc->getFrom(2) : "") );
+        gCoreContext->dispatch(me);
+
+        QTime timer;
+        timer.start();
+        while (timer.elapsed() < FE_SHORT_TO && !gotAnswer)
+        {
+            qApp->processEvents();
+            usleep(10000);
+        }
+
+        if (gotAnswer)
+            return answer;
+
+        return "unknown";
+    }
+    else if (is_abbrev("tracks", nc->getArg(1)))
+    {
+        gotAnswer = false;
+
+        MythEvent me(QString("MUSIC_COMMAND %1 GET_TRACKS %2")
+                        .arg(gCoreContext->GetHostName())
+                        .arg(nc->getArgCount() >= 3 ? nc->getFrom(2) : "") );
+        gCoreContext->dispatch(me);
+
+        QTime timer;
+        timer.start();
+        while (timer.elapsed() < FE_SHORT_TO && !gotAnswer)
+        {
+            qApp->processEvents();
+            usleep(10000);
+        }
+
+        if (gotAnswer)
+            return answer;
+
+        return "unknown";
+    }
     else if (is_abbrev("events", nc->getArg(1)))
     {
         result = nc->getClient()->WantsEvents() ? "On" : "Off";
@@ -1518,7 +1565,8 @@ QString NetworkControl::processHelp(NetworkCommand *nc)
             "play music file NAME   - Play specified file (MythMusic)\r\n"
             "play music track N     - Switch to specified track (MythMusic)\r\n"
             "play music url URL     - Play specified URL (MythMusic)\r\n"
-            "play music list NAME   - Play specified playlist (MythMusic)\r\n";
+            "play music list NAME   - Play specified playlist (MythMusic)\r\n"
+            "play music album ALBUM[//ARTIST[//TRACK]] - Play specified album (MythMusic)\r\n";
     }
     else if (is_abbrev("query", command))
     {
@@ -1539,7 +1587,10 @@ QString NetworkControl::processHelp(NetworkCommand *nc)
             "query version         - Query Frontend version details\r\n"
             "query channels        - Query available channels\r\n"
             "query channels START LIMIT - Query available channels from START and limit results to LIMIT lines\r\n"
-            "query playlists       - Query playlists (MythMusic)\r\n";
+            "query playlists       - Query playlists (MythMusic)\r\n"
+            "query artists [ARTIST] - List artists (wildcard) (MythMusic)\r\n"
+            "query albums [ALBUM[//ARTIST]] - List albums (*=wildcard) (MythMusic)\r\n"
+            "query tracks [ALBUM[//ARTIST[//TRACK]]] - List tracks (*=wildcard) (MythMusic)\r\n";
     }
     else if (is_abbrev("set", command))
     {
@@ -1701,9 +1752,7 @@ void NetworkControl::customEvent(QEvent *e)
                 (tokens[1] == "ANSWER") &&
                 (tokens[2] == gCoreContext->GetHostName()))
             {
-                answer = tokens[3];
-                for (int i = 4; i < tokens.size(); i++)
-                    answer += QString(" ") + tokens[i];
+                answer = message.section(' ', 3);
                 gotAnswer = true;
             }
 
-- 
1.7.9.5

