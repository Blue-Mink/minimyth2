From cd34d9314d72d80044e2209a8392dc57f0e93f1b Mon Sep 17 00:00:00 2001
From: Roger Siddons <dizygotheca@ntlworld.com>
Date: Wed, 7 Oct 2015 01:25:58 +0100
Subject: [PATCH 10/10] MythUI: Handle deviant orientation behaviour by Qt
 5.4.1

When loading a QImage, Qt 5.4.1 automatically orientates the image.
All other versions (Qt 4, 5.4.0, 5.4.2, 5.5 etc) load the raw image.
https://codereview.qt-project.org/#/c/110685/

This causes Gallery images to be mis-orientated (orientation is applied twice)

This patch applies compensation when a run-check detects Qt 5.4.1

Tested on Qt 5.2.1 & 5.4.1

diff --git a/mythtv/libs/libmythmetadata/imagemetadata.cpp b/mythtv/libs/libmythmetadata/imagemetadata.cpp
index f43e6c7..73e854a 100644
--- a/mythtv/libs/libmythmetadata/imagemetadata.cpp
+++ b/mythtv/libs/libmythmetadata/imagemetadata.cpp
@@ -40,6 +40,75 @@ int Orientation::Transform(int transform)
 
 
 /*!
+   \brief Initialises conversion matrix for Qt 5.4.1
+   \return Matrix of orientation codes such that:
+    Qt 5.4.1 orientation = matrix(file orientation, current orientation)
+ */
+Orientation::Matrix Orientation::InitOrientationMatrix()
+{
+    Orientation::Matrix matrix;
+
+    if (krunningQt541)
+    {
+        // Each row/string defines codes for a single file orientation
+        // Each col/value defines applicable code for corresponding current orientation
+        // As current orientation is applicable to raw camera image, these codes
+        // define the current orientation relative to 1/Normal (as Qt 5.4.1 has already
+        // applied the file orientation)
+        QStringList vals = QStringList()
+                << "0 1 2 3 4 5 6 7 8"
+                << "0 1 2 3 4 5 6 7 8"
+                << "0 2 1 4 3 8 7 6 5"
+                << "0 3 4 1 2 7 8 5 6"
+                << "0 4 3 2 1 6 5 8 7"
+                << "0 5 6 7 8 1 2 3 4"
+                << "0 8 7 6 5 2 1 4 3"
+                << "0 7 8 5 6 3 4 1 2"
+                << "0 6 5 8 7 4 3 2 1";
+
+        for (int row = 0; row < vals.size(); ++row)
+        {
+            QStringList rowVals = vals.at(row).split(' ');
+            for (int col = 0; col < rowVals.size(); ++col)
+                matrix[row][col] = rowVals.at(col).toInt();
+        }
+    }
+    return matrix;
+}
+
+const bool Orientation::krunningQt541 = (strcmp(qVersion(), "5.4.1") == 0);
+const Orientation::Matrix Orientation::kQt541_orientation = InitOrientationMatrix();
+
+
+/*!
+ * \brief Determines orientation required for an image
+ * \details Some Qt versions automatically apply file orientation when an image
+ * is loaded. This compensates for that to ensure images are always orientated
+   correctly.
+ * \param compensate Whether to compensate for Qt auto-rotation
+ * \return Exif orientation code to apply after the image has been loaded.
+ */
+int Orientation::GetCurrent(bool compensate)
+{
+    // Qt 5.4.1 automatically applies the file orientation when loading images
+    // Ref: https://codereview.qt-project.org/#/c/111398/
+    // Ref: https://codereview.qt-project.org/#/c/110685/
+    // https://bugreports.qt.io/browse/QTBUG-37946
+    if (compensate && krunningQt541)
+    {
+        // Deduce orientation relative to 1/Normal from file & current orientations
+        int old = m_current;
+        m_current = kQt541_orientation.value(m_file).value(m_current);
+
+        LOG(VB_FILE, LOG_DEBUG, LOC +
+            QString("Adjusted orientation %1 to %2 for Qt 5.4.1")
+            .arg(old).arg(m_current));
+    }
+    return m_current;
+}
+
+
+/*!
  * \brief Adjust current orientation code to apply a transform to an image
  * \details When displayed the image will be orientated iaw its orientation
  * code. The transform is effected by applying the reverse transform to the
diff --git a/mythtv/libs/libmythmetadata/imagemetadata.h b/mythtv/libs/libmythmetadata/imagemetadata.h
index 6c11c37..b5b49e9 100644
--- a/mythtv/libs/libmythmetadata/imagemetadata.h
+++ b/mythtv/libs/libmythmetadata/imagemetadata.h
@@ -64,7 +64,7 @@ public:
     //! Encode original & current orientation to a single Db field
     int Composite() { return m_current * 10 + m_file; }
     int Transform(int);
-    int GetCurrent()   { return m_current; }
+    int GetCurrent(bool compensate);
     QString Description();
 
     static int FromRotation(const QString &degrees);
@@ -76,6 +76,12 @@ private:
 
     typedef QHash<int, QHash<int, int> > Matrix;
 
+    //! True when using Qt 5.4.1 with its deviant orientation behaviour
+    static const bool krunningQt541;
+    //! Orientation conversions for proper display on Qt 5.4.1
+    static const Matrix kQt541_orientation;
+    static Matrix InitOrientationMatrix();
+
     //! The orientation to use: the file orientation with user transformations applied.
     int m_current;
     //! The orientation of the raw file image, as specified by the camera.
diff --git a/mythtv/libs/libmythmetadata/imagescanner.cpp b/mythtv/libs/libmythmetadata/imagescanner.cpp
index 7525224..f488c5f 100644
--- a/mythtv/libs/libmythmetadata/imagescanner.cpp
+++ b/mythtv/libs/libmythmetadata/imagescanner.cpp
@@ -474,7 +474,7 @@ void ImageScanThread<DBFS>::SyncFile(const QFileInfo &fileInfo, int devId,
                          im->m_comment, im->m_date, fileOrient);
 
         // Reset file orientation, retaining existing setting
-        int currentOrient = Orientation(dbIm->m_orientation).GetCurrent();
+        int currentOrient = Orientation(dbIm->m_orientation).GetCurrent(false);
         im->m_orientation = Orientation(currentOrient, fileOrient).Composite();
 
         // Remove it from removed list
diff --git a/mythtv/libs/libmythmetadata/imagethumbs.cpp b/mythtv/libs/libmythmetadata/imagethumbs.cpp
index ffda6fe..4f8b7e4 100644
--- a/mythtv/libs/libmythmetadata/imagethumbs.cpp
+++ b/mythtv/libs/libmythmetadata/imagethumbs.cpp
@@ -305,7 +305,9 @@ QString ThumbThread<DBFS>::CreateThumbnail(ImagePtrK im, int thumbPriority)
         return QString("Can't create thumbnail for type %1 (image %2)")
                 .arg(im->m_type).arg(imagePath);
 
-    int orientBy = Orientation(im->m_orientation).GetCurrent();
+    // Compensate for any Qt auto-orientation
+    int orientBy = Orientation(im->m_orientation)
+            .GetCurrent(im->m_type == kImageFile);
 
     // Orientate now to optimise load/display time - no orientation
     // is required when displaying thumbnails
diff --git a/mythtv/programs/mythfrontend/galleryslide.cpp b/mythtv/programs/mythfrontend/galleryslide.cpp
index b9ef101..3626450 100644
--- a/mythtv/programs/mythfrontend/galleryslide.cpp
+++ b/mythtv/programs/mythfrontend/galleryslide.cpp
@@ -421,9 +421,9 @@ bool Slide::LoadSlide(ImagePtrK im, int direction, bool notifyCompletion)
     }
     else
     {
-        // Load image and orientate
+        // Load image, compensating for any Qt auto-orientation
         SetFilename(im->m_url);
-        SetOrientation(Orientation(m_data->m_orientation).GetCurrent());
+        SetOrientation(Orientation(m_data->m_orientation).GetCurrent(true));
     }
 
     // Load in background
-- 
2.1.4

