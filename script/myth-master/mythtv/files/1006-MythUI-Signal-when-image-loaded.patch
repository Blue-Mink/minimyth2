From 346bdc4901d7a53bb4aeb818900a784f87496fe1 Mon Sep 17 00:00:00 2001
From: Roger Siddons <dizygotheca@ntlworld.com>
Date: Mon, 28 Sep 2015 19:20:00 +0100
Subject: [PATCH 06/10] MythUI: Signal when image loaded

Emit a signal when MythUIImage finishes loading an image in a background thread.

Required for Gallery slideshows, which won't display an image until it is loaded.

diff --git a/mythtv/libs/libmythui/mythuiimage.cpp b/mythtv/libs/libmythui/mythuiimage.cpp
index 28245d7..c7961a8 100644
--- a/mythtv/libs/libmythui/mythuiimage.cpp
+++ b/mythtv/libs/libmythui/mythuiimage.cpp
@@ -1036,6 +1036,8 @@ bool MythUIImage::Load(bool allowLoadInBackground, bool forceStat)
     if (isAnimation)
         Clear();
 
+    bool complete = true;
+
     QString imagelabel;
 
     int j = 0;
@@ -1161,8 +1163,14 @@ bool MythUIImage::Load(bool allowLoadInBackground, bool forceStat)
         }
 
         ++j;
+
+        // Load is complete if no image is loading in background
+        complete &= !do_background_load;
     }
 
+    if (complete)
+        emit LoadComplete();
+
     return true;
 }
 
@@ -1594,26 +1602,25 @@ void MythUIImage::customEvent(QEvent *event)
         if (le->GetParent() != this)
             return;
 
-        image  = le->GetImage();
-        number = le->GetNumber();
-        filename = le->GetFilename();
+        image           = le->GetImage();
+        number          = le->GetNumber();
+        filename        = le->GetFilename();
         animationFrames = le->GetAnimationFrames();
-        aborted = le->GetAbortState();
+        aborted         = le->GetAbortState();
 
         m_runningThreads--;
 
         d->m_UpdateLock.lockForRead();
+        QString propFilename = m_imageProperties.filename;
+        d->m_UpdateLock.unlock();
 
         // 1) We aborted loading the image for some reason (e.g. two requests
         //    for same image)
         // 2) Filename changed since we started this image, so abort to avoid
         // rendering two different images in quick succession which causes
         // unsightly flickering
-        if (aborted ||
-            (le->GetBasefile() != m_imageProperties.filename))
+        if (aborted || (le->GetBasefile() != propFilename))
         {
-            d->m_UpdateLock.unlock();
-
             if (aborted)
                 LOG(VB_GUI, LOG_DEBUG, QString("Aborted loading image %1")
                                                                 .arg(filename));
@@ -1635,22 +1642,14 @@ void MythUIImage::customEvent(QEvent *event)
 
                 delete animationFrames;
             }
-
-            return;
         }
-
-        d->m_UpdateLock.unlock();
-
-        if (animationFrames)
+        else if (animationFrames)
         {
             SetAnimationFrames(*animationFrames);
 
             delete animationFrames;
-
-            return;
         }
-
-        if (image)
+        else if (image)
         {
             // We don't clear until we have the new image ready to display to
             // avoid unsightly flashing. This isn't currently supported for
@@ -1687,12 +1686,14 @@ void MythUIImage::customEvent(QEvent *event)
             d->m_UpdateLock.lockForWrite();
             m_LastDisplay = QTime::currentTime();
             d->m_UpdateLock.unlock();
-
-            return;
+        }
+        else
+        {
+            // No Images were loaded, so trigger Reset to default
+            Reset();
         }
 
-        // No Images were loaded, so trigger Reset to default
-        Reset();
+        emit LoadComplete();
     }
 }
 
diff --git a/mythtv/libs/libmythui/mythuiimage.h b/mythtv/libs/libmythui/mythuiimage.h
index dbd7901..7847c4a 100644
--- a/mythtv/libs/libmythui/mythuiimage.h
+++ b/mythtv/libs/libmythui/mythuiimage.h
@@ -87,6 +87,8 @@ typedef QVector<AnimationFrame> AnimationFrames;
  */
 class MUI_PUBLIC MythUIImage : public MythUIType
 {
+    Q_OBJECT
+
   public:
     MythUIImage(const QString &filepattern, int low, int high, int delayms,
                 MythUIType *parent, const QString &name);
@@ -126,6 +128,9 @@ class MUI_PUBLIC MythUIImage : public MythUIType
 
     void SetOrientation(int orientation);
 
+  signals:
+    void LoadComplete();
+
   protected:
     virtual void DrawSelf(MythPainter *p, int xoffset, int yoffset,
                           int alphaMod, QRect clipRect);
-- 
2.1.4

