diff -Naur mythtv-old/mythtv/external/FFmpeg/libavcodec/v4l2_m2m_dec.c mythtv-new/mythtv/external/FFmpeg/libavcodec/v4l2_m2m_dec.c
--- mythtv-old/mythtv/external/FFmpeg/libavcodec/v4l2_m2m_dec.c	2020-05-12 02:05:36.686666667 +0200
+++ mythtv-new/mythtv/external/FFmpeg/libavcodec/v4l2_m2m_dec.c	2020-05-16 10:53:33.903333329 +0200
@@ -255,14 +255,40 @@
     return ff_v4l2_m2m_codec_end(priv);
 }
 
-static void v4l2_flush(AVCodecContext *avctx)
+static void v4l2_decode_flush(AVCodecContext *avctx)
 {
     V4L2m2mPriv *priv = avctx->priv_data;
     V4L2m2mContext* s = priv->context;
+    V4L2Context* output = &s->output;
+    V4L2Context* capture = &s->capture;
+    int ret, i;
+
+    ret = ff_v4l2_context_set_status(output, VIDIOC_STREAMOFF);
+    if (ret < 0)
+        av_log(avctx, AV_LOG_ERROR, "VIDIOC_STREAMOFF %s error: %d\n", output->name, ret);
+
+    ret = ff_v4l2_context_set_status(output, VIDIOC_STREAMON);
+    if (ret < 0)
+        av_log(avctx, AV_LOG_ERROR, "VIDIOC_STREAMON %s error: %d\n", output->name, ret);
+
+    av_log(avctx, AV_LOG_DEBUG, "output buffers\n");
+    for (i = 0; i < output->num_buffers; i) {
+        if (output->buffers[i].status == V4L2BUF_IN_DRIVER)
+            output->buffers[i].status = V4L2BUF_AVAILABLE;
+    }
+
+    struct v4l2_decoder_cmd cmd = {
+        .cmd = V4L2_DEC_CMD_START,
+        .flags = 0,
+    };
 
-    /* wait for pending buffer references */
-    if (atomic_load(&s->refcount))
-        while(sem_wait(&s->refsync) == -1 && errno == EINTR);
+    ret = ioctl(s->fd, VIDIOC_DECODER_CMD, &cmd);
+    if (ret < 0)
+        av_log(avctx, AV_LOG_ERROR, "VIDIOC_DECODER_CMD start error: %d\n", errno);
+
+    s->draining = 0;
+    output->done = 0;
+    capture->done = 0;
 }
 
 #define OFFSET(x) offsetof(V4L2m2mPriv, x)
@@ -298,7 +324,7 @@
         .init           = v4l2_decode_init, \
         .receive_frame  = v4l2_receive_frame, \
         .close          = v4l2_decode_close,\
-        .flush          = v4l2_flush, \
+        .flush          = v4l2_decode_flush, \
         .pix_fmts       = (const enum AVPixelFormat[]) { AV_PIX_FMT_DRM_PRIME, \
                                                          AV_PIX_FMT_NV12, \
                                                          AV_PIX_FMT_NONE}, \
