diff --speed-large-files --no-dereference --minimal -Naur mythtv-848bfbf55ea56ed6dc62d64f7f0dd676de3143f5/mythtv/external/FFmpeg/libavcodec/h264dec.h mythtv-848bfbf55ea56ed6dc62d64f7f0dd676de3143f5/mythtv/external/FFmpeg/libavcodec/h264dec.h
--- mythtv-848bfbf55ea56ed6dc62d64f7f0dd676de3143f5/mythtv/external/FFmpeg/libavcodec/h264dec.h	2022-01-29 14:36:09.336359596 +0100
+++ mythtv-848bfbf55ea56ed6dc62d64f7f0dd676de3143f5/mythtv/external/FFmpeg/libavcodec/h264dec.h	2022-01-25 22:21:54.865833832 +0100
@@ -329,6 +329,7 @@
     MMCO mmco[MAX_MMCO_COUNT];
     int  nb_mmco;
     int explicit_ref_marking;
+    int ref_pic_marking_bit_size;
 
     int frame_num;
     int poc_lsb;
@@ -337,6 +338,7 @@
     int curr_pic_num;
     int max_pic_num;
     int idr_pic_id;
+    int pic_order_cnt_bit_size;
 } H264SliceContext;
 
 /**
diff --speed-large-files --no-dereference --minimal -Naur mythtv-848bfbf55ea56ed6dc62d64f7f0dd676de3143f5/mythtv/external/FFmpeg/libavcodec/h264_slice.c mythtv-848bfbf55ea56ed6dc62d64f7f0dd676de3143f5/mythtv/external/FFmpeg/libavcodec/h264_slice.c
--- mythtv-848bfbf55ea56ed6dc62d64f7f0dd676de3143f5/mythtv/external/FFmpeg/libavcodec/h264_slice.c	2022-01-29 14:36:09.359692928 +0100
+++ mythtv-848bfbf55ea56ed6dc62d64f7f0dd676de3143f5/mythtv/external/FFmpeg/libavcodec/h264_slice.c	2022-01-29 13:59:14.539732888 +0100
@@ -1760,7 +1760,7 @@
     unsigned int slice_type, tmp, i;
     int field_pic_flag, bottom_field_flag;
     int first_slice = sl == h->slice_ctx && !h->current_slice;
-    int picture_structure;
+    int picture_structure, pos;
 
     if (first_slice)
         av_assert0(!h->setup_finished);
@@ -1844,8 +1844,7 @@
     if (nal->type == H264_NAL_IDR_SLICE)
         sl->idr_pic_id = get_ue_golomb_long(&sl->gb);
 
-    sl->poc_lsb = 0;
-    sl->delta_poc_bottom = 0;
+    pos = sl->gb.index;
     if (sps->poc_type == 0) {
         sl->poc_lsb = get_bits(&sl->gb, sps->log2_max_poc_lsb);
 
@@ -1853,13 +1852,13 @@
             sl->delta_poc_bottom = get_se_golomb(&sl->gb);
     }
 
-    sl->delta_poc[0] = sl->delta_poc[1] = 0;
     if (sps->poc_type == 1 && !sps->delta_pic_order_always_zero_flag) {
         sl->delta_poc[0] = get_se_golomb(&sl->gb);
 
         if (pps->pic_order_present == 1 && picture_structure == PICT_FRAME)
             sl->delta_poc[1] = get_se_golomb(&sl->gb);
     }
+    sl->pic_order_cnt_bit_size = sl->gb.index - pos;
 
     sl->redundant_pic_count = 0;
     if (pps->redundant_pic_cnt_present)
@@ -1899,9 +1898,11 @@
 
     sl->explicit_ref_marking = 0;
     if (nal->ref_idc) {
+        pos = sl->gb.index;
         ret = ff_h264_decode_ref_pic_marking(sl, &sl->gb, nal, h->avctx);
         if (ret < 0 && (h->avctx->err_recognition & AV_EF_EXPLODE))
             return AVERROR_INVALIDDATA;
+        sl->ref_pic_marking_bit_size = sl->gb.index - pos;
     }
 
     if (sl->slice_type_nos != AV_PICTURE_TYPE_I && pps->cabac) {
