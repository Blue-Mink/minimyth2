diff -Naur mythtv-master-20150105-g4216e00-old/mythtv/programs/mythcommflag/ClassicCommDetector.cpp mythtv-master-20150105-g4216e00-new/mythtv/programs/mythcommflag/ClassicCommDetector.cpp
--- mythtv-master-20150105-g4216e00-old/mythtv/programs/mythcommflag/ClassicCommDetector.cpp	2015-01-06 16:51:50.636907254 +0100
+++ mythtv-master-20150105-g4216e00-new/mythtv/programs/mythcommflag/ClassicCommDetector.cpp	2015-01-06 16:52:07.006819093 +0100
@@ -24,17 +24,21 @@
 #include "ClassicCommDetector.h"
 #include "ClassicLogoDetector.h"
 #include "ClassicSceneChangeDetector.h"
+#include "commercial_debug.h"
 
 enum frameAspects {
     COMM_ASPECT_NORMAL = 0,
     COMM_ASPECT_WIDE
 } FrameAspects;
 
+// letter-box and pillar-box are not mutually exclusive
+// So 3 is a valid value = (COMM_FORMAT_LETTERBOX | COMM_FORMAT_PILLARBOX)
+// And 4 = COMM_FORMAT_MAX is the number of valid values.
 enum frameFormats {
-    COMM_FORMAT_NORMAL = 0,
-    COMM_FORMAT_LETTERBOX,
-    COMM_FORMAT_PILLARBOX,
-    COMM_FORMAT_MAX
+    COMM_FORMAT_NORMAL    = 0,
+    COMM_FORMAT_LETTERBOX = 1,
+    COMM_FORMAT_PILLARBOX = 2,
+    COMM_FORMAT_MAX       = 4,
 } FrameFormats;
 
 static QString toStringFrameMaskValues(int mask, bool verbose)
@@ -87,16 +91,18 @@
     switch (format)
     {
         case COMM_FORMAT_NORMAL:
-            return (verbose) ? "normal" : "N";
+            return (verbose) ? "normal" : " N ";
         case COMM_FORMAT_LETTERBOX:
-            return (verbose) ? "letter" : "L";
+            return (verbose) ? "letter" : " L ";
         case COMM_FORMAT_PILLARBOX:
-            return (verbose) ? "pillar" : "P";
+            return (verbose) ? "pillar" : " P ";
+        case COMM_FORMAT_LETTERBOX | COMM_FORMAT_PILLARBOX:
+            return (verbose) ? "letter,pillar" : "L,P";
         case COMM_FORMAT_MAX:
-            return (verbose) ? " max  " : "M";
+            return (verbose) ? " max  " : " M ";
     }
 
-    return (verbose) ? " null " : "n";
+    return (verbose) ? "unknown" : " U ";
 }
 
 QString FrameInfoEntry::GetHeader(void)
@@ -139,7 +145,7 @@
     totalMinBrightness(0),                     detectBlankFrames(false),
     detectSceneChanges(false),                 detectStationLogo(false),
     logoInfoAvailable(false),                  logoDetector(0),
-    framePtr(0),                               frameIsBlank(false),
+    frameIsBlank(false),
     sceneHasChanged(false),                    stationLogoPresent(false),
     lastFrameWasBlank(false),                  lastFrameWasSceneChange(false),
     decoderFoundAspectChanges(false),          sceneChangeDetector(0),
@@ -152,8 +158,6 @@
     fps(0.0),                                  framesProcessed(0),
     preRoll(0),                                postRoll(0)
 {
-    commDetectBorder =
-        gCoreContext->GetNumSetting("CommDetectBorder", 20);
     commDetectBlankFrameMaxDiff =
         gCoreContext->GetNumSetting("CommDetectBlankFrameMaxDiff", 25);
     commDetectDarkBrightness =
@@ -189,6 +193,16 @@
     postRoll = (long long)(
         max(int64_t(0), int64_t(stopsAt.secsTo(recordingStopsAt))) * fps);
 
+    // CommDetectBorder's default value of 20 predates the change to use
+    // ffmpeg's lowres decoding capability by 5 years.
+    // I believe it should be adjusted based on the height of the lowres video
+    // CommDetectBorder * height / 720 seems to produce reasonable results.
+    // source height =  480 gives border = 20 *  480 / 4 / 720 = 2
+    // source height =  720 gives border = 20 *  720 / 4 / 720 = 5
+    // source height = 1080 gives border = 20 * 1080 / 4 / 720 = 7
+    commDetectBorder =
+        gCoreContext->GetNumSetting("CommDetectBorder", 20) * height / 720;
+
 #ifdef SHOW_DEBUG_WIN
     comm_debug_init(width, height);
 #endif
@@ -265,8 +279,6 @@
     frameIsBlank = false;
     stationLogoPresent = false;
 
-    framePtr = NULL;
-
     logoInfoAvailable = false;
 
     ClearAllMaps();
@@ -318,8 +330,19 @@
 
     if (commDetectMethod & COMM_DETECT_LOGO)
     {
+        // Use a different border for logo detection.
+        // If we try to detect logos in letterboxed areas,
+        // chances are we won't detect the logo.
+        // Generally speaking, SD video is likely to be letter boxed
+        // and HD video is not likely to be letter boxed.
+        // To detect logos, try to exclude letterboxed area from SD video
+        // but exclude too much from HD video and you'll miss the logo.
+        // Using the same border for both with no scaling seems to be
+        // a good compromise.
+        int logoDetectBorder =
+            gCoreContext->GetNumSetting("CommDetectLogoBorder", 16);
         logoDetector = new ClassicLogoDetector(this, width, height,
-            commDetectBorder, horizSpacing, vertSpacing);
+            logoDetectBorder, horizSpacing, vertSpacing);
 
         requiredHeadStart += max(
             int64_t(0), int64_t(recordingStartedAt.secsTo(startedAt)));
@@ -780,7 +803,8 @@
     }
 
     curFrameNumber = frame_number;
-    framePtr = frame->buf;
+    unsigned char* framePtr = frame->buf;
+    int bytesPerLine = frame->pitches[0];
 
     fInfo.minBrightness = -1;
     fInfo.maxBrightness = -1;
@@ -817,7 +841,7 @@
 
     if (commDetectMethod & COMM_DETECT_SCENE)
     {
-        sceneChangeDetector->processFrame(framePtr);
+        sceneChangeDetector->processFrame(frame);
     }
 
     stationLogoPresent = false;
@@ -828,7 +852,7 @@
         for(int x = commDetectBorder; x < (width - commDetectBorder);
                 x += horizSpacing)
         {
-            pixel = framePtr[y * width + x];
+            pixel = framePtr[y * bytesPerLine + x];
 
             if (commDetectMethod & COMM_DETECT_BLANKS)
             {
@@ -898,23 +922,20 @@
         delete[] colMax;
         colMax = 0;
 
+        frameInfo[curFrameNumber].format = COMM_FORMAT_NORMAL;
         if ((topDarkRow > commDetectBorder) &&
             (topDarkRow < (height * .20)) &&
             (bottomDarkRow < (height - commDetectBorder)) &&
             (bottomDarkRow > (height * .80)))
         {
-            frameInfo[curFrameNumber].format = COMM_FORMAT_LETTERBOX;
+            frameInfo[curFrameNumber].format |= COMM_FORMAT_LETTERBOX;
         }
-        else if ((leftDarkCol > commDetectBorder) &&
+        if ((leftDarkCol > commDetectBorder) &&
                  (leftDarkCol < (width * .20)) &&
                  (rightDarkCol < (width - commDetectBorder)) &&
                  (rightDarkCol > (width * .80)))
         {
-            frameInfo[curFrameNumber].format = COMM_FORMAT_PILLARBOX;
-        }
-        else
-        {
-            frameInfo[curFrameNumber].format = COMM_FORMAT_NORMAL;
+            frameInfo[curFrameNumber].format |= COMM_FORMAT_PILLARBOX;
         }
 
         avg = totBrightness / blankPixelsChecked;
@@ -947,7 +968,7 @@
     if ((logoInfoAvailable) && (commDetectMethod & COMM_DETECT_LOGO))
     {
         stationLogoPresent =
-            logoDetector->doesThisFrameContainTheFoundLogo(framePtr);
+            logoDetector->doesThisFrameContainTheFoundLogo(frame);
     }
 
 #if 0
@@ -989,7 +1010,7 @@
                 frameInfo[curFrameNumber].flagMask ));
 
 #ifdef SHOW_DEBUG_WIN
-    comm_debug_show(frame->buf);
+    comm_debug_show(frame);
     getchar();
 #endif
 
@@ -1365,7 +1386,7 @@
             }
 
             if ((fbp->length > 4) &&
-                (fbp->logoCount > (fbp->frames * 0.60)) &&
+                (!logoInfoAvailable || fbp->logoCount > (fbp->frames * 0.60)) &&
                 (fbp->bfCount < (fbp->frames * 0.10)))
             {
                 if (verboseDebugging)
diff -Naur mythtv-master-20150105-g4216e00-old/mythtv/programs/mythcommflag/ClassicCommDetector.h mythtv-master-20150105-g4216e00-new/mythtv/programs/mythcommflag/ClassicCommDetector.h
--- mythtv-master-20150105-g4216e00-old/mythtv/programs/mythcommflag/ClassicCommDetector.h	2015-01-06 16:51:50.630240623 +0100
+++ mythtv-master-20150105-g4216e00-new/mythtv/programs/mythcommflag/ClassicCommDetector.h	2015-01-06 16:52:07.006819093 +0100
@@ -153,8 +153,6 @@
         bool logoInfoAvailable;
         LogoDetectorBase* logoDetector;
 
-        unsigned char *framePtr;
-
         frm_dir_map_t blankFrameMap;
         frm_dir_map_t blankCommMap;
         frm_dir_map_t blankCommBreakMap;
diff -Naur mythtv-master-20150105-g4216e00-old/mythtv/programs/mythcommflag/ClassicLogoDetector.cpp mythtv-master-20150105-g4216e00-new/mythtv/programs/mythcommflag/ClassicLogoDetector.cpp
--- mythtv-master-20150105-g4216e00-old/mythtv/programs/mythcommflag/ClassicLogoDetector.cpp	2015-01-06 16:51:50.623573993 +0100
+++ mythtv-master-20150105-g4216e00-new/mythtv/programs/mythcommflag/ClassicLogoDetector.cpp	2015-01-06 16:52:07.006819093 +0100
@@ -7,10 +7,12 @@
 // MythTV headers
 #include "mythcorecontext.h"
 #include "mythplayer.h"
+#include "libavutil/frame.h"
 
 // Commercial Flagging headers
 #include "ClassicLogoDetector.h"
 #include "ClassicCommDetector.h"
+#include "commercial_debug.h"
 
 typedef struct edgemaskentry
 {
@@ -99,12 +101,22 @@
 
     edgeCounts = new EdgeMaskEntry[width * height];
 
+    // Back in 2005, a threshold of 50 minimum pixelsInMask was established.
+    // I don't know whether that was tested against SD or HD resolutions.
+    // I do know that in 2010, mythcommflag was changed to use ffmpeg's
+    // lowres support, effectively dividing the video area by 16.
+    // But the 50 pixel minimum was not adjusted accordingly.
+    // I believe the minimum threshold should vary with the video's area.
+    // I am using 1280x720 (for 720p) video as the baseline.
+    // This should improve logo detection for SD video.
+    int minPixelsInMask = 50 * (width*height) / (1280*720 / 16);
+
     for (i = 0; edgeDiffs[i] != 0 && !logoInfoAvailable; i++)
     {
         int pixelsInMask = 0;
 
-        LOG(VB_COMMFLAG, LOG_INFO, QString("Trying with edgeDiff == %1")
-                .arg(edgeDiffs[i]));
+        LOG(VB_COMMFLAG, LOG_INFO, QString("Trying with edgeDiff == %1, minPixelsInMask=%2")
+                .arg(edgeDiffs[i]).arg(minPixelsInMask));
 
         memset(edgeCounts, 0, sizeof(EdgeMaskEntry) * width * height);
         memset(edgeMask, 0, sizeof(EdgeMaskEntry) * width * height);
@@ -236,16 +248,17 @@
 #endif
         if (((logoMaxX - logoMinX) < (width / 4)) &&
             ((logoMaxY - logoMinY) < (height / 4)) &&
-            (pixelsInMask > 50))
+            (pixelsInMask > minPixelsInMask))
         {
             logoInfoAvailable = true;
             logoEdgeDiff = edgeDiffs[i];
 
             LOG(VB_COMMFLAG, LOG_INFO, 
                 QString("Using Logo area: topleft (%1,%2), "
-                        "bottomright (%3,%4)")
+                        "bottomright (%3,%4), pixelsInMask (%5).")
                     .arg(logoMinX).arg(logoMinY)
-                    .arg(logoMaxX).arg(logoMaxY));
+                    .arg(logoMaxX).arg(logoMaxY)
+                    .arg(pixelsInMask));
         }
         else
         {
@@ -262,7 +275,7 @@
     delete [] edgeCounts;
 
     if (!logoInfoAvailable)
-        LOG(VB_COMMFLAG, LOG_NOTICE, "No suitable logo area found.");
+        LOG(VB_GENERAL, LOG_NOTICE, "No suitable logo area found.");
 
     player->DiscardVideoFrame(player->GetRawVideoFrame(0));
     return logoInfoAvailable;
@@ -380,11 +393,12 @@
     }
 
 #ifdef SHOW_DEBUG_WIN
-    DumpLogo(true,framePtr);
+    DumpLogo(false, NULL);
 #endif
 
     logoFrameCount = 0;
     logoInfoAvailable = true;
+
 }
 
 
@@ -441,28 +455,33 @@
  * which are partially mods based on Myth's original commercial skip
  * code written by Chris Pinkham. */
 bool ClassicLogoDetector::doesThisFrameContainTheFoundLogo(
-    unsigned char* framePtr)
+    VideoFrame* frame)
 {
     int radius = 2;
     unsigned int x, y;
     int pos1, pos2, pos3;
+    int edgePos;
     int pixel;
     int goodEdges = 0;
     int badEdges = 0;
     int testEdges = 0;
     int testNotEdges = 0;
 
+    unsigned char* framePtr = frame->buf;
+    int bytesPerLine = frame->pitches[0];
+
     for (y = logoMinY; y <= logoMaxY; y++ )
     {
         for (x = logoMinX; x <= logoMaxX; x++ )
         {
-            pos1 = y * width + x;
-            pos2 = (y - radius) * width + x;
-            pos3 = (y + radius) * width + x;
+            pos1 = y * bytesPerLine + x;
+            edgePos = y * width + x;
+            pos2 = (y - radius) * bytesPerLine + x;
+            pos3 = (y + radius) * bytesPerLine + x;
 
             pixel = framePtr[pos1];
 
-            if (edgeMask[pos1].horiz)
+            if (edgeMask[edgePos].horiz)
             {
                 if ((abs(framePtr[pos1 - radius] - pixel) >= logoEdgeDiff) ||
                     (abs(framePtr[pos1 + radius] - pixel) >= logoEdgeDiff))
@@ -477,7 +496,7 @@
                 testNotEdges++;
             }
 
-            if (edgeMask[pos1].vert)
+            if (edgeMask[edgePos].vert)
             {
                 if ((abs(framePtr[pos2] - pixel) >= logoEdgeDiff) ||
                     (abs(framePtr[pos3] - pixel) >= logoEdgeDiff))
@@ -520,6 +539,7 @@
 {
     int r = 2;
     unsigned char *buf = frame->buf;
+    int bytesPerLine = frame->pitches[0];
     unsigned char p;
     unsigned int pos, x, y;
 
@@ -536,30 +556,30 @@
                 continue;
 
             pos = y * width + x;
-            p = buf[pos];
+            p = buf[y * bytesPerLine + x];
 
-            if (( abs(buf[y * width + (x - r)] - p) >= edgeDiff) ||
-                ( abs(buf[y * width + (x + r)] - p) >= edgeDiff))
+            if (( abs(buf[y * bytesPerLine + (x - r)] - p) >= edgeDiff) ||
+                ( abs(buf[y * bytesPerLine + (x + r)] - p) >= edgeDiff))
             {
                 edges[pos].horiz++;
                 edgeCount++;
             }
-            if (( abs(buf[(y - r) * width + x] - p) >= edgeDiff) ||
-                ( abs(buf[(y + r) * width + x] - p) >= edgeDiff))
+            if (( abs(buf[(y - r) * bytesPerLine + x] - p) >= edgeDiff) ||
+                ( abs(buf[(y + r) * bytesPerLine + x] - p) >= edgeDiff))
             {
                 edges[pos].vert++;
                 edgeCount++;
             }
 
-            if (( abs(buf[(y - r) * width + (x - r)] - p) >= edgeDiff) ||
-                ( abs(buf[(y + r) * width + (x + r)] - p) >= edgeDiff))
+            if (( abs(buf[(y - r) * bytesPerLine + (x - r)] - p) >= edgeDiff) ||
+                ( abs(buf[(y + r) * bytesPerLine + (x + r)] - p) >= edgeDiff))
             {
                 edges[pos].ldiag++;
                 edgeCount++;
             }
 
-            if (( abs(buf[(y - r) * width + (x + r)] - p) >= edgeDiff) ||
-                ( abs(buf[(y + r) * width + (x - r)] - p) >= edgeDiff))
+            if (( abs(buf[(y - r) * bytesPerLine + (x + r)] - p) >= edgeDiff) ||
+                ( abs(buf[(y + r) * bytesPerLine + (x - r)] - p) >= edgeDiff))
             {
                 edges[pos].rdiag++;
                 edgeCount++;
diff -Naur mythtv-master-20150105-g4216e00-old/mythtv/programs/mythcommflag/ClassicLogoDetector.h mythtv-master-20150105-g4216e00-new/mythtv/programs/mythcommflag/ClassicLogoDetector.h
--- mythtv-master-20150105-g4216e00-old/mythtv/programs/mythcommflag/ClassicLogoDetector.h	2015-01-06 16:51:50.630240623 +0100
+++ mythtv-master-20150105-g4216e00-new/mythtv/programs/mythcommflag/ClassicLogoDetector.h	2015-01-06 16:52:07.006819093 +0100
@@ -16,7 +16,7 @@
     virtual void deleteLater(void);
 
     bool searchForLogo(MythPlayer* player);
-    bool doesThisFrameContainTheFoundLogo(unsigned char* frame);
+    bool doesThisFrameContainTheFoundLogo(VideoFrame* frame);
     bool pixelInsideLogo(unsigned int x, unsigned int y);
 
     unsigned int getRequiredAvailableBufferForSearch();
diff -Naur mythtv-master-20150105-g4216e00-old/mythtv/programs/mythcommflag/ClassicSceneChangeDetector.cpp mythtv-master-20150105-g4216e00-new/mythtv/programs/mythcommflag/ClassicSceneChangeDetector.cpp
--- mythtv-master-20150105-g4216e00-old/mythtv/programs/mythcommflag/ClassicSceneChangeDetector.cpp	2015-01-06 16:51:50.623573993 +0100
+++ mythtv-master-20150105-g4216e00-new/mythtv/programs/mythcommflag/ClassicSceneChangeDetector.cpp	2015-01-06 16:52:07.010152408 +0100
@@ -25,7 +25,7 @@
     SceneChangeDetectorBase::deleteLater();
 }
 
-void ClassicSceneChangeDetector::processFrame(unsigned char* frame)
+void ClassicSceneChangeDetector::processFrame(VideoFrame* frame)
 {
     histogram->generateFromImage(frame, width, height, commdetectborder,
                                  width-commdetectborder, commdetectborder,
diff -Naur mythtv-master-20150105-g4216e00-old/mythtv/programs/mythcommflag/ClassicSceneChangeDetector.h mythtv-master-20150105-g4216e00-new/mythtv/programs/mythcommflag/ClassicSceneChangeDetector.h
--- mythtv-master-20150105-g4216e00-old/mythtv/programs/mythcommflag/ClassicSceneChangeDetector.h	2015-01-06 16:51:50.630240623 +0100
+++ mythtv-master-20150105-g4216e00-new/mythtv/programs/mythcommflag/ClassicSceneChangeDetector.h	2015-01-06 16:52:07.010152408 +0100
@@ -13,7 +13,7 @@
         unsigned int yspacing);
     virtual void deleteLater(void);
 
-    void processFrame(unsigned char* frame);
+    void processFrame(VideoFrame* frame);
 
   private:
     ~ClassicSceneChangeDetector() {}
diff -Naur mythtv-master-20150105-g4216e00-old/mythtv/programs/mythcommflag/Histogram.cpp mythtv-master-20150105-g4216e00-new/mythtv/programs/mythcommflag/Histogram.cpp
--- mythtv-master-20150105-g4216e00-old/mythtv/programs/mythcommflag/Histogram.cpp	2015-01-06 16:51:50.630240623 +0100
+++ mythtv-master-20150105-g4216e00-new/mythtv/programs/mythcommflag/Histogram.cpp	2015-01-06 16:52:07.010152408 +0100
@@ -3,6 +3,9 @@
 #include <cmath>
 #include <cstring>
 
+#include "mythframe.h"
+#include "libavutil/frame.h"
+
 Histogram::Histogram()
 {
     memset(data,0,sizeof(data));
@@ -15,7 +18,7 @@
 {
 }
 
-void Histogram::generateFromImage(unsigned char* frame, unsigned int frameWidth,
+void Histogram::generateFromImage(VideoFrame* frame, unsigned int frameWidth,
          unsigned int frameHeight, unsigned int minScanX, unsigned int maxScanX,
          unsigned int minScanY, unsigned int maxScanY, unsigned int XSpacing,
          unsigned int YSpacing)
@@ -29,10 +32,12 @@
     if (maxScanY > frameHeight-1)
         maxScanY = frameHeight-1;
 
+    unsigned char* framePtr = frame->buf;
+    int bytesPerLine = frame->pitches[0];
     for(unsigned int y = minScanY; y < maxScanY; y += YSpacing)
         for(unsigned int x = minScanX; x < maxScanX; x += XSpacing)
         {
-            data[frame[y * frameWidth + x]]++;
+            data[framePtr[y * bytesPerLine + x]]++;
             numberOfSamples++;
         }
 }
diff -Naur mythtv-master-20150105-g4216e00-old/mythtv/programs/mythcommflag/Histogram.h mythtv-master-20150105-g4216e00-new/mythtv/programs/mythcommflag/Histogram.h
--- mythtv-master-20150105-g4216e00-old/mythtv/programs/mythcommflag/Histogram.h	2015-01-06 16:51:50.630240623 +0100
+++ mythtv-master-20150105-g4216e00-new/mythtv/programs/mythcommflag/Histogram.h	2015-01-06 16:52:07.016819039 +0100
@@ -1,13 +1,15 @@
 #ifndef _HISTOGRAM_H_
 #define _HISTOGRAM_H_
 
+typedef struct VideoFrame_ VideoFrame;
+
 class Histogram
 {
 public:
     Histogram();
     ~Histogram();
 
-    void generateFromImage(unsigned char* frame, unsigned int frameWidth,
+    void generateFromImage(VideoFrame* frame, unsigned int frameWidth,
              unsigned int frameHeight, unsigned int minScanX,
              unsigned int maxScanX, unsigned int minScanY,
              unsigned int maxScanY, unsigned int XSpacing,
diff -Naur mythtv-master-20150105-g4216e00-old/mythtv/programs/mythcommflag/LogoDetectorBase.h mythtv-master-20150105-g4216e00-new/mythtv/programs/mythcommflag/LogoDetectorBase.h
--- mythtv-master-20150105-g4216e00-old/mythtv/programs/mythcommflag/LogoDetectorBase.h	2015-01-06 16:51:50.630240623 +0100
+++ mythtv-master-20150105-g4216e00-new/mythtv/programs/mythcommflag/LogoDetectorBase.h	2015-01-06 16:52:07.016819039 +0100
@@ -4,6 +4,7 @@
 #include <QObject>
 
 class MythPlayer;
+typedef struct VideoFrame_ VideoFrame;
 
 class LogoDetectorBase : public QObject
 {
@@ -14,7 +15,7 @@
         foundLogo(false), width(w),height(h) {};
 
     virtual bool searchForLogo(MythPlayer* player) = 0;
-    virtual bool doesThisFrameContainTheFoundLogo(unsigned char* frame) = 0;
+    virtual bool doesThisFrameContainTheFoundLogo(VideoFrame* frame) = 0;
     virtual bool pixelInsideLogo(unsigned int x, unsigned int y) = 0;
     virtual unsigned int getRequiredAvailableBufferForSearch() = 0;
 
diff -Naur mythtv-master-20150105-g4216e00-old/mythtv/programs/mythcommflag/SceneChangeDetectorBase.h mythtv-master-20150105-g4216e00-new/mythtv/programs/mythcommflag/SceneChangeDetectorBase.h
--- mythtv-master-20150105-g4216e00-old/mythtv/programs/mythcommflag/SceneChangeDetectorBase.h	2015-01-06 16:51:50.630240623 +0100
+++ mythtv-master-20150105-g4216e00-new/mythtv/programs/mythcommflag/SceneChangeDetectorBase.h	2015-01-06 16:52:07.016819039 +0100
@@ -3,6 +3,8 @@
 
 #include <QObject>
 
+typedef struct VideoFrame_ VideoFrame;
+
 class SceneChangeDetectorBase : public QObject
 {
     Q_OBJECT
@@ -11,7 +13,7 @@
     SceneChangeDetectorBase(unsigned int w, unsigned int h) :
         width(w), height(h) {}
 
-    virtual void processFrame(unsigned char *frame) = 0;
+    virtual void processFrame(VideoFrame* frame) = 0;
 
   signals:
     void haveNewInformation(unsigned int framenum, bool scenechange,
diff -Naur mythtv-master-20150105-g4216e00-old/mythtv/programs/mythcommflag/commercial_debug.cpp mythtv-master-20150105-g4216e00-new/mythtv/programs/mythcommflag/commercial_debug.cpp
--- mythtv-master-20150105-g4216e00-old/mythtv/programs/mythcommflag/commercial_debug.cpp	1970-01-01 01:00:00.000000000 +0100
+++ mythtv-master-20150105-g4216e00-new/mythtv/programs/mythcommflag/commercial_debug.cpp	2015-01-06 16:52:07.016819039 +0100
@@ -0,0 +1,146 @@
+//*****************************************************************************
+// This code is meant for use in debugging the CommDetect class and shouldn't
+// be used in normal compiled Myth versions.
+
+#include "commercial_debug.h"
+
+#ifdef SHOW_DEBUG_WIN
+
+#include <X11/Xlib.h>
+//#include <X11/extensions/Xvlib.h>
+
+extern "C" {
+#include "libavcodec/avcodec.h"
+#include "libswscale/swscale.h"
+}
+
+// INPUT_PIX_FMT is used when we convert an input YUV420 frame to a RGB ZPixmap
+// Since the commercial detection algorithms only look at the Y luma channel,
+// it can be useful to display only that channel.
+// But there may be times when you want to see the color images.
+// If you want to display color images, use AV_PIX_FMT_YUV420P
+// If you want display grayscale images, use AV_PIX_FMT_GRAY8
+// #define INPUT_PIX_FMT   AV_PIX_FMT_YUV420P
+#define INPUT_PIX_FMT   AV_PIX_FMT_GRAY8
+
+Window comm_win;
+GC comm_gc;
+Display *comm_display;
+int comm_width = 0;
+int comm_width8 = 0;
+int comm_height = 0;
+int comm_depth = 24;
+XImage *comm_image = NULL;
+char *comm_buf = NULL;
+struct SwsContext *scontext;
+
+void comm_debug_init( int width, int height )
+{
+    comm_display = XOpenDisplay(NULL);
+
+    Screen* comm_screen = DefaultScreenOfDisplay(comm_display);
+    int comm_screen_num = DefaultScreen(comm_display);
+
+    comm_depth = DefaultDepthOfScreen(comm_screen);
+
+    comm_width = width;
+    // FFmpeg likes linesizes that are multiples of 8.
+    comm_width8 = (width + 7) & ~7;
+    comm_height = height;
+
+    comm_win = XCreateSimpleWindow(comm_display,
+                                   DefaultRootWindow(comm_display),
+                                   100, 100, comm_width, comm_height, 0,
+                                   XWhitePixel(comm_display, comm_screen_num),
+                                   XBlackPixel(comm_display, comm_screen_num) );
+
+    XMapRaised(comm_display, comm_win);
+
+    XSync(comm_display, 0);
+
+    comm_gc = XCreateGC(comm_display, comm_win, 0, 0);
+
+    comm_buf = new char[4 * comm_width8 * comm_height];
+    memset(comm_buf, 0, 4 * comm_width8 * comm_height);
+
+    comm_image = XCreateImage(comm_display, DefaultVisual(comm_display, 0),
+                              comm_depth, ZPixmap, 0, comm_buf,
+                              comm_width8, comm_height, 8, 0);
+
+    XSync(comm_display, 0);
+
+    printf( "Commercial Detection debug window created at %dx%dx%d\n",
+        comm_width, comm_height, comm_depth );
+}
+
+static void comm_debug_show( AVPicture* pic);
+
+void comm_debug_show( unsigned char *frame )
+{
+    AVPicture image_in;
+
+    avpicture_fill(&image_in, (uint8_t *)frame, AV_PIX_FMT_YUV420P,
+                   comm_width, comm_height);
+
+    comm_debug_show(&image_in);
+}
+
+void comm_debug_show( VideoFrame *frame )
+{
+    AVPicture image_in;
+
+    for (int i = 0; i < 3; i++)
+    {
+        image_in.data[i] = frame->buf + frame->offsets[i];
+        image_in.linesize[i] = frame->pitches[i];
+    }
+
+    comm_debug_show(&image_in);
+}
+
+void comm_debug_show(AVPicture* pic)
+{
+    AVPicture image_out;
+    AVPixelFormat av_format;
+
+    switch (comm_depth)
+    {
+        case 16: av_format = AV_PIX_FMT_RGB565; break;
+        case 24: av_format = AV_PIX_FMT_RGB32;  break;
+        case 32: av_format = AV_PIX_FMT_RGB32; break;
+        default:
+            printf("Unable to display debug video window in %d depth.\n",
+                   comm_depth);
+            exit(1);
+    }
+
+    avpicture_fill(&image_out, (uint8_t *)comm_image->data, av_format,
+                   comm_width8, comm_height);
+
+    scontext = sws_getCachedContext(scontext, comm_width, comm_height,
+        INPUT_PIX_FMT, comm_width, comm_height, av_format,
+        SWS_FAST_BILINEAR, NULL, NULL, NULL);
+    if (!scontext)
+    {
+        printf("Cannot initialize the image conversion context");
+        exit(1);
+    }
+
+    sws_scale(scontext, pic->data, pic->linesize, 0, comm_height,
+              image_out.data, image_out.linesize);
+
+    XPutImage(comm_display, comm_win, comm_gc, comm_image,
+                0, 0, 0, 0, comm_width, comm_height );
+
+    XSync(comm_display, 0);
+}
+
+void comm_debug_destroy()
+{
+    XFree(comm_image);
+    delete comm_buf;
+    XDestroyWindow(comm_display, comm_win);
+    XCloseDisplay(comm_display);
+}
+
+#endif
diff -Naur mythtv-master-20150105-g4216e00-old/mythtv/programs/mythcommflag/commercial_debug.h mythtv-master-20150105-g4216e00-new/mythtv/programs/mythcommflag/commercial_debug.h
--- mythtv-master-20150105-g4216e00-old/mythtv/programs/mythcommflag/commercial_debug.h	1970-01-01 01:00:00.000000000 +0100
+++ mythtv-master-20150105-g4216e00-new/mythtv/programs/mythcommflag/commercial_debug.h	2015-01-06 16:52:07.016819039 +0100
@@ -0,0 +1,17 @@
+//*****************************************************************************
+// This code is meant for use in debugging the CommDetect class and shouldn't
+// be used in normal compiled Myth versions.
+
+// #define SHOW_DEBUG_WIN
+
+#ifdef SHOW_DEBUG_WIN
+
+#include "libavutil/frame.h"
+
+extern void comm_debug_init( int width, int height );
+extern void comm_debug_show( unsigned char *frame );
+extern void comm_debug_show( VideoFrame *frame );
+extern void comm_debug_destroy();
+
+#endif
+
diff -Naur mythtv-master-20150105-g4216e00-old/mythtv/programs/mythcommflag/mythcommflag.pro mythtv-master-20150105-g4216e00-new/mythtv/programs/mythcommflag/mythcommflag.pro
--- mythtv-master-20150105-g4216e00-old/mythtv/programs/mythcommflag/mythcommflag.pro	2015-01-06 16:51:50.630240623 +0100
+++ mythtv-master-20150105-g4216e00-new/mythtv/programs/mythcommflag/mythcommflag.pro	2015-01-06 16:52:07.016819039 +0100
@@ -34,6 +34,7 @@
 HEADERS += LogoDetectorBase.h SceneChangeDetectorBase.h
 HEADERS += SlotRelayer.h CustomEventRelayer.h
 HEADERS += commandlineparser.h
+HEADERS += commercial_debug.h
 
 SOURCES += CommDetectorFactory.cpp CommDetectorBase.cpp
 SOURCES += ClassicLogoDetector.cpp
@@ -51,6 +52,7 @@
 SOURCES += BlankFrameDetector.cpp
 SOURCES += SceneChangeDetector.cpp
 SOURCES += PrePostRollFlagger.cpp
+SOURCES += commercial_debug.cpp
 
 SOURCES += main.cpp commandlineparser.cpp
 
