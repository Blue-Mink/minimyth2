diff -Naur mythtv-master-20180502-gf1054a3-old/mythtv/programs/mythfrontend/playbackbox.cpp mythtv-master-20180502-gf1054a3-new/mythtv/programs/mythfrontend/playbackbox.cpp
--- mythtv-master-20180502-gf1054a3-old/mythtv/programs/mythfrontend/playbackbox.cpp	2018-05-03 10:35:25.000000000 +0200
+++ mythtv-master-20180502-gf1054a3-new/mythtv/programs/mythfrontend/playbackbox.cpp	2018-05-03 10:38:51.126666670 +0200
@@ -1332,7 +1332,7 @@
  */
 void PlaybackBox::UpdateUIRecGroupList(void)
 {
-    if (m_recGroupIdx < 0 || !m_recgroupList || m_recGroups.size() < 2)
+    if (!m_recgroupList)
         return;
 
     // After qt 5.3. we can use QSignalBlocker blocker(m_recgroupList);
@@ -1340,6 +1340,28 @@
 
     m_recgroupList->Reset();
 
+    if (!m_reTitle.isEmpty())
+        new MythUIButtonListItem( m_recgroupList, tr("Title: %1")
+            .arg(m_reTitle.pattern()) );
+
+    if (!m_reSubtitle.isEmpty())
+        new MythUIButtonListItem( m_recgroupList, tr("Subtitle: %1")
+            .arg(m_reSubtitle.pattern()) );
+
+    if (!m_reDescription.isEmpty())
+        new MythUIButtonListItem( m_recgroupList, tr("Description: %1")
+            .arg(m_reDescription.pattern()) );
+
+    if (!m_recgroupList->IsEmpty())
+    {
+        m_recGroups.clear();
+        m_recGroupIdx = -1;
+        return;
+    }
+
+    if (m_recGroupIdx < 0 || m_recGroups.size() < 2)
+        return;
+
     int idx = 0;
     QStringList::iterator it = m_recGroups.begin();
     for (; it != m_recGroups.end(); (++it), (++idx))
@@ -1735,6 +1757,16 @@
             else if (!isAllProgsGroup && pRecgroup != m_recGroup)
                 continue;
 
+            if (!m_reTitle.isEmpty() && m_reTitle.isValid() &&
+                    m_reTitle.indexIn(p->GetTitle()) < 0)
+                continue;
+            if (!m_reSubtitle.isEmpty() && m_reSubtitle.isValid() &&
+                    m_reSubtitle.indexIn(p->GetSubtitle()) < 0)
+                continue;
+            if (!m_reDescription.isEmpty() && m_reDescription.isValid() &&
+                    m_reDescription.indexIn(p->GetDescription()) < 0)
+                continue;
+
             if (p->GetTitle().isEmpty())
                 p->SetTitle(tr("_NO_TITLE_"));
 
@@ -2254,6 +2286,15 @@
         m_popupMenu->AddItem(tr("Change Group Password"),
                              SLOT(showRecGroupPasswordChanger()));
 
+    m_popupMenu->AddItem(tr("Change Title Filter"),
+                         SLOT(showTitleFilter()));
+
+    m_popupMenu->AddItem(tr("Change Subtitle Filter"),
+                         SLOT(showSubtitleFilter()));
+
+    m_popupMenu->AddItem(tr("Change Description Filter"),
+                         SLOT(showDescriptionFilter()));
+
     if (!m_playList.isEmpty())
     {
         m_popupMenu->AddItem(tr("Playlist Options"), NULL, createPlaylistMenu());
@@ -4485,6 +4526,80 @@
         gCoreContext->SaveSetting("DisplayRecGroupIsCategory", 1);
 }
 
+void PlaybackBox::showTitleFilter()
+{
+    MythTextInputDialog *dlg = new MythTextInputDialog( m_popupStack,
+        tr("Title wildcard filter"), FilterNone, false, m_reTitle.pattern());
+    if (dlg->Create())
+    {
+        connect(dlg, SIGNAL(haveResult(QString)),
+            SLOT(setTitleFilter(QString)));
+        m_popupStack->AddScreen(dlg);
+    }
+    else
+        delete dlg;
+}
+
+void PlaybackBox::setTitleFilter(QString s)
+{
+    QRegExp re(s, Qt::CaseInsensitive, QRegExp::WildcardUnix);
+    if (!re.isValid())
+        return;
+
+    m_reTitle = re;
+    UpdateUILists();
+}
+
+void PlaybackBox::showSubtitleFilter()
+{
+    MythTextInputDialog *dlg = new MythTextInputDialog( m_popupStack,
+        tr("Subtitle wildcard filter"), FilterNone, false,
+        m_reSubtitle.pattern());
+    if (dlg->Create())
+    {
+        connect(dlg, SIGNAL(haveResult(QString)),
+            SLOT(setSubtitleFilter(QString)));
+        m_popupStack->AddScreen(dlg);
+    }
+    else
+        delete dlg;
+}
+
+void PlaybackBox::setSubtitleFilter(QString s)
+{
+    QRegExp re(s, Qt::CaseInsensitive, QRegExp::WildcardUnix);
+    if (!re.isValid())
+        return;
+
+    m_reSubtitle = re;
+    UpdateUILists();
+}
+
+void PlaybackBox::showDescriptionFilter()
+{
+    MythTextInputDialog *dlg = new MythTextInputDialog( m_popupStack,
+        tr("Description wildcard filter"), FilterNone, false,
+        m_reDescription.pattern());
+    if (dlg->Create())
+    {
+        connect(dlg, SIGNAL(haveResult(QString)),
+            SLOT(setDescriptionFilter(QString)));
+        m_popupStack->AddScreen(dlg);
+    }
+    else
+        delete dlg;
+}
+
+void PlaybackBox::setDescriptionFilter(QString s)
+{
+    QRegExp re(s, Qt::CaseInsensitive, QRegExp::WildcardUnix);
+    if (!re.isValid())
+        return;
+
+    m_reDescription = re;
+    UpdateUILists();
+}
+
 QString PlaybackBox::getRecGroupPassword(const QString &group)
 {
     return m_recGroupPwCache.value(group);
diff -Naur mythtv-master-20180502-gf1054a3-old/mythtv/programs/mythfrontend/playbackbox.h mythtv-master-20180502-gf1054a3-new/mythtv/programs/mythfrontend/playbackbox.h
--- mythtv-master-20180502-gf1054a3-old/mythtv/programs/mythfrontend/playbackbox.h	2018-05-03 10:35:25.000000000 +0200
+++ mythtv-master-20180502-gf1054a3-new/mythtv/programs/mythfrontend/playbackbox.h	2018-05-03 10:36:52.006666622 +0200
@@ -18,6 +18,7 @@
 #include <QMutex>
 #include <QMap>
 #include <QSet>
+#include <QRegExp>
 
 #include "jobqueue.h"
 #include "tv_play.h"
@@ -220,6 +221,12 @@
     void showMetadataEditor();
     void showGroupFilter();
     void showRecGroupPasswordChanger();
+    void showTitleFilter();
+    void setTitleFilter(QString);
+    void showSubtitleFilter();
+    void setSubtitleFilter(QString);
+    void showDescriptionFilter();
+    void setDescriptionFilter(QString);
     MythMenu*  createPlayFromMenu();
     MythMenu*  createRecordingMenu();
     MythMenu*  createJobMenu();
@@ -540,6 +547,8 @@
         typedef QMultiMap<QPair<uint, QDateTime>, JobQueueEntry> MapType;
         MapType m_jobs;
     } m_jobQueue;
+
+    QRegExp             m_reTitle, m_reSubtitle, m_reDescription;
 };
 
 class GroupSelector : public MythScreenType
