From 71e8d1930b4697e398bffd5abddf369d82900f39 Mon Sep 17 00:00:00 2001
From: Lawrence Rust <lvr@softsystem.co.uk>
Date: Tue, 8 Jul 2014 17:13:42 +0100
Subject: [PATCH 239/333] Playbackbox: Add title, subtitle and description
 filters

Signed-off-by: Lawrence Rust <lvr@softsystem.co.uk>

Conflicts:

	mythtv/programs/mythfrontend/playbackbox.cpp
---
 mythtv/programs/mythfrontend/playbackbox.cpp |  117 +++++++++++++++++++++++++-
 mythtv/programs/mythfrontend/playbackbox.h   |    9 ++
 2 files changed, 125 insertions(+), 1 deletion(-)

diff --git a/mythtv/programs/mythfrontend/playbackbox.cpp b/mythtv/programs/mythfrontend/playbackbox.cpp
index eae8a71..46c3c03 100644
--- a/mythtv/programs/mythfrontend/playbackbox.cpp
+++ b/mythtv/programs/mythfrontend/playbackbox.cpp
@@ -1327,11 +1327,33 @@ void PlaybackBox::UpdateUsageUI(void)
  */
 void PlaybackBox::UpdateUIRecGroupList(void)
 {
-    if (m_recGroupIdx < 0 || !m_recgroupList || m_recGroups.size() < 2)
+    if (!m_recgroupList)
         return;
 
     m_recgroupList->Reset();
 
+    if (!m_reTitle.isEmpty())
+        new MythUIButtonListItem( m_recgroupList, tr("Title: %1")
+            .arg(m_reTitle.pattern()) );
+
+    if (!m_reSubtitle.isEmpty())
+        new MythUIButtonListItem( m_recgroupList, tr("Subtitle: %1")
+            .arg(m_reSubtitle.pattern()) );
+
+    if (!m_reDescription.isEmpty())
+        new MythUIButtonListItem( m_recgroupList, tr("Description: %1")
+            .arg(m_reDescription.pattern()) );
+
+    if (!m_recgroupList->IsEmpty())
+    {
+        m_recGroups.clear();
+        m_recGroupIdx = -1;
+        return;
+    }
+
+    if (m_recGroupIdx < 0 || m_recGroups.size() < 2)
+        return;
+
     int idx = 0;
     QStringList::iterator it = m_recGroups.begin();
     for (; it != m_recGroups.end(); (++it), (++idx))
@@ -1676,6 +1698,16 @@ bool PlaybackBox::UpdateUILists(void)
             m_progsInDB++;
             ProgramInfo *p = *it;
 
+            if (!m_reTitle.isEmpty() && m_reTitle.isValid() &&
+                    m_reTitle.indexIn(p->GetTitle()) < 0)
+                continue;
+            if (!m_reSubtitle.isEmpty() && m_reSubtitle.isValid() &&
+                    m_reSubtitle.indexIn(p->GetSubtitle()) < 0)
+                continue;
+            if (!m_reDescription.isEmpty() && m_reDescription.isValid() &&
+                    m_reDescription.indexIn(p->GetDescription()) < 0)
+                continue;
+
             if (p->GetTitle().isEmpty())
                 p->SetTitle(tr("_NO_TITLE_"));
 
@@ -2445,6 +2477,15 @@ void PlaybackBox::ShowGroupPopup()
         m_popupMenu->AddItem(tr("Change Group Password"),
                              SLOT(showRecGroupPasswordChanger()));
 
+    m_popupMenu->AddItem(tr("Change Title Filter"),
+                         SLOT(showTitleFilter()));
+
+    m_popupMenu->AddItem(tr("Change Subtitle Filter"),
+                         SLOT(showSubtitleFilter()));
+
+    m_popupMenu->AddItem(tr("Change Description Filter"),
+                         SLOT(showDescriptionFilter()));
+
     if (!m_playList.isEmpty())
     {
         m_popupMenu->AddItem(tr("Playlist Options"), NULL, createPlaylistMenu());
@@ -4643,6 +4684,80 @@ void PlaybackBox::setGroupFilter(const QString &recGroup)
         gCoreContext->SaveSetting("DisplayRecGroupIsCategory", 1);
 }
 
+void PlaybackBox::showTitleFilter()
+{
+    MythTextInputDialog *dlg = new MythTextInputDialog( m_popupStack,
+        tr("Title wildcard filter"), FilterNone, false, m_reTitle.pattern());
+    if (dlg->Create())
+    {
+        connect(dlg, SIGNAL(haveResult(QString)),
+            SLOT(setTitleFilter(QString)));
+        m_popupStack->AddScreen(dlg);
+    }
+    else
+        delete dlg;
+}
+
+void PlaybackBox::setTitleFilter(QString s)
+{
+    QRegExp re(s, Qt::CaseInsensitive, QRegExp::WildcardUnix);
+    if (!re.isValid())
+        return;
+
+    m_reTitle = re;
+    UpdateUILists();
+}
+
+void PlaybackBox::showSubtitleFilter()
+{
+    MythTextInputDialog *dlg = new MythTextInputDialog( m_popupStack,
+        tr("Subtitle wildcard filter"), FilterNone, false,
+        m_reSubtitle.pattern());
+    if (dlg->Create())
+    {
+        connect(dlg, SIGNAL(haveResult(QString)),
+            SLOT(setSubtitleFilter(QString)));
+        m_popupStack->AddScreen(dlg);
+    }
+    else
+        delete dlg;
+}
+
+void PlaybackBox::setSubtitleFilter(QString s)
+{
+    QRegExp re(s, Qt::CaseInsensitive, QRegExp::WildcardUnix);
+    if (!re.isValid())
+        return;
+
+    m_reSubtitle = re;
+    UpdateUILists();
+}
+
+void PlaybackBox::showDescriptionFilter()
+{
+    MythTextInputDialog *dlg = new MythTextInputDialog( m_popupStack,
+        tr("Description wildcard filter"), FilterNone, false,
+        m_reDescription.pattern());
+    if (dlg->Create())
+    {
+        connect(dlg, SIGNAL(haveResult(QString)),
+            SLOT(setDescriptionFilter(QString)));
+        m_popupStack->AddScreen(dlg);
+    }
+    else
+        delete dlg;
+}
+
+void PlaybackBox::setDescriptionFilter(QString s)
+{
+    QRegExp re(s, Qt::CaseInsensitive, QRegExp::WildcardUnix);
+    if (!re.isValid())
+        return;
+
+    m_reDescription = re;
+    UpdateUILists();
+}
+
 QString PlaybackBox::getRecGroupPassword(const QString &group)
 {
     return m_recGroupPwCache[group];
diff --git a/mythtv/programs/mythfrontend/playbackbox.h b/mythtv/programs/mythfrontend/playbackbox.h
index 19255ec..74f5a56 100644
--- a/mythtv/programs/mythfrontend/playbackbox.h
+++ b/mythtv/programs/mythfrontend/playbackbox.h
@@ -18,6 +18,7 @@ using namespace std;
 #include <QMutex>
 #include <QMap>
 #include <QSet>
+#include <QRegExp>
 
 #include "jobqueue.h"
 #include "tv_play.h"
@@ -154,6 +155,12 @@ class PlaybackBox : public ScheduleCommon
     void showMetadataEditor();
     void showGroupFilter();
     void showRecGroupPasswordChanger();
+    void showTitleFilter();
+    void setTitleFilter(QString);
+    void showSubtitleFilter();
+    void setSubtitleFilter(QString);
+    void showDescriptionFilter();
+    void setDescriptionFilter(QString);
     MythMenu*  createPlayFromMenu();
     MythMenu*  createRecordingMenu();
     MythMenu*  createJobMenu();
@@ -469,6 +476,8 @@ class PlaybackBox : public ScheduleCommon
         typedef QMultiMap<QPair<uint, QDateTime>, JobQueueEntry> MapType;
         MapType m_jobs;
     } m_jobQueue;
+
+    QRegExp             m_reTitle, m_reSubtitle, m_reDescription;
 };
 
 class GroupSelector : public MythScreenType
-- 
1.7.9.5

