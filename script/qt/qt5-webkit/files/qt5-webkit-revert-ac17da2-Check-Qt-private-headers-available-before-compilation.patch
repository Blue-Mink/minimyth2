diff -Naur qtwebkit-47e125f8c3ff6fb508a8f055d45b15365d5e9d83-old/cmake/OptionsQt.cmake qtwebkit-47e125f8c3ff6fb508a8f055d45b15365d5e9d83-new/cmake/OptionsQt.cmake
--- qtwebkit-47e125f8c3ff6fb508a8f055d45b15365d5e9d83-old/cmake/OptionsQt.cmake	2019-09-13 04:22:16.000000000 +0200
+++ qtwebkit-47e125f8c3ff6fb508a8f055d45b15365d5e9d83-new/cmake/OptionsQt.cmake	2019-09-16 16:38:14.399999961 +0200
@@ -1,4 +1,3 @@
-include(CheckCXXSourceCompiles)
 include(FeatureSummary)
 include(ECMEnableSanitizers)
 include(ECMPackageConfigHelpers)
@@ -70,30 +69,6 @@
     endif ()
 endmacro()
 
-macro(CHECK_QT5_PRIVATE_INCLUDE_DIRS _qt_component _header)
-    set(INCLUDE_TEST_SOURCE
-    "
-        #include <${_header}>
-        int main() { return 0; }
-    "
-    )
-    set(CMAKE_REQUIRED_INCLUDES ${Qt5${_qt_component}_PRIVATE_INCLUDE_DIRS})
-    set(CMAKE_REQUIRED_LIBRARIES Qt5::${_qt_component})
-
-    # Avoid check_include_file_cxx() because it performs linking but doesn't support CMAKE_REQUIRED_LIBRARIES (doh!)
-    check_cxx_source_compiles("${INCLUDE_TEST_SOURCE}" Qt5${_qt_component}_PRIVATE_HEADER_FOUND)
-
-    unset(INCLUDE_TEST_SOURCE)
-    unset(CMAKE_REQUIRED_INCLUDES)
-    unset(CMAKE_REQUIRED_LIBRARIES)
-
-    if (NOT Qt5${_qt_component}_PRIVATE_HEADER_FOUND)
-        message(FATAL_ERROR "Header ${_header} is not found. Please make sure that:
-    1. Private headers of Qt5${_qt_component} are installed
-    2. Qt5${_qt_component}_PRIVATE_INCLUDE_DIRS is correctly defined in Qt5${_qt_component}Config.cmake")
-    endif ()
-endmacro()
-
 macro(QT_ADD_EXTRA_WEBKIT_TARGET_EXPORT target)
     if (QT_STATIC_BUILD OR SHARED_CORE)
         install(TARGETS ${target} EXPORT WebKitTargets
@@ -640,14 +615,6 @@
 
 find_package(Qt5 ${REQUIRED_QT_VERSION} REQUIRED COMPONENTS ${QT_REQUIRED_COMPONENTS})
 
-CHECK_QT5_PRIVATE_INCLUDE_DIRS(Gui private/qhexstring_p.h)
-if (Qt5_VERSION VERSION_GREATER 5.10.1)
-    CHECK_QT5_PRIVATE_INCLUDE_DIRS(Network private/http2protocol_p.h)
-endif ()
-if (ENABLE_WEBKIT2)
-    CHECK_QT5_PRIVATE_INCLUDE_DIRS(Quick private/qsgrendernode_p.h)
-endif ()
-
 if (QT_STATIC_BUILD)
     foreach (qt_module ${QT_REQUIRED_COMPONENTS})
         CONVERT_PRL_LIBS_TO_CMAKE(${qt_module})
