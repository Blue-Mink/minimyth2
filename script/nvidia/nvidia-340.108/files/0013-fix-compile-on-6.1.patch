diff -Napur NVIDIA-Linux-x86_64-340.108.orig/kernel/nv-acpi.c NVIDIA-Linux-x86_64-340.108/kernel/nv-acpi.c
--- NVIDIA-Linux-x86_64-340.108.orig/kernel/nv-acpi.c	2023-02-08 15:40:39.134582709 +0300
+++ NVIDIA-Linux-x86_64-340.108/kernel/nv-acpi.c	2023-02-08 16:56:13.616741499 +0300
@@ -178,6 +178,53 @@ int nv_acpi_uninit(void)
     return 0;
 }
 
+struct nv_acpi_add_data {
+    int device_counter;
+    nv_acpi_t *pNvAcpiObject;
+};
+
+static int nv_acpi_add_child(struct acpi_device *dev, void *data)
+{
+    nv_acpi_integer_t device_id;
+    struct nv_acpi_add_data *pdata = data;
+    nv_acpi_t *pNvAcpiObject = pdata->pNvAcpiObject;
+    int device_counter = pdata->device_counter;
+    int status;
+    
+    if (device_counter == NV_MAXNUM_DISPLAY_DEVICES)
+    {
+        nv_printf(NV_DBG_ERRORS, 
+                  "NVRM: nv_acpi_add: Total number of devices cannot exceed %d\n", 
+                  NV_MAXNUM_DISPLAY_DEVICES);
+        return -ENOSPC;
+    }
+
+    status = acpi_evaluate_integer(dev->handle, "_ADR", NULL, &device_id);
+    if (ACPI_FAILURE(status))
+        /* Couldnt query device_id for this device */
+        return 0;
+
+    device_id = (device_id & 0xffff);
+
+    if ((device_id != 0x100) && /* Not a known CRT device-id */ 
+        (device_id != 0x200) && /* Not a known TV device-id */ 
+        (device_id != 0x0110) && (device_id != 0x0118) && (device_id != 0x0400) && /* Not an LCD*/
+        (device_id != 0x0111) && (device_id != 0x0120) && (device_id != 0x0300)) /* Not a known DVI device-id */ 
+    {
+        /* This isnt a known device Id. 
+           Do default switching on this system. */
+        pNvAcpiObject->default_display_mask = 1;
+        return -EINVAL;
+    }
+
+    pNvAcpiObject->pNvVideo[device_counter].dev_id = device_id;
+    pNvAcpiObject->pNvVideo[device_counter].dev_handle = dev->handle;
+
+    pdata->device_counter++;
+
+    return 0;
+}
+
 static int nv_acpi_add(struct acpi_device *device)
 {
     /*
@@ -186,13 +232,11 @@ static int nv_acpi_add(struct acpi_devic
      */
     int status = -1;
     RM_STATUS rmStatus = RM_ERROR;
+    struct nv_acpi_add_data data = { 0, NULL };
     nv_acpi_t *pNvAcpiObject = NULL;
     union acpi_object control_argument_0 = { ACPI_TYPE_INTEGER };
     struct acpi_object_list control_argument_list = { 0, NULL };
     nv_stack_t *sp = NULL;
-    struct list_head *node, *next;
-    nv_acpi_integer_t device_id = 0;
-    int device_counter = 0;
 
     NV_KMEM_CACHE_ALLOC_STACK(sp);
     if (sp == NULL)
@@ -211,6 +255,8 @@ static int nv_acpi_add(struct acpi_devic
         return -ENOMEM;
     }
 
+    data.pNvAcpiObject = pNvAcpiObject;
+    
     os_mem_set((void *)pNvAcpiObject, 0, sizeof(nv_acpi_t));
 
     device->driver_data = pNvAcpiObject;
@@ -220,47 +266,7 @@ static int nv_acpi_add(struct acpi_devic
 
     // grab handles to all the important nodes representing devices
 
-    list_for_each_safe(node, next, &device->children) 
-    {
-        struct acpi_device *dev =
-            list_entry(node, struct acpi_device, node);
-
-        if (!dev)
-            continue;
-
-        if (device_counter == NV_MAXNUM_DISPLAY_DEVICES)
-        {
-            nv_printf(NV_DBG_ERRORS, 
-                      "NVRM: nv_acpi_add: Total number of devices cannot exceed %d\n", 
-                      NV_MAXNUM_DISPLAY_DEVICES);
-            break;
-        }
-
-        status =
-            acpi_evaluate_integer(dev->handle, "_ADR", NULL, &device_id);
-        if (ACPI_FAILURE(status))
-            /* Couldnt query device_id for this device */
-            continue;
-
-        device_id = (device_id & 0xffff);
-
-        if ((device_id != 0x100) && /* Not a known CRT device-id */ 
-            (device_id != 0x200) && /* Not a known TV device-id */ 
-            (device_id != 0x0110) && (device_id != 0x0118) && (device_id != 0x0400) && /* Not an LCD*/
-            (device_id != 0x0111) && (device_id != 0x0120) && (device_id != 0x0300)) /* Not a known DVI device-id */ 
-        {
-            /* This isnt a known device Id. 
-               Do default switching on this system. */
-            pNvAcpiObject->default_display_mask = 1;
-            break;
-        }
-
-        pNvAcpiObject->pNvVideo[device_counter].dev_id = device_id;
-        pNvAcpiObject->pNvVideo[device_counter].dev_handle = dev->handle;
-    
-        device_counter++;
-
-    }
+    acpi_dev_for_each_child(device, nv_acpi_add_child, &data);
 
     // arg 0, bits 1:0, 0 = enable events
     control_argument_0.integer.type = ACPI_TYPE_INTEGER;
@@ -1197,6 +1197,29 @@ RM_STATUS NV_API_CALL nv_acpi_dsm_method
     return status;
 }
 
+static int nv_acpi_ddc_method_child(struct acpi_device *dev, void *data)
+{
+    acpi_status status;
+    nv_acpi_integer_t device_id;
+    acpi_handle *lcd_dev_handle = data;
+
+    status = acpi_evaluate_integer(dev->handle, "_ADR", NULL, &device_id);
+    if (ACPI_FAILURE(status))
+        /* Couldnt query device_id for this device */
+        return 0;
+
+    device_id = (device_id & 0xffff);
+
+    if ((device_id == 0x0110) || (device_id == 0x0118) || (device_id == 0x0400)) /* Only for an LCD*/
+    {
+        *lcd_dev_handle = dev->handle;
+        nv_printf(NV_DBG_INFO, "NVRM: %s Found LCD: %x\n", __FUNCTION__, device_id);
+        return -EINTR;
+    }
+
+    return 0;
+}
+
 /*
  * This function executes a _DDC ACPI method.
  */
@@ -1212,8 +1235,6 @@ RM_STATUS NV_API_CALL nv_acpi_ddc_method
     union acpi_object *ddc;
     union acpi_object ddc_arg0 = { ACPI_TYPE_INTEGER };
     struct acpi_object_list input = { 1, &ddc_arg0 };
-    struct list_head *node, *next;
-    nv_acpi_integer_t device_id = 0;
     NvU32 i;
     acpi_handle dev_handle  = NULL;
     acpi_handle lcd_dev_handle  = NULL;
@@ -1243,29 +1264,7 @@ RM_STATUS NV_API_CALL nv_acpi_ddc_method
         return RM_ERR_NOT_SUPPORTED;
     }
 
-    list_for_each_safe(node, next, &device->children) 
-    {
-        struct acpi_device *dev =
-            list_entry(node, struct acpi_device, node);
-
-        if (!dev)
-            continue;
-
-        status = acpi_evaluate_integer(dev->handle, "_ADR", NULL, &device_id);
-        if (ACPI_FAILURE(status))
-            /* Couldnt query device_id for this device */
-            continue;
-
-        device_id = (device_id & 0xffff);
-
-        if ((device_id == 0x0110) || (device_id == 0x0118) || (device_id == 0x0400)) /* Only for an LCD*/
-        {
-            lcd_dev_handle = dev->handle;
-            nv_printf(NV_DBG_INFO, "NVRM: %s Found LCD: %x\n", __FUNCTION__, device_id);
-            break;
-        }
-
-    }
+    acpi_dev_for_each_child(device, nv_acpi_ddc_method_child, &lcd_dev_handle);
 
     if (lcd_dev_handle == NULL)
     {
