#!/bin/sh
################################################################################
# audio
################################################################################
. /etc/rc.d/functions

start() {

    /bin/touch /var/init/audio.inprogress

    local amixer_command
    local control
    local timeout
    local buffer=128

    /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] Starting..."

    /bin/chmod -R 777 /proc/asound
    /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] Setting buffer to ${buffer} for /proc/asound/card${MM_AUDIO_CARD_NUMBER}/pcm${MM_AUDIO_DEVICE_NUMBER}p/sub0/prealloc"
    echo ${buffer} | tee /proc/asound/card${MM_AUDIO_CARD_NUMBER}/pcm${MM_AUDIO_DEVICE_NUMBER}p/sub0/prealloc
    current_buffer=`cat /proc/asound/card${MM_AUDIO_CARD_NUMBER}/pcm${MM_AUDIO_DEVICE_NUMBER}p/sub0/prealloc`

    if [ ! ${current_buffer} = ${buffer} ] ; then

        /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] ERROR: Setting buffer to ${buffer} for /proc/asound/card${MM_AUDIO_CARD_NUMBER}/pcm${MM_AUDIO_DEVICE_NUMBER}p/sub0/prealloc failed!!!"

    fi

    amixer_command="/usr/bin/amixer -c ${MM_AUDIO_CARD_NUMBER}"

    if [ ! "x${MM_AUDIO_FETCH_ASOUND_CONF}" = "xyes" ] ; then

        # Set audio card number and audio card device.
        /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] Adding pcm:hw${MM_AUDIO_CARD_NUMBER},${MM_AUDIO_DEVICE_NUMBER} to asound.conf..."
        /bin/sed -i "s%@MM_AUDIO_CARD_NUMBER@%${MM_AUDIO_CARD_NUMBER}%"     /etc/asound.conf
        /bin/sed -i "s%@MM_AUDIO_DEVICE_NUMBER@%${MM_AUDIO_DEVICE_NUMBER}%" /etc/asound.conf

    fi

    # Wait for audio driver to load.
    timeout=10
    while [ ! ${amixer_command} > /dev/null 2>&1 ] && [ ${timeout} -gt 0 ] ; do
        /bin/sleep 1
        timeout=$((timeout-1))
    done

    if  ! ${amixer_command} > /dev/null 2>&1 ; then

        /usr/bin/logger -s -t minimyth -p "local0.err" "[init.d/audio] error: audio driver not loaded!"
        mm_message_output err "error: MiniMyth2 can't identify/load AUDIO drivers. Please report this ..."
        return 1

    else

        /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] ALSA amixer successfuly operating on card ${MM_AUDIO_CARD_NUMBER}"

    fi

    if [ -e /etc/asound.state ] ; then

        /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] Restoring amixer state from /etc/asound.state file..."
        /usr/sbin/alsactl --file /etc/asound.state restore

    else

        if [ ! x${MM_AUDIO_DEVICE_UCM_PROFILE} = "x" ] ; then

            /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] Configuring AUDIO via UCM for card \"${MM_AUDIO_DEVICE_UCM_PROFILE}\"..."
            ucm_command="/usr/bin/alsaucm -c ${MM_AUDIO_DEVICE_UCM_PROFILE}"

            if [ ! x${MM_AUDIO_DEVICE_UCM_COMMAND} = "x" ] ; then

                /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] alsaucm command: \"${ucm_command} ${MM_AUDIO_DEVICE_UCM_COMMAND}\""
                alsaucm_output=`${ucm_command} ${MM_AUDIO_DEVICE_UCM_COMMAND} 2>&1`

            else


                if /bin/echo "+${MM_AUDIO_TYPE}+" | /bin/grep -q '+analog+'  ; then

                    case "${MM_AUDIO_DEVICE_UCM_PROFILE}" in
                        chtrt5645)  enable_analog_audio="set _verb HiFi set _enadev Speaker" ;;
                        *)          enable_analog_audio="set _verb HiFi set _enadev Speaker" ;;
                    esac

                    /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] alsaucm analog cmd.: \"${ucm_command} ${enable_analog_audio}\""
                    alsaucm_output=`${ucm_command} ${enable_analog_audio} 2>&1`
                    /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] alsaucm output: \"${alsaucm_output}\""

                fi

                if /bin/echo "+${MM_AUDIO_TYPE}+" | /bin/grep -q '+digital+'  ; then

                    case "${MM_AUDIO_DEVICE_UCM_PROFILE}" in
                        # Amlogic G12/SM1 devices
                        ODROID-C2|SEI510|GTKING-PRO|KHADAS-VIM3|ODROID-N2|A95XF3-AIR|KHADAS-VIM3L|ODROID-C4|SEI610|X96-AIR|TX5-PLUS|RADXA-ZERO)
                            # workarround for alsaucm not working properly on amlogic - start
                            TDMOUT=$(awk '/TDMOUT/ && $2=="OUT" {print substr($1,length($1),1)}' /sys/firmware/devicetree/base/sound/audio-routing | sort | head -n 1) #'
                            if [ "${TDMOUT}" = "A" ]; then
                                /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] Amlogic: Enabling HDMI on TDMOUT A on G12/SM1"
                                ${amixer_command} set 'FRDDR_A SINK 1 SEL' 'OUT 0'
                                ${amixer_command} set 'FRDDR_A SRC 1 EN' on
                                ${amixer_command} set 'TDMOUT_A SRC SEL' 'IN 0'
                                ${amixer_command} set 'TOHDMITX' on
                                ${amixer_command} set 'TOHDMITX I2S SRC' 'I2S A'
                            elif [ "${TDMOUT}" = "B" ]; then
                                /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] Amlogic: Enabling HDMI on TDMOUT B on G12/SM1"
                                ${amixer_command} set 'FRDDR_A SINK 1 SEL' 'OUT 1'
                                ${amixer_command} set 'FRDDR_A SRC 1 EN' on
                                ${amixer_command} set 'TDMOUT_B SRC SEL' 'IN 0'
                                ${amixer_command} set 'TOHDMITX' on
                                ${amixer_command} set 'TOHDMITX I2S SRC' 'I2S B'
                            fi
                            # AXG S/PDIF
                            SPDIFOUT=$(awk '/SPDIF/' /sys/firmware/devicetree/base/sound/audio-routing | sort | head -n 1)
                            if [ -n "${SPDIFOUT}" ]; then
                                /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] Amlogic: Enabling SPDIF on G12/SM1"
                                ${amixer_command} set 'FRDDR_B SINK 1 SEL' 'OUT 3'
                                ${amixer_command} set 'FRDDR_B SRC 1 EN' on
                                ${amixer_command} set 'SPDIFOUT SRC SEL' 'IN 1'
                                ${amixer_command} set 'SPDIFOUT Playback' on
                            fi
                            # enable_digital_audio="set _verb HDMI set _enadev Speaker"
                            # workarround for alsaucm not working properly on amlogic - end
                            ;;
                        # Amlogic GXL/GXM devices
                        NEXBOX-A95X|LIBRETECH-S905X-CC|LIBRETECH-S9XX-PC|S905X-P212|KHADAS-VIM2|VEGA-S95|P230-Q200|NEXBOX-A1|RBOX-PRO|WETEK-CORE2|BEELINK-GT1)
                            # workarround for alsaucm not working properly on amlogic - start
                            /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] Amlogic: Enabling HDMI/SPDIF on GXL/GXM"
                            ${amixer_command} set 'AIU HDMI CTRL SRC' 'I2S'
                            ${amixer_command} set 'AIU SPDIF SRC SEL' 'SPDIF'
                            # enable_digital_audio="set _verb HDMI set _enadev Speaker set _verb SPDIF set _enadev Speaker"
                            # workarround for alsaucm not working properly on amlogic - end
                            ;;
                        # Allwinner H616 devices
                        ALLWINNER-H616)
                            /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] Allwinner: Enabling audio on H616"
                            amixer_command="/usr/bin/amixer -c 0 "
                            ${amixer_command} set 'I2S1 Src Select' 'APBIF_TXDIF0'
                            ${amixer_command} set 'I2S1OUT' on
                            allwinner_audio_codec_card_number=`/usr/bin/aplay -l | grep "H616 Audio Codec" | cut -d " " -f 2 | sed "s|.*\([0-9]\).*|\1|g"`
                            if [ ! x${allwinner_audio_codec_card_number} = "x" ] ; then
                                /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] Allwinner H616: unmuting audio on card=${allwinner_audio_codec_card_number}"
                                amixer_command="/usr/bin/amixer -c ${allwinner_audio_codec_card_number} "
                            else
                                /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] Allwinner H616: can't indentify audio codec card so unmuting on card=2"
                                amixer_command="/usr/bin/amixer -c 2"
                            fi
                            ${amixer_command} set 'Left LINEOUT Mux' 'LOMixer'
                            ${amixer_command} set 'Left Output Mixer DACL' on
                            ${amixer_command} set 'Left Output Mixer DACR' on
                            ${amixer_command} set 'Right LINEOUT Mux' 'ROMixer'
                            ${amixer_command} set 'Right Output Mixer DACL' on
                            ${amixer_command} set 'Right Output Mixer DACR' on
                            allwinnerhdmi_card_number=`/usr/bin/aplay -l | grep "allwinnerhdmi" | cut -d " " -f 2 | sed "s|.*\([0-9]\).*|\1|g"`
                            if [ ! x${allwinnerhdmi_card_number} = "x" ] ; then
                                /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] Allwinner H616: enabling HDMI on card=${allwinnerhdmi_card_number}"
                                /usr/bin/aplay /usr/share/alsa/speaker-test/allwinner-h616-hdmi-enable.wav -D hw:${allwinnerhdmi_card_number},0 2>&1 >/dev/null
                            else
                                /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] Allwinner H616: can't indentify HDMI card so enabling on card=1"
                                /usr/bin/aplay /usr/share/alsa/speaker-test/allwinner-h616-hdmi-enable.wav -D hw:1,0 2>&1 >/dev/null
                            fi
                            ;;
                        chtrt5645)
                            enable_digital_audio="set _verb HiFi set _enadev Speaker"
                            /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] alsaucm digital cmd.: \"${ucm_command} ${enable_digital_audio}\""
                            alsaucm_output=`${ucm_command} ${enable_digital_audio} 2>&1`
                            /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] alsaucm output: \"${alsaucm_output}\""
                            ;;
                        *)
                            enable_digital_audio="set _verb HiFi set _enadev Speaker"
                            /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] alsaucm digital cmd.: \"${ucm_command} ${enable_digital_audio}\""
                            alsaucm_output=`${ucm_command} ${enable_digital_audio} 2>&1`
                            /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] alsaucm output: \"${alsaucm_output}\""
                            ;;
                    esac


                fi

            fi

        fi

        # Unmute audio.
        if ${amixer_command} > /dev/null 2>&1 ; then

            control=

            if /bin/echo "+${MM_AUDIO_TYPE}+" | /bin/grep -q '+analog+'  ; then

                /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] Unmuting all ANALOG audio outputs..."
                ${amixer_command} | /bin/grep -e '^Simple mixer control' | /bin/sed -e "s%^[^']*'%%" | /bin/sed -e "s%'[^']*$%%" |

                while read control ; do
                    case "${control}" in
                    PCM)                         ${amixer_command} set 'PCM'                       90% unmute ;;
                    Master)                      ${amixer_command} set 'Master'                    90% unmute ;;
                    Front)                       ${amixer_command} set 'Front'                     90% unmute ;;
                    Master\ Front)               ${amixer_command} set 'Master Front'              90% unmute ;;
                    Analog\ Front)               ${amixer_command} set 'Analog Front'              90% unmute ;;
                    Surround)                    ${amixer_command} set 'Surround'                  90% unmute ;;
                    Analog\ Side)                ${amixer_command} set 'Analog Side'               90% unmute ;;
                    Analog\ Rear)                ${amixer_command} set 'Analog Rear'               90% unmute ;;
                    Center)                      ${amixer_command} set 'Center'                    90% unmute ;;
                    LFE)                         ${amixer_command} set 'LFE'                       90% unmute ;;
                    Analog\ Center/LFE)          ${amixer_command} set 'Analog Center/LFE'         90% unmute ;;
                    Headphone)                   ${amixer_command} set 'Headphone'                 90% unmute ;;
                    Headphone\ Channel)          ${amixer_command} set 'Headphone Channel'         90% unmute ;;
                    esac
                done

            fi

            if /bin/echo "+${MM_AUDIO_TYPE}+" | /bin/grep -q '+digital+' ; then

                /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] Unmuting all DIGITAL audio outputs..."
                ${amixer_command} | /bin/grep -e '^Simple mixer control' | /bin/sed -e "s%^[^']*'%%" | /bin/sed -e "s%'[^']*$%%" |

                while read control ; do
                    case "${control}" in
                        IEC958)
                            ${amixer_command} set 'IEC958'     on
                            ${amixer_command} set 'IEC958,1'   on
                            ;;
                        IEC958\ Front)               ${amixer_command} set 'IEC958 Front'              90% unmute ;;
                        IEC958\ Side)                ${amixer_command} set 'IEC958 Side'               90% unmute ;;
                        IEC958\ Rear)                ${amixer_command} set 'IEC958 Rear'               90% unmute ;;
                        IEC958\ Center/LFE)          ${amixer_command} set 'IEC958 Center/LFE'         90% unmute ;;
                        AIU\ HDMI\ CTRL\ SRC)        ${amixer_command} set 'AIU HDMI CTRL SRC'         I2S        ;;
                        FRDDR_A\ SRC\ 1\ EN)         ${amixer_command} set 'FRDDR_A SRC 1 EN'          on         ;;
                        TOHDMITX)                    ${amixer_command} set 'TOHDMITX'                  on         ;;
                        FRDDR_B\ SRC\ 1\ EN)         ${amixer_command} set 'FRDDR_B SRC 1 EN'          on         ;;
                        SPDIFOUT\ Playback)          ${amixer_command} set 'SPDIFOUT Playback'         on         ;;
                        AIU\ SPDIF\ SRC\ SEL)        ${amixer_command} set 'AIU SPDIF SRC SEL'         SPDIF      ;;
                    esac
                done

            fi

            if [ "x${MM_VOIP_ENABLED}" = "xyes" ] ; then

                if [ -n "${MM_AUDIO_IN_CARD_NUMBER}" ] ; then
                    amixer_command="/usr/bin/amixer -c ${MM_AUDIO_IN_CARD_NUMBER}"
                    /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] Unmuting Capture in card${MM_AUDIO_IN_CARD_NUMBER} and setting level to ${MM_VOIP_MIC_LEVEL}%..."
                else
                    /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] Unmuting Capture in card${MM_AUDIO_CARD_NUMBER} and setting level to ${MM_VOIP_MIC_LEVEL}%..."
                fi

                ${amixer_command} | /bin/grep -e '^Simple mixer control' | /bin/sed -e "s%^[^']*'%%" | /bin/sed -e "s%'[^']*$%%" |

                while read control ; do
                    case "${control}" in
                        Capture)                     ${amixer_command} set 'Capture'     ${MM_VOIP_MIC_LEVEL}% cap unmute ;;
                        Front\ Mic)                  ${amixer_command} set 'Front Mic'   ${MM_VOIP_MIC_LEVEL}% cap unmute ;;
                        Rear\ Mic)                   ${amixer_command} set 'Rear Mic'    ${MM_VOIP_MIC_LEVEL}% cap unmute ;;
                    esac
                done

                if [ -n "${MM_VOIP_MIC_BOOST_LEVEL}" ] ; then
                    /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] Enabling MIC Boost and setting level to ${MM_VOIP_MIC_BOOST_LEVEL}%..."
                    ${amixer_command} | /bin/grep -e '^Simple mixer control' | /bin/sed -e "s%^[^']*'%%" | /bin/sed -e "s%'[^']*$%%" |
                    while read control ; do
                        case "${control}" in
                            Mic\ Boost)              ${amixer_command} set 'Mic Boost'       ${MM_VOIP_MIC_BOOST_LEVEL}% unmute ;;
                            Front\ Mic\ Boost)       ${amixer_command} set 'Front Mic Boost' ${MM_VOIP_MIC_BOOST_LEVEL}% unmute ;;
                            Rear\ Mic\ Boost)        ${amixer_command} set 'Rear Mic Boost'  ${MM_VOIP_MIC_BOOST_LEVEL}% unmute ;;
                        esac
                    done
                fi

                # amixer -c0 set 'Input Source',0 'Rear Mic'
                # Input\ Source)           ${amixer_command} set 'Input Source',0 'Rear Mic' ;;
                if [ -n "${MM_VOIP_MIC_SELECTION}" ] ; then
                    /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] Selecting MIC to "${MM_VOIP_MIC_SELECTION}" ..."
                    ${amixer_command} | /bin/grep -e '^Simple mixer control' | /bin/sed -e "s%^[^']*'%%" | /bin/sed -e "s%'[^']*$%%" |
                    while read control ; do
                        case "${control}" in
                            Input\ Source)           ${amixer_command} set 'Input Source',0 "${MM_VOIP_MIC_SELECTION}" ;;
                        esac
                    done
                fi

            fi

        fi
    fi

    /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] Started with return code=0..."

    /bin/rm -f /var/init/audio.inprogress
    return 0
}

stop () {

    local amixer_command
    local control

    amixer_command="/usr/bin/amixer -c ${MM_AUDIO_CARD_NUMBER}"

    mm_message_output info "muting audio ..."

    # Mute audio.
    if ${amixer_command} > /dev/null 2>&1 ; then

        if /bin/echo "+${MM_AUDIO_TYPE}+" | /bin/grep -q '+analog+'  ; then

            /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] Muting all ANALOG outputs..."
            ${amixer_command} | /bin/grep -e '^Simple mixer control' | /bin/sed -e "s%^[^']*'%%" | /bin/sed -e "s%'[^']*$%%" |

            while read control ; do
                case "${control}" in
                    # General muting.
                    PCM)                ${amixer_command} set 'PCM'               0% mute ;;
                    Master)             ${amixer_command} set 'Master'            0% mute ;;
                    Front)              ${amixer_command} set 'Front'             0% mute ;;
                    Analog\ Front)      ${amixer_command} set 'Analog Front'      0% mute ;;
                    Surround)           ${amixer_command} set 'Surround'          0% mute ;;
                    Analog\ Side)       ${amixer_command} set 'Analog Sied'       0% mute ;;
                    Analog\ Rear)       ${amixer_command} set 'Analog Rear'       0% mute ;;
                    Center)             ${amixer_command} set 'Center'            0% mute ;;
                    LFE)                ${amixer_command} set 'LFE'               0% mute ;;
                    Analog\ Center/LFE) ${amixer_command} set 'Analog Center/LFE' 0% mute ;;
                    Headphone)          ${amixer_command} set 'Headphone'         0% mute ;;
                    Headphone\ Channel) ${amixer_command} set 'Headphone Channel' 0% mute ;;
                esac
            done

        fi

        if /bin/echo "+${MM_AUDIO_TYPE}+" | /bin/grep -q '+digital+' ; then

            /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] Muting all Digital outputs..."
            ${amixer_command} | /bin/grep -e '^Simple mixer control' | /bin/sed -e "s%^[^']*'%%" | /bin/sed -e "s%'[^']*$%%" |

            while read control ; do
                case "${control}" in
                    # General unmuting.
                    IEC958)               ${amixer_command} set 'IEC958'            off      ;;
                    IEC958\ Front)        ${amixer_command} set 'IEC958 Front'      0% mute  ;;
                    IEC958\ Side)         ${amixer_command} set 'IEC958 Side'       0% mute  ;;
                    IEC958\ Rear)         ${amixer_command} set 'IEC958 Rear'       0% mute  ;;
                    IEC958\ Center/LFE)   ${amixer_command} set 'IEC958 Center/LFE' 0% mute  ;;
                    AIU\ HDMI\ CTRL\ SRC) ${amixer_command} set 'AIU HDMI CTRL SRC' DISABLED ;;
                esac
            done

        fi

        if [ "x${MM_VOIP_ENABLED}" = "xyes" ] ; then

            if [ -n "${MM_AUDIO_IN_CARD_NUMBER}" ] ; then

                amixer_command="/usr/bin/amixer -c ${MM_AUDIO_IN_CARD_NUMBER}"
                /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] Muting Capture and MIC Boost on card${MM_AUDIO_IN_CARD_NUMBER} ..."

            else

                /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/audio] Muting Capture and MIC Boost on card${MM_AUDIO_CARD_NUMBER} ..."

            fi

            ${amixer_command} | /bin/grep -e '^Simple mixer control' | /bin/sed -e "s%^[^']*'%%" | /bin/sed -e "s%'[^']*$%%" |

            while read control ; do
                case "${control}" in
                    Capture)            ${amixer_command} set 'Capture'           0% cap mute ;;
                    Front\ Mic)         ${amixer_command} set 'Front Mic'         0% cap mute ;;
                    Rear\ Mic)          ${amixer_command} set 'Rear Mic'          0% cap mute ;;
                    Mic\ Boost)         ${amixer_command} set 'Mic Boost'         0% mute ;;
                    Front\ Mic\ Boost)  ${amixer_command} set 'Front Mic Boost'   0% mute ;;
                    Rear\ Mic\ Boost)   ${amixer_command} set 'Rear Mic Boost'    0% mute ;;
                esac
            done

        fi

    fi

    return 0
}

case $1 in
    start) start ;;
    stop)  stop  ;;
esac

exit 0
