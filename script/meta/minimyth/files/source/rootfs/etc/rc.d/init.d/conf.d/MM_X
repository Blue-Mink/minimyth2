################################################################################
# MM_X configuration variables and files.
################################################################################
. /lib/minimyth/mm_detect

conf_clean_MM_X() {
    /bin/rm -rf /tmp/init.conf.x

    return 0
}

conf_check_MM_X() {
    return 0
}

conf_default_MM_X() {
    local device
    local device_item
    local device_list
    local X_RESOLUTION_X
    local X_RESOLUTION_Y
    local X_VIRTUAL_X
    local X_VIRTUAL_Y
    local X_DISPLAYSIZE_X
    local X_DISPLAYSIZE_Y

    if /usr/bin/test -e '/tmp/init.conf.x/conf_default_MM_X' ; then
        return 0
    fi

    # The routine relies on MM_VIDEO_* variables.
    conf_default_MM_VIDEO

    # X device variables
    if /usr/bin/test -z "${MM_X_KBD_DEVICE}" ; then
        MM_X_KBD_DEVICE='auto'
    fi
    if /usr/bin/test "${MM_X_KBD_DEVICE}" = 'auto' ; then
        MM_X_KBD_DEVICE="`mm_detect_state_get 'kbd' | mm_uniq`"
        device_list=
        for device_item in ${MM_X_KBD_DEVICE} ; do
            device=`/bin/echo "${device_item}" | /usr/bin/cut -d ',' -f 1`
            if /usr/bin/test -e "${device}" ; then
                device=`/usr/bin/udevadm info --query name --root --name="${device}" 2> /dev/null`
            fi
            device_list="${device_list} ${device}"
        done
        MM_X_KBD_DEVICE="${device_list}"

        if /usr/bin/test -n "${MM_LIRC_DEVICE_LIST}" ; then
            device_blacklist=
            for device_item in ${MM_LIRC_DEVICE_LIST} ; do
                device=`/bin/echo "${device_item}" | /usr/bin/cut -d ',' -f 1`
                if /usr/bin/test -e "${device}" ; then
                    device=`/usr/bin/udevadm info --query name --root --name="${device}" 2> /dev/null`
                fi
                device_blacklist="${device_blacklist} ${device}"
            done
            device_list=
            for device in ${MM_X_KBD_DEVICE} ; do
                if ! /bin/echo " ${device_blacklist} " | /bin/grep -q " ${device} " ; then
                    device_list="${device_list} ${device}"
                fi
            done
            MM_X_KBD_DEVICE="${device_list}"
        fi
        MM_X_KBD_DEVICE=`/bin/echo "${MM_X_KBD_DEVICE}" | /bin/sed -e 's%  *% %g' -e 's%^ %%' -e 's% $%%'`
        MM_X_KBD_DEVICE=`/bin/echo "${MM_X_KBD_DEVICE}" | /usr/bin/cut -d ' ' -f 1`
    fi
    if /usr/bin/test "${MM_X_KBD_DEVICE}" = 'none' ; then
        MM_X_KBD_DEVICE=''
    fi

    if /usr/bin/test -z "${MM_X_MOUSE_DEVICE}" ; then
        MM_X_MOUSE_DEVICE='auto'
    fi
    if /usr/bin/test "${MM_X_MOUSE_DEVICE}" = 'auto' ; then
        MM_X_MOUSE_DEVICE="`mm_detect_state_get 'mouse' | mm_uniq`"
        device_list=
        for device_item in ${MM_X_MOUSE_DEVICE} ; do
            device=`/bin/echo "${device_item}" | /usr/bin/cut -d ',' -f 1`
            if /usr/bin/test -e "${device}" ; then
                device=`/usr/bin/udevadm info --query name --root --name="${device}" 2> /dev/null`
            fi
            device_list="${device_list} ${device}"
        done
        MM_X_MOUSE_DEVICE="${device_list}"

        if /usr/bin/test -n "${MM_LIRC_DEVICE_LIST}" ; then
            device_blacklist=
            for device_item in ${MM_LIRC_DEVICE_LIST} ; do
                device=`/bin/echo "${device_item}" | /usr/bin/cut -d ',' -f 1`
                if /usr/bin/test -e "${device}" ; then
                    device=`/usr/bin/udevadm info --query name --root --name="${device}" 2> /dev/null`
                fi
                device_blacklist="${device_blacklist} ${device}"
            done
            device_list=
            for device in ${MM_X_MOUSE_DEVICE} ; do
                if ! /bin/echo " ${device_blacklist} " | /bin/grep -q " ${device} " ; then
                    device_list="${device_list} ${device}"
                fi
            done
            MM_X_MOUSE_DEVICE="${device_list}"
        fi
        MM_X_MOUSE_DEVICE=`/bin/echo "${MM_X_MOUSE_DEVICE}" | /bin/sed -e 's%  *% %g' -e 's%^ %%' -e 's% $%%'`
        MM_X_MOUSE_DEVICE=`/bin/echo "${MM_X_MOUSE_DEVICE}" | /usr/bin/cut -d ' ' -f 1`
    fi
    if /usr/bin/test "${MM_X_MOUSE_DEVICE}" = 'none' ; then
        MM_X_MOUSE_DEVICE=''
    fi

    # X driver variables.
    if /usr/bin/test -z "${MM_X_HW_TYPE}" ; then
        MM_X_HW_TYPE=`mm_detect_state_get 'x' | /usr/bin/cut -d ' ' -f 1 | /usr/bin/cut -d ',' -f 1`
    fi
    if /usr/bin/test -z "${MM_X_HW_TYPE}" ; then
        mm_message_output err "error: no supported video hardware found. Plese use MM_X_HW_TYPE to identify Your video hardware..."
    fi
    if /usr/bin/test "${MM_X_HW_TYPE}" = "nvidia_vdpau"   ; then
        MM_X_DRIVER='nvidia'
    elif /usr/bin/test "${MM_X_HW_TYPE}" = "radeon_vdpau" ; then
        MM_X_DRIVER='radeon'
    elif /usr/bin/test "${MM_X_HW_TYPE}" = "intel_vaapi"  ; then
        MM_X_DRIVER='intel_i915'
    else
        MM_X_DRIVER="${MM_X_HW_TYPE}"
    fi

    # Default and check MM_X_OUTPUT_DVI, MM_X_OUTPUT_VGA and MM_X_OUTPUT_TV now that we know the X driver.
    if /usr/bin/test -z "${MM_X_OUTPUT_DVI}" &&
       /usr/bin/test -z "${MM_X_OUTPUT_VGA}" &&
       /usr/bin/test -z "${MM_X_OUTPUT_TV}"; then
        MM_X_OUTPUT_DVI='none'
    fi
    if /usr/bin/test -z "${MM_X_OUTPUT_VGA}" ; then
        MM_X_OUTPUT_VGA='none'
    fi
    if /usr/bin/test -z "${MM_X_OUTPUT_TV}"  ; then
        MM_X_OUTPUT_TV='none'
    fi
    if /usr/bin/test !    "${MM_X_OUTPUT_DVI}" = "none"                                  && \
       /usr/bin/test !    "${MM_X_OUTPUT_DVI}" = "auto"                                  && \
       ! /bin/echo ${MM_X_OUTPUT_DVI} | /bin/grep -q -e '^[0-9]*$' > /dev/null 2>&1 ; then
        mm_message_output err "error: MM_X_OUTPUT_DVI='${MM_X_OUTPUT_DVI}' is not valid."
    fi
    if /usr/bin/test !    "${MM_X_OUTPUT_VGA}" = "none"                                  && \
       /usr/bin/test !    "${MM_X_OUTPUT_VGA}" = "auto"                                  && \
       ! /bin/echo ${MM_X_OUTPUT_VGA} | /bin/grep -q -e '^[0-9]*$' > /dev/null 2>&1 ; then
        mm_message_output err "error: MM_X_OUTPUT_VGA='${MM_X_OUTPUT_VGA}' is not valid."
    fi
    if /usr/bin/test !    "${MM_X_OUTPUT_TV}" = "none"                                  && \
       /usr/bin/test !    "${MM_X_OUTPUT_TV}" = "auto"                                  && \
       ! /bin/echo ${MM_X_OUTPUT_TV} | /bin/grep -q -e '^[0-9]*$' > /dev/null 2>&1 ; then
        mm_message_output err "error: MM_X_OUTPUT_TV='${MM_X_OUTPUT_TV}' is not valid."
    fi
    case ${MM_X_DRIVER} in
        nvidia)
            # Make sure no more than one output is enabled.
            output_count=`/bin/echo "${MM_X_OUTPUT_DVI} ${MM_X_OUTPUT_VGA} ${MM_X_OUTPUT_TV}" | /bin/sed 's%none%%g' | /usr/bin/wc -w`
            if /usr/bin/test ${output_count} -gt 1 ; then
                mm_message_output err "error: only one of 'MM_X_OUTPUT_DVI', 'MM_X_OUTPUT_VGA' and 'MM_X_OUTPUT_TV' can be active."
            fi
            ;;
    esac

    if /usr/bin/test -z "${MM_X_TV_TYPE}"                  ; then
        MM_X_TV_TYPE='HD1080p';
    fi
    if /usr/bin/test -z "${MM_X_TV_OUTPUT}"                ; then
        MM_X_TV_OUTPUT='AUTOSELECT'
    fi
    if /usr/bin/test -z "${MM_X_TV_OVERSCAN}"              ; then
        MM_X_TV_OVERSCAN='0.0'
    fi
    if /usr/bin/test -z "${MM_X_ENABLED}"                  ; then
        MM_X_ENABLED='yes'
    fi
    if /usr/bin/test -z "${MM_X_RESTART_ON_SLEEP_ENABLED}" ; then
        MM_X_RESTART_ON_SLEEP_ENABLED='no'
    fi
    if /usr/bin/test -z "${MM_X_WM_ENABLED}"               ; then
        MM_X_WM_ENABLED='yes'
    fi
    if /usr/bin/test -z "${MM_X_VNC_ENABLED}"              ; then
        MM_X_VNC_ENABLED='yes'
    fi
    if /usr/bin/test -z "${MM_X_SCREENSAVER}"              ; then
        MM_X_SCREENSAVER='xscreensaver'
    fi
    if /usr/bin/test -z "${MM_X_SCREENSAVER_TIMEOUT}"      ; then
        MM_X_SCREENSAVER_TIMEOUT='10'
    fi
    if /usr/bin/test -z "${MM_X_SCREENSAVER_HACK}"         ; then
        MM_X_SCREENSAVER_HACK='sleep'
    fi
    if /usr/bin/test -z "${MM_X_MYTH_PROGRAM}"             ; then
        MM_X_MYTH_PROGRAM='mythfrontend'
    fi

    # X display variables.
    # Auto-configure MM_X_SYNC, MM_X_REFRESH and MM_X_MODE.
    /usr/bin/test "${MM_X_MODE}"   = "auto" && MM_X_MODE=''
    /usr/bin/test "${MM_X_MODE_0}" = "auto" && MM_X_MODE_0=''
    /usr/bin/test "${MM_X_MODE_1}" = "auto" && MM_X_MODE_1=''
    /usr/bin/test "${MM_X_MODE_2}" = "auto" && MM_X_MODE_2=''
    if /usr/bin/test "${MM_VIDEO_RESIZE_ENABLED}" = "yes" ; then
        case "${MM_VIDEO_ASPECT_RATIO}" in
            4:3)
                ;;
            16:9)
                case "${MM_X_TV_TYPE}" in
                    NTSC|NTSC-J|NTSC-M)
                        /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='58.0-62.0,118.0-122.0'
                        /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE="1280x720"
                        /usr/bin/test -z "${MM_X_MODE_0}"  && MM_X_MODE_0="1920x1080"
                        /usr/bin/test -z "${MM_X_MODE_1}"  && MM_X_MODE_1="1280x720"
                        /usr/bin/test -z "${MM_X_MODE_2}"  && MM_X_MODE_2="720x480"
                        ;;
                    PAL|PAL-B|PAL-D|PAL-G|PAL-H|PAL-I|PAL-K1|PAL-M|PAL-N|PAL-NC)
                        ;;
                    HD480i)
                        /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='48.0-62.0,90.0-122.0'
                        /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE="720x480"
                        /usr/bin/test -z "${MM_X_MODE_0}"  && MM_X_MODE_0="720x480"
                        /usr/bin/test -z "${MM_X_MODE_1}"  && MM_X_MODE_1="none"
                        /usr/bin/test -z "${MM_X_MODE_2}"  && MM_X_MODE_2="none"
                        ;;
                    480P|HD480p)
                        /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='58.0-62.0,118.0-122.0'
                        /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE="720x480"
                        /usr/bin/test -z "${MM_X_MODE_0}"  && MM_X_MODE_0="720x480"
                        /usr/bin/test -z "${MM_X_MODE_1}"  && MM_X_MODE_1="none"
                        /usr/bin/test -z "${MM_X_MODE_2}"  && MM_X_MODE_2="none"
                        ;;
                    720P|HD720p)
                        /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='20.0-70.0'
                        /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE="1380x768"
                        /usr/bin/test -z "${MM_X_MODE_0}"  && MM_X_MODE_0="1380x768"
                        /usr/bin/test -z "${MM_X_MODE_1}"  && MM_X_MODE_1="720x576"
                        /usr/bin/test -z "${MM_X_MODE_2}"  && MM_X_MODE_2="none"
                        ;;
                    1080I|HD1080i)
                        /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='20.0-70.0,90.0-122.0'
                        /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE="1920x1080"
                        /usr/bin/test -z "${MM_X_MODE_0}"  && MM_X_MODE_0="1920x1080"
                        /usr/bin/test -z "${MM_X_MODE_1}"  && MM_X_MODE_1="1380x768"
                        /usr/bin/test -z "${MM_X_MODE_2}"  && MM_X_MODE_2="720x576"
                        ;;
                    HD1080p)
                        /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='20.0-70.0,90.0-122.0'
                        /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE="1920x1080"
                        /usr/bin/test -z "${MM_X_MODE_0}"  && MM_X_MODE_0="1920x1080"
                        /usr/bin/test -z "${MM_X_MODE_1}"  && MM_X_MODE_1="1360x768"
                        /usr/bin/test -z "${MM_X_MODE_2}"  && MM_X_MODE_2="720x576"
                        ;;
                    HD576i)
                        ;;
                    576P|HD576p)
                        ;;
                esac
                ;;
            16:10)
                ;;
            *)
                ;;
        esac
    fi

    # Use default values for DVI. If there is VGA or TV enabled, then those
    # values will be overided. This is for situation where all minimyth.conf
    # variables MM_X_OUTPUT_DVI/VGA/TV are non defined (so internally they 
    # have values 'none'. Xorg.conf will have enpty string in "ConnectedMonitor" which
    # is preferable by Nvidia documentation.
    /usr/bin/test -z "${MM_X_SYNC}"    && MM_X_SYNC='10.0-170.0'
    /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='22.0-86.0'

    if /usr/bin/test ! "${MM_X_OUTPUT_VGA}" = "none" ; then
        # Use default MythTV size.
        case ${MM_VIDEO_ASPECT_RATIO} in
            4:3)
                /usr/bin/test -z "${MM_X_SYNC}"    && MM_X_SYNC='10.0-70.0'
                /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='60.0'
                ;;
            16:9)
                /usr/bin/test -z "${MM_X_SYNC}"    && MM_X_SYNC='10.0-70.0'
                /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='60.0'
                ;;
            16:10)
                /usr/bin/test -z "${MM_X_SYNC}"    && MM_X_SYNC='10.0-70.0'
                /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='60.0'
                ;;
            *)
                mm_message_output err "error: the 'x' init script does not understand MM_VIDEO_ASPECT_RATIO='${MM_VIDEO_ASPECT_RATIO}'."
                ;;
        esac
    elif /usr/bin/test ! "${MM_X_OUTPUT_TV}"  = "none" ; then
        MM_X_REFRESH=
        case "${MM_X_TV_TYPE}" in
            NTSC|NTSC-J|NTSC-M)
                /usr/bin/test -z "${MM_X_SYNC}"    && MM_X_SYNC='10.0-70.0'
                /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='60.0'
                /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE='720x480'
                ;;
            PAL|PAL-B|PAL-D|PAL-G|PAL-H|PAL-I|PAL-K1|PAL-M|PAL-N|PAL-NC)
                /usr/bin/test -z "${MM_X_SYNC}"    && MM_X_SYNC='10.0-70.0'
                /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='50.0'
                /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE='720x576'
                ;;
            HD480i)
                /usr/bin/test -z "${MM_X_SYNC}"    && MM_X_SYNC='10.0-70.0'
                /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='50.0'
                /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE='720x480'
                ;;
            480P|HD480p)
                /usr/bin/test -z "${MM_X_SYNC}"    && MM_X_SYNC='10.0-70.0'
                /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='50.0'
                /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE='720x480'
                ;;
            720P|HD720p)
                /usr/bin/test -z "${MM_X_SYNC}"    && MM_X_SYNC='10.0-70.0'
                /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='50.0'
                /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE='1360x768'
                ;;
            1080I|HD1080i)
                /usr/bin/test -z "${MM_X_SYNC}"    && MM_X_SYNC='10.0-70.0'
                /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='50.0'
                /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE='1920x1080'
                ;;
            HD1080p)
                /usr/bin/test -z "${MM_X_SYNC}"    && MM_X_SYNC='10.0-70.0'
                /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='50.0'
                /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE='1920x1080'
                ;;
            HD576i)
                /usr/bin/test -z "${MM_X_SYNC}"    && MM_X_SYNC='10.0-70.0'
                /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='50.0'
                /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE='852x576'
                ;;
            576P|HD576p)
                /usr/bin/test -z "${MM_X_SYNC}"    && MM_X_SYNC='10.0-70.0'
                /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='50.0'
                /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE='852x576'
                ;;
            *)
                mm_message_output err "error: the 'x' init script does not understand MM_X_TV_TYPE='${MM_X_TV_TYPE}'."
                ;;
        esac
    fi

    # Auto-configure (or override) MM_X_MODE based on MM_X_MODELINE.
    if /usr/bin/test -n "${MM_X_MODELINE}" ; then
        if ! /bin/echo ${MM_X_MODELINE} | /bin/grep -q -e '^[Mm][Oo][Dd][Ee][Ll][Ii][Nn][Ee]  *"[0-9][0-9]*[Xx][0-9][^"]*".*' > /dev/null 2>&1 ; then
            mm_message_output err "error: 'MM_X_MODELINE' format is not valid."
        fi
        MM_X_MODE=`/bin/echo ${MM_X_MODELINE} | /bin/sed 's%^[Mm][Oo][Dd][Ee][Ll][Ii][Nn][Ee]  *"\([0-9][0-9]*[Xx][0-9][^"]*\)".*%\1%'`
    fi
    if /usr/bin/test -n "${MM_X_MODELINE_0}" ; then
        if ! /bin/echo ${MM_X_MODELINE_0} | /bin/grep -q -e '^[Mm][Oo][Dd][Ee][Ll][Ii][Nn][Ee]  *"[0-9][0-9]*[Xx][0-9][^"]*".*' > /dev/null 2>&1 ; then
            mm_message_output err "error: 'MM_X_MODELINE_0' format is not valid."
        fi
        MM_X_MODE_0=`/bin/echo ${MM_X_MODELINE_0} | /bin/sed 's%^[Mm][Oo][Dd][Ee][Ll][Ii][Nn][Ee]  *"\([0-9][0-9]*[Xx][0-9][^"]*\)".*%\1%'`
    fi
    if /usr/bin/test -n "${MM_X_MODELINE_1}" ; then
        if ! /bin/echo ${MM_X_MODELINE_1} | /bin/grep -q -e '^[Mm][Oo][Dd][Ee][Ll][Ii][Nn][Ee]  *"[0-9][0-9]*[Xx][0-9][^"]*".*' > /dev/null 2>&1 ; then
            mm_message_output err "error: 'MM_X_MODELINE_1' format is not valid."
        fi
        MM_X_MODE_1=`/bin/echo ${MM_X_MODELINE_1} | /bin/sed 's%^[Mm][Oo][Dd][Ee][Ll][Ii][Nn][Ee]  *"\([0-9][0-9]*[Xx][0-9][^"]*\)".*%\1%'`
    fi
    if /usr/bin/test -n "${MM_X_MODELINE_2}" ; then
        if ! /bin/echo ${MM_X_MODELINE_2} | /bin/grep -q -e '^[Mm][Oo][Dd][Ee][Ll][Ii][Nn][Ee]  *"[0-9][0-9]*[Xx][0-9][^"]*".*' > /dev/null 2>&1 ; then
            mm_message_output err "error: 'MM_X_MODELINE_2' format is not valid."
        fi
        MM_X_MODE_2=`/bin/echo ${MM_X_MODELINE_2} | /bin/sed 's%^[Mm][Oo][Dd][Ee][Ll][Ii][Nn][Ee]  *"\([0-9][0-9]*[Xx][0-9][^"]*\)".*%\1%'`
    fi

    # Auto-configure (or override) MM_X_MODE and MM_X_MODELINE based on MM_X_RESOLUTION.
    if /usr/bin/test -n "${MM_X_RESOLUTION}" ; then
        if ! /bin/echo ${MM_X_RESOLUTION} | /bin/grep -q -e '^[0-9][0-9]*x[0-9][0-9]*' > /dev/null 2>&1 ; then
            mm_message_output err "error: 'MM_X_RESOLUTION' format is not valid."
        fi
        X_RESOLUTION_X=`/bin/echo ${MM_X_RESOLUTION} | /bin/sed -e 's%^\([0-9][0-9]*\)x\([0-9][0-9]*\)$%\1%'`
        X_RESOLUTION_Y=`/bin/echo ${MM_X_RESOLUTION} | /bin/sed -e 's%^\([0-9][0-9]*\)x\([0-9][0-9]*\)$%\2%'`
        MM_X_MODELINE=`/usr/bin/gtf ${X_RESOLUTION_X} ${X_RESOLUTION_Y} ${MM_X_REFRESH} | /bin/sed 's% *#.*%%'`
        MM_X_MODELINE=`/bin/echo ${MM_X_MODELINE}`
        MM_X_MODE=`/bin/echo ${MM_X_MODELINE} | /bin/sed 's%^[Mm][Oo][Dd][Ee][Ll][Ii][Nn][Ee]  *"\([0-9][0-9]*[Xx][0-9][^"]*\)".*%\1%'`
    fi

    # Auto-configure MM_X_RESOLUTION based on MM_X_MODE or on MM_X_TV_TYPE if MM_X_MODE is empty.
    if /usr/bin/test -z "${MM_X_RESOLUTION}" ; then
        if /usr/bin/test -n "${MM_X_MODE}" ; then
            if ! /bin/echo ${MM_X_MODE} | /bin/grep -q -e '^[0-9][0-9]*[Xx][0-9].*' > /dev/null 2>&1 ; then
                mm_message_output err "error: 'MM_X_MODE' format is not valid."
            fi
            MM_X_RESOLUTION=`/bin/echo ${MM_X_MODE} | /bin/sed -e 's%^\([0-9][0-9]*\)[Xx]\([0-9][0-9]*\).*%\1x\2%'`
        else
            case "${MM_X_TV_TYPE}" in
                NTSC|NTSC-J|NTSC-M)
                    MM_X_RESOLUTION='720x480'
                    ;;
                PAL|PAL-B|PAL-D|PAL-G|PAL-H|PAL-I|PAL-K1|PAL-M|PAL-N|PAL-NC)
                    MM_X_RESOLUTION='720x576'
                    ;;
                HD480i)
                    MM_X_RESOLUTION='720x480'
                    ;;
                480P|HD480p)
                    MM_X_RESOLUTION='720x480'
                    ;;
                720P|HD720p)
                    MM_X_RESOLUTION='1360x768'
                    ;;
                1080I|HD1080i)
                    MM_X_RESOLUTION='1920x1080'
                    ;;
                HD1080p)
                    MM_X_RESOLUTION='1920x1080'
                    ;;
                HD576i)
                    MM_X_RESOLUTION='852x576'
                    ;;
                576P|HD576p)
                    MM_X_RESOLUTION='852x576'
                    ;;
                *)
                    mm_message_output err "error: the 'x' init script does not understand MM_X_TV_TYPE='${MM_X_TV_TYPE}'."
                    ;;
            esac
        fi
    fi

    # Auto-configure MM_X_VIRTUAL based on MM_X_MODE.
    if /usr/bin/test -z "${MM_X_VIRTUAL}" ; then
        X_VIRTUAL_X=0
        X_VIRTUAL_Y=0
        if /usr/bin/test ! -z "${MM_X_MODE}"   && /usr/bin/test ! "${MM_X_MODE}"   = "none" ; then
            X_RESOLUTION_X=`/bin/echo ${MM_X_MODE}     | /bin/sed -e 's%^\([0-9][0-9]*\)[Xx]\([0-9][0-9]*\).*%\1%'`
            X_RESOLUTION_Y=`/bin/echo ${MM_X_MODE}     | /bin/sed -e 's%^\([0-9][0-9]*\)[Xx]\([0-9][0-9]*\).*%\2%'`
            if /usr/bin/test ${X_VIRTUAL_X} -lt ${X_RESOLUTION_X} ; then
                X_VIRTUAL_X=${X_RESOLUTION_X}
            fi
            if /usr/bin/test ${X_VIRTUAL_Y} -lt ${X_RESOLUTION_Y} ; then
                X_VIRTUAL_Y=${X_RESOLUTION_Y}
            fi
        fi
        if /usr/bin/test ! -z "${MM_X_MODE_0}" && /usr/bin/test ! "${MM_X_MODE_0}" = "none" ; then
            X_RESOLUTION_X=`/bin/echo ${MM_X_MODE_0} | /bin/sed -e 's%^\([0-9][0-9]*\)[Xx]\([0-9][0-9]*\).*%\1%'`
            X_RESOLUTION_Y=`/bin/echo ${MM_X_MODE_0} | /bin/sed -e 's%^\([0-9][0-9]*\)[Xx]\([0-9][0-9]*\).*%\2%'`
            if /usr/bin/test ${X_VIRTUAL_X} -lt ${X_RESOLUTION_X} ; then
                X_VIRTUAL_X=${X_RESOLUTION_X}
            fi
            if /usr/bin/test ${X_VIRTUAL_Y} -lt ${X_RESOLUTION_Y} ; then
                X_VIRTUAL_Y=${X_RESOLUTION_Y}
            fi
        fi
        if /usr/bin/test ! -z "${MM_X_MODE_1}" && /usr/bin/test ! "${MM_X_MODE_1}" = "none" ; then
            X_RESOLUTION_X=`/bin/echo ${MM_X_MODE_1} | /bin/sed -e 's%^\([0-9][0-9]*\)[Xx]\([0-9][0-9]*\).*%\1%'`
            X_RESOLUTION_Y=`/bin/echo ${MM_X_MODE_1} | /bin/sed -e 's%^\([0-9][0-9]*\)[Xx]\([0-9][0-9]*\).*%\2%'`
            if /usr/bin/test ${X_VIRTUAL_X} -lt ${X_RESOLUTION_X} ; then
                X_VIRTUAL_X=${X_RESOLUTION_X}
            fi
            if /usr/bin/test ${X_VIRTUAL_Y} -lt ${X_RESOLUTION_Y} ; then
                X_VIRTUAL_Y=${X_RESOLUTION_Y}
            fi
        fi
        if /usr/bin/test ! -z "${MM_X_MODE_2}" && /usr/bin/test ! "${MM_X_MODE_2}" = "none" ; then
            X_RESOLUTION_X=`/bin/echo ${MM_X_MODE_2} | /bin/sed -e 's%^\([0-9][0-9]*\)[Xx]\([0-9][0-9]*\).*%\1%'`
            X_RESOLUTION_Y=`/bin/echo ${MM_X_MODE_2} | /bin/sed -e 's%^\([0-9][0-9]*\)[Xx]\([0-9][0-9]*\).*%\2%'`
            if /usr/bin/test ${X_VIRTUAL_X} -lt ${X_RESOLUTION_X} ; then
                X_VIRTUAL_X=${X_RESOLUTION_X}
            fi
            if /usr/bin/test ${X_VIRTUAL_Y} -lt ${X_RESOLUTION_Y} ; then
                X_VIRTUAL_Y=${X_RESOLUTION_Y}
            fi
        fi
        MM_X_VIRTUAL="${X_VIRTUAL_X}x${X_VIRTUAL_Y}"
    fi

    # Auto-configure MM_X_DISPLAYSIZE based on MM_X_VIRTUAL.
    if /usr/bin/test -z "${MM_X_DISPLAYSIZE}" || /usr/bin/test "${MM_X_DISPLAYSIZE}" = "auto" ; then
        X_VIRTUAL_X=`/bin/echo ${MM_X_VIRTUAL} | /bin/sed -e 's%^\([0-9][0-9]*\)[Xx]\([0-9][0-9]*\).*%\1%'`
        X_VIRTUAL_Y=`/bin/echo ${MM_X_VIRTUAL} | /bin/sed -e 's%^\([0-9][0-9]*\)[Xx]\([0-9][0-9]*\).*%\2%'`

        # MythTV is reported to work best at 100dots/inch.
        # (100dots/inch) / (25.4inch/mm) ~ 4dots/mm
        # Y in mm = (Y in dots) / (4dots/mm)
        # Make Y a multiple of 3 (for 4:3), 9 (for 16:9) or 10 (for 16:10) so that X will be a whole number.
        X_DISPLAYSIZE_Y=
        X_DISPLAYSIZE_X=
        MM_X_DISPLAYSIZE=
        if /usr/bin/test ! ${MM_VIDEO_FONT_SCALE} -gt 0 ; then
            mm_message_output err "error: the 'x' init script does not understand MM_VIDEO_FONT_SCALE='${MM_VIDEO_FONT_SCALE}'."
        fi
        case ${MM_VIDEO_ASPECT_RATIO} in
            4:3)
                X_DISPLAYSIZE_Y=$(($(($((${X_VIRTUAL_Y} * 100 / ${MM_VIDEO_FONT_SCALE} / 4)) /  3)) *  3))
                X_DISPLAYSIZE_X=$((${X_DISPLAYSIZE_Y} *  4 /  3))
                MM_X_DISPLAYSIZE=${X_DISPLAYSIZE_X}x${X_DISPLAYSIZE_Y}
                ;;
            16:9)
                X_DISPLAYSIZE_Y=$(($(($((${X_VIRTUAL_Y} * 100 / ${MM_VIDEO_FONT_SCALE} / 4)) /  9)) *  9))
                X_DISPLAYSIZE_X=$((${X_DISPLAYSIZE_Y} * 16 /  9))
                MM_X_DISPLAYSIZE=${X_DISPLAYSIZE_X}x${X_DISPLAYSIZE_Y}
                ;;
            16:10)
                X_DISPLAYSIZE_Y=$(($(($((${X_VIRTUAL_Y} * 100 / ${MM_VIDEO_FONT_SCALE} / 4)) / 10)) * 10))
                X_DISPLAYSIZE_X=$((${X_DISPLAYSIZE_Y} * 16 / 10))
                MM_X_DISPLAYSIZE=${X_DISPLAYSIZE_X}x${X_DISPLAYSIZE_Y}
                ;;
            *)
                mm_message_output err "error: the 'x' init script does not understand MM_VIDEO_ASPECT_RATIO='${MM_VIDEO_ASPECT_RATIO}'."
                ;;
        esac
    fi

    # Convert single valued MM_X_SYNC values to small range.
    if /bin/echo ${MM_X_SYNC} | /bin/grep -q -e '^[0-9][0-9]*\(\.[0-9]*\)\?$' > /dev/null 2>&1 ; then
        if /bin/echo ${MM_X_SYNC} | /bin/grep -q -e '^[0-9][0-9]*$' > /dev/null 2>&1 ; then
            MM_X_SYNC="${MM_X_SYNC}.0"
        fi
        MM_X_SYNC_M=`/bin/echo ${MM_X_SYNC} | /usr/bin/cut -d . -f 1`
        MM_X_SYNC_N=`/bin/echo ${MM_X_SYNC} | /usr/bin/cut -d . -f 2`
        MM_X_SYNC="$((${MM_X_SYNC_M}-2)).${MM_X_SYNC_N}-$((${MM_X_SYNC_M}+2)).${MM_X_SYNC_N}"
    fi

    # Convert single valued MM_X_REFRESH values to small range.
    if /bin/echo ${MM_X_REFRESH} | /bin/grep -q -e '^[0-9][0-9]*\(\.[0-9]*\)\?$' > /dev/null 2>&1 ; then
        if /bin/echo ${MM_X_REFRESH} | /bin/grep -q -e '^[0-9][0-9]*$' > /dev/null 2>&1 ; then
            MM_X_REFRESH="${MM_X_REFRESH}.0"
        fi
        MM_X_REFRESH_M=`/bin/echo ${MM_X_REFRESH} | /usr/bin/cut -d . -f 1`
        MM_X_REFRESH_N=`/bin/echo ${MM_X_REFRESH} | /usr/bin/cut -d . -f 2`
        MM_X_REFRESH="$((${MM_X_REFRESH_M}-2)).${MM_X_REFRESH_N}-$((${MM_X_REFRESH_M}+2)).${MM_X_REFRESH_N}"
    fi

    MM_X_SYNC="HorizSync ${MM_X_SYNC}"
    MM_X_REFRESH="VertRefresh ${MM_X_REFRESH}"

    # Default fetch variables.
    if /usr/bin/test -z "${MM_X_FETCH_XINITRC}"   ; then
        MM_X_FETCH_XINITRC='no'
    fi
    if /usr/bin/test -z "${MM_X_FETCH_XORG_CONF}" ; then
        MM_X_FETCH_XORG_CONF='no'
    fi
    if /usr/bin/test -z "${MM_X_MYTH_RSS_FOR_X_RESTART}" ; then
        MM_X_MYTH_RSS_FOR_X_RESTART='60'
    fi
    if /usr/bin/test -z "${MM_X_WATCHDOG_MYTH_PROC}" ; then
        MM_X_WATCHDOG_MYTH_PROC='yes'
    fi
    if /usr/bin/test -z "${MM_X_VDPAU_ENV}" ; then
        MM_X_VDPAU_ENV=''
    fi
    if /usr/bin/test -z "${MM_RESTART_ON_SLEEP}" ; then
        MM_RESTART_ON_SLEEP='mythfrontend'
    fi
    /bin/mkdir -p '/tmp/init.conf.x'
    /bin/touch    '/tmp/init.conf.x/conf_default_MM_X'

    return 0
}

conf_write_MM_X() {
    local conf_file=$1

    conf_variable_write "${conf_file}" MM_X_KBD_DEVICE                  "${MM_X_KBD_DEVICE}"
    conf_variable_write "${conf_file}" MM_X_MOUSE_DEVICE                "${MM_X_MOUSE_DEVICE}"

    conf_variable_write "${conf_file}" MM_X_DRIVER                      "${MM_X_DRIVER}"
    conf_variable_write "${conf_file}" MM_X_HW_TYPE                     "${MM_X_HW_TYPE}"

    conf_variable_write "${conf_file}" MM_X_ENABLED                     "${MM_X_ENABLED}"
    conf_variable_write "${conf_file}" MM_X_RESTART_ON_SLEEP_ENABLED    "${MM_X_RESTART_ON_SLEEP_ENABLED}"
    conf_variable_write "${conf_file}" MM_X_WM_ENABLED                  "${MM_X_WM_ENABLED}"
    conf_variable_write "${conf_file}" MM_X_VNC_ENABLED                 "${MM_X_VNC_ENABLED}"
    conf_variable_write "${conf_file}" MM_X_SCREENSAVER                 "${MM_X_SCREENSAVER}"
    conf_variable_write "${conf_file}" MM_X_SCREENSAVER_TIMEOUT         "${MM_X_SCREENSAVER_TIMEOUT}"
    conf_variable_write "${conf_file}" MM_X_SCREENSAVER_HACK            "${MM_X_SCREENSAVER_HACK}"
    conf_variable_write "${conf_file}" MM_X_MYTH_PROGRAM                "${MM_X_MYTH_PROGRAM}"

    conf_variable_write "${conf_file}" MM_X_OUTPUT_DVI                  "${MM_X_OUTPUT_DVI}"
    conf_variable_write "${conf_file}" MM_X_OUTPUT_VGA                  "${MM_X_OUTPUT_VGA}"
    conf_variable_write "${conf_file}" MM_X_OUTPUT_TV                   "${MM_X_OUTPUT_TV}"

    conf_variable_write "${conf_file}" MM_X_TV_TYPE                     "${MM_X_TV_TYPE}"
    conf_variable_write "${conf_file}" MM_X_TV_OUTPUT                   "${MM_X_TV_OUTPUT}"
    conf_variable_write "${conf_file}" MM_X_TV_OVERSCAN                 "${MM_X_TV_OVERSCAN}"

    conf_variable_write "${conf_file}" MM_X_SYNC                        "${MM_X_SYNC}"
    conf_variable_write "${conf_file}" MM_X_REFRESH                     "${MM_X_REFRESH}"
    conf_variable_write "${conf_file}" MM_X_RESOLUTION                  "${MM_X_RESOLUTION}"
    conf_variable_write "${conf_file}" MM_X_MODELINE                    "${MM_X_MODELINE}"
    conf_variable_write "${conf_file}" MM_X_MODELINE_0                  "${MM_X_MODELINE_0}"
    conf_variable_write "${conf_file}" MM_X_MODELINE_1                  "${MM_X_MODELINE_1}"
    conf_variable_write "${conf_file}" MM_X_MODELINE_2                  "${MM_X_MODELINE_2}"
    conf_variable_write "${conf_file}" MM_X_MODE                        "${MM_X_MODE}"
    conf_variable_write "${conf_file}" MM_X_MODE_0                      "${MM_X_MODE_0}"
    conf_variable_write "${conf_file}" MM_X_MODE_1                      "${MM_X_MODE_1}"
    conf_variable_write "${conf_file}" MM_X_MODE_2                      "${MM_X_MODE_2}"
    conf_variable_write "${conf_file}" MM_X_VIRTUAL                     "${MM_X_VIRTUAL}"
    conf_variable_write "${conf_file}" MM_X_DISPLAYSIZE                 "${MM_X_DISPLAYSIZE}"

    conf_variable_write "${conf_file}" MM_X_HACK_HIDE_BLUE_LINE_ENABLED "${MM_X_HACK_HIDE_BLUE_LINE_ENABLED}"

    conf_variable_write "${conf_file}" MM_X_FETCH_XINITRC               "${MM_X_FETCH_XINITRC}"
    conf_variable_write "${conf_file}" MM_X_FETCH_XORG_CONF             "${MM_X_FETCH_XORG_CONF}"
    conf_variable_write "${conf_file}" MM_X_MYTH_RSS_FOR_X_RESTART      "${MM_X_MYTH_RSS_FOR_X_RESTART}"
    conf_variable_write "${conf_file}" MM_X_WATCHDOG_MYTH_PROC          "${MM_X_WATCHDOG_MYTH_PROC}"
    conf_variable_write "${conf_file}" MM_X_VDPAU_ENV                   "${MM_X_VDPAU_ENV}"
    conf_variable_write "${conf_file}" MM_RESTART_ON_SLEEP              "${MM_RESTART_ON_SLEEP}" 
    return 0
}

conf_fetch_MM_X() {
    if /usr/bin/test "${MM_X_FETCH_XINITRC}"   = "yes" ; then
        /bin/rm -f /etc/X11/xinit/xinitrc
        mm_confro_get /xinitrc /etc/X11/xinit/xinitrc
        if /usr/bin/test ! -e /etc/X11/xinit/xinitrc ; then
            mm_message_output err "error: failed to fetch 'minimyth.script' file."
        fi
    fi
    if /usr/bin/test "${MM_X_FETCH_XORG_CONF}" = "yes" ; then
        /bin/rm -f /etc/X11/xorg.conf
        mm_confro_get /xorg.conf /etc/X11/xorg.conf
        if /usr/bin/test ! -e /etc/X11/xorg.conf ; then
            mm_message_output err "error: failed to fetch 'minimyth.script' file."
        fi
    fi

    return 0
}
