#!/bin/sh
################################################################################
# lirc
#
# This script configures and starts LIRC.
################################################################################
. /etc/rc.d/functions

start() {

    local daemon
    local daemon_master
    local delay
    local device
    local device_count
    local device_item
    local driver
    local file
    local index
    local instance
    local lircd_conf
    local map

    # Count the LIRC devices.
    device_count=0
    for device_item in ${MM_LIRC_DEVICE_LIST} ; do
        device_count=$((${device_count}+1))
    done

    # There are no remote control devices, so there is no need to continue.
    if /usr/bin/test ${device_count} -eq 0 ; then
        return
    fi

    mm_message_output info "starting remote control(s) ..."

    # Load user configured kernel module.
    if /usr/bin/test -n "${MM_LIRC_KERNEL_MODULE}" ; then
        /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/lirc] Loading user configured kernel module ${MM_LIRC_KERNEL_MODULE} with opt:${MM_LIRC_KERNEL_MODULE_OPTIONS}"
        /sbin/modprobe ${MM_LIRC_KERNEL_MODULE} ${MM_LIRC_KERNEL_MODULE_OPTIONS}
        # Wait up to 60 seconds for the device to appear in the device file system.
        delay=0
        while /usr/bin/test ! -e ${MM_LIRC_DEVICE} && /usr/bin/test ${delay} -lt 60 ; do
            /bin/sleep 1
            delay=$((delay + 1))
            mm_message_output info "waiting for remote control device (${delay} seconds) ..."
        done
        if /usr/bin/test ! -e ${MM_LIRC_DEVICE} ; then
            mm_message_output err "error: timed out waiting for remote control device."
            exit 1
        fi
    fi

    # Determine master LIRC daemon.
    # The master LIRC daemon combines the LIRC daemons for multiple LIRC devices.
    # Therefore, if there is more than one LIRC device, then we need a master LIRC daemon.
    daemon_master=
    if /usr/bin/test ${device_count} -gt 1 ; then
        /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/lirc] More than 1 LIRC daemons.Detected:${device_count}"
        daemon_master="/usr/sbin/lircd"
        daemon_master="${daemon_master} --driver=null"
        daemon_master="${daemon_master} --output=/var/run/lirc/lircd --pidfile=/var/run/lircd.pid"
        index=1
        while /usr/bin/test ${index} -le ${device_count} ; do
            /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/lirc] Connecting daemon ${index} on port:$((8765 + ${index} - 1))"
            daemon_master="${daemon_master} --connect=localhost:$((8765 + ${index} - 1))"
            index=$((${index} + 1))
        done
    fi

    # If there is no lircd.conf file, then create it.
    if /usr/bin/test ! -e /etc/lircd.conf ; then
        /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/lirc] Will use build-in lircd.conf..."
        /bin/echo "# autogenerated" >> /etc/lircd.conf
        for file in `/bin/ls /etc/lirc.d/lircd.conf.d/lircd.conf.* 2> /dev/null` ; do
            /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/lirc] lircd.conf: adding ${file}"
            /bin/echo "include <${file}>" >> /etc/lircd.conf
        done
        if /usr/bin/test -n "${MM_EXTERNAL_AMPLI_POWER_ENABLED}" || \
           /usr/bin/test -n "${MM_EXTERNAL_TV_POWER_ENABLED}" ; then
            /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/lirc] Adding external equipment support in lircd.conf..."
            for file in `/bin/ls /etc/lirc.d/irblaster.conf.d/lircd.conf.* 2> /dev/null` ; do
                /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/lirc] lircd.conf: adding ${file}"
                /bin/echo "include <${file}>" >> /etc/lircd.conf
            done
        fi
    fi

    # If there is no lircrc file, then create it.
    if /usr/bin/test ! -e /etc/lircrc ; then
        /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/lirc] Will use build-in lircrc..."
        /bin/echo "# autogenerated" >> /etc/lircrc
        /bin/echo "include /etc/lirc.d/lircrc" >> /etc/lircrc
        if /usr/bin/test "${MM_LIRC_SLEEP_ENABLED}" = "yes" ; then
            /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/lirc] Including in lircrc KEY_POWER as sleep button..."
            /bin/echo "include /etc/lirc.d/lircrc.power.sleep" >> /etc/lircrc
        fi
        if /usr/bin/test "${MM_EXTERNAL_VOLUME_ENABLED}" = "yes" ; then
            /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/lirc] Defining in lircrc KEY_VOLUMEUP[DOWN] for irblaster..."
            /bin/echo "include /etc/lirc.d/lircrc.volume.external" >> /etc/lircrc
        else
            /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/lirc] Defining in lircrc KEY_VOLUMEUP[DOWN] for internal vol.ctrl..."
            /bin/echo "include /etc/lirc.d/lircrc.volume.internal" >> /etc/lircrc
        fi
        for file in `/bin/ls /etc/lirc.d/lircrc.d/lircrc.* 2> /dev/null` ; do
            /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/lirc] lircrc: adding ${file}"
            /bin/echo "include ${file}" >> /etc/lircrc
        done
    fi

    # Create directories used by the LIRC daemon.
    /bin/mkdir -p /var/lock
    /bin/mkdir -p /var/run/lirc

    # Start an LIRC daemon for each device.
    index=1
    for device_item in ${MM_LIRC_DEVICE_LIST} ; do
        device=`/bin/echo ${device_item} | /usr/bin/cut -d ',' -f1`
        driver=`/bin/echo ${device_item} | /usr/bin/cut -d ',' -f2`

        # Convert driver to the the lirc daemon appropriate driver.
        if /usr/bin/test -n "${driver}" ; then
            driver=`/usr/sbin/lircd --driver=help 2>&1 | /bin/sed -e 's%[[:cntrl:]]%%g' | /bin/grep -i -e "^${driver}$"`
            if /usr/bin/test -z "${driver}" ; then
                driver="default"
            fi
        fi

        # Start daemon.
        daemon=
        instance=`/bin/echo ${device} | /bin/sed -e 's%//*%~%g' | /bin/sed -e 's%^~dev~%%'`
        if /usr/bin/test -n "${daemon_master}" ; then
            daemon="/usr/sbin/lircd"
            daemon="${daemon} --device=${device} --driver=${driver}"
            daemon="${daemon} --output=/var/run/lirc/lircd-${instance} --pidfile=/var/run/lircd-${instance}.pid"
            daemon="${daemon} --listen=$((8765 + ${index} - 1))"
        else
            daemon="/usr/sbin/lircd"
            daemon="${daemon} --device=${device} --driver=${driver}"
            daemon="${daemon} --output=/var/run/lirc/lircd --pidfile=/var/run/lircd.pid --allow-simulate"
            /bin/ln -s /var/run/lirc/lircd /dev/lircd
        fi
        /usr/bin/logger -t minimyth -p "local0.info" "[init.d/lirc] Started '${daemon}'."
        ${daemon}

        index=$((${index} + 1))
    done

    # Start master LIRC daemon.
    if /usr/bin/test -n "${daemon_master}" ; then
        ${daemon_master}
        /bin/ln -s /var/run/lirc/lircd /dev/lircd
    fi

    # Auto-configure usage of 'irexec'.
    if /usr/bin/test "${MM_LIRC_IREXEC_ENABLED}" = "auto" ; then
        /usr/bin/logger -t minimyth -p "local0.info" "[init.d/lirc] Attempting to auto-configure usage of irexec"
        MM_LIRC_IREXEC_ENABLED='no'
        if /usr/bin/test -e /etc/lircrc ; then
            # Only one level of includes is supported.
            lircrc_files="/etc/lircrc `/bin/cat /etc/lircrc | /bin/grep -e '^include ' | /bin/sed -e 's%^include *%%'`"
            for lircrc_file in ${lircrc_files} ; do
                if /bin/cat ${lircrc_file} | /bin/grep -q -e '^ *prog *= *irexec' ; then
                    MM_LIRC_IREXEC_ENABLED='yes'
                fi
           done
        fi
    fi

    # Start the irexec daemon.
    if /usr/bin/test "${MM_LIRC_IREXEC_ENABLED}" = "yes" ; then
        /usr/bin/logger -t minimyth -p "local0.info" "[init.d/lirc] Starting irexec daemon..."
        /usr/bin/irexec -d /etc/lircrc
    fi

    # Starting irsend daemon
    if /usr/bin/test -n "${MM_EXTERNAL_AMPLI_POWER_ENABLED}" || \
       /usr/bin/test -n "${MM_EXTERNAL_TV_POWER_ENABLED}"    || \
       /usr/bin/test -n "${MM_EXTERNAL_VOLUME_ENABLED}" ; then
        /usr/bin/logger -t minimyth -p "local0.info" "[init.d/lirc] Starting irsend daemon..."
        /usr/bin/irsend_daemon &
    fi

    # Enabling only LIRC protocol as kernel 2.6.39 also supports uinput. 
    #echo none > /sys/class/rc/rc0/protocols
    #echo +lirc > /sys/class/rc/rc0/protocols

    # Making default jumppoints
    if /usr/bin/test "${MM_LIRC_FETCH_LIRCRC}" = "no" ; then
        /usr/bin/logger -t minimyth -p "local0.info" "[init.d/lirc] Using build-in lircrc file - so defaulting major MythTV jumppoints..."
        mm_mythdb_jumppoints_update 'Main Menu'              'Alt+h'
        mm_mythdb_jumppoints_update 'Program Guide'          'Alt+e'
        mm_mythdb_jumppoints_update 'Program Finder'         'Alt+f'
        mm_mythdb_jumppoints_update 'TV Recording Playback'  'Alt+r'
        mm_mythdb_jumppoints_update 'Live TV'                'Alt+t'
        mm_mythdb_jumppoints_update 'Status Screen'          'Alt+i'
        mm_mythdb_jumppoints_update 'MythGallery'            'Alt+p'
        mm_mythdb_jumppoints_update 'MythGame'               'Alt+g'
        mm_mythdb_jumppoints_update 'Play music'             'Alt+m'
        mm_mythdb_jumppoints_update 'MythNews'               'Alt+n'
        mm_mythdb_jumppoints_update 'Video Default'          'Alt+v'
        mm_mythdb_jumppoints_update 'Play radio stream'      'Alt+s'
        mm_mythdb_jumppoints_update 'MythWeather'            'Alt+w'
        mm_mythdb_jumppoints_update 'ZoneMinder Events'      'Alt+z'
        mm_mythdb_jumppoints_update 'MythNetSearch'          'Alt+a'
    fi

    # Making default keybindings
    /usr/bin/logger -t minimyth -p "local0.info" "[init.d/lirc] Defaulting critical MythTV keybindings..."
    mm_mythdb_keybindings_update "Main Menu"                   "EXIT"           "Ctrl+Esc"
    mm_mythdb_keybindings_update "Main Menu"                   "EXITPROMPT"     ""
    mm_mythdb_keybindings_update "DEBUGOSD"                    "Ctrl+i"

    /usr/bin/logger -t minimyth -p "local0.info" "[init.d/lirc] Defaulting critical MythTV user settings..."
    mm_mythdb_settings_set       'NetworkControlEnabled'       '1'
    mm_mythdb_settings_set       'OverrideExitMenu'            '6'
    mm_mythdb_settings_set       'HaltCommand'                 'poweroff'
    mm_mythdb_settings_set       'RebootCommand'               'reboot'
    mm_mythdb_settings_set       'HideMouseCursor'             '1'

    #Enable only LIRC protocol as kernels 2.6.39 also supports uinput/
    #if /usr/bin/test -d /sys/class/rc ; then
    #    for file in `/usr/bin/find /sys/class/rc/*/ -name protocols`; do
    #        /usr/bin/logger -t minimyth -p "local0.info" "[init.d/lirc] Enabling only LIRC protocol on ${file}"
    #        #echo "Disabling all protocols for $file"
    #        echo "none" > $file
    #        #echo "Enabling lirc protocol for $file"
    #        echo "+lirc" > $file
    #        protocols=`/bin/cat $file`
    #        /usr/bin/logger -t minimyth -p "local0.info" "[init.d/lirc] Enabled protocols on ${file} are:\"${protocols}\""
    #    done
    #fi

}

stop() {
    mm_message_output info "stopping remote control ..."

    /usr/bin/test -n "`/bin/pidof irexec`" && /usr/bin/killall irexec
    /usr/bin/test -n "`/bin/pidof lircd`"  && /usr/bin/killall lircd
    /usr/bin/test -n "`/bin/pidof irsend_daemon`"  && /usr/bin/killall irsend_daemon
}

case $1 in
    start) start ;;
    stop)  stop  ;;
esac

exit 0
