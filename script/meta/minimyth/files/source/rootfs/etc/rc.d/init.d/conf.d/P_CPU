################################################################################
# MM_CPU configuration variables and files.
################################################################################
conf_write_P_CPU() {
    local conf_file=$1
    local vendor
    local family

    /bin/rm -rf /tmp/init.conf.cpu

    if [ "x${MM_CPU_FETCH_MICROCODE_DAT}" = "xyes" ] ; then
        vendor=`/bin/grep "^vendor_id[[:cntrl:]]*:"  /proc/cpuinfo | /usr/bin/head -n1 | /usr/bin/awk -F ": " '{ print $2 }'`
        family=`/bin/grep "^cpu family[[:cntrl:]]*:" /proc/cpuinfo | /usr/bin/head -n1 | /usr/bin/awk -F ": " '{ print $2 }'`
        if   [ ! "${vendor}" = "GenuineIntel"  ] ; then
            mm_message_output err "error: MM_CPU_FETCH_MICROCODE_DAT='yes' only supported on Intel processors."
        elif [ ! ${family} -ge 6 ] ; then
            mm_message_output err "error: MM_CPU_FETCH_MICROCODE_DAT='yes' only supported on Intel processors not older than 686."
        fi
    fi

    if [ -z "${MM_CPU_FREQUENCY_GOVERNOR}" ] ; then
        MM_CPU_FREQUENCY_GOVERNOR='performance'
    fi
    if [ -z "${MM_CPU_FETCH_MICROCODE_DAT}" ] ; then
        MM_CPU_FETCH_MICROCODE_DAT='no'
    fi
    if [ -z "${MM_CPU_USERSPACE_GOV_PARAMS}" ] ; then
        MM_CPU_USERSPACE_GOV_PARAMS='-m 3 -p 200 -u 50 -l 15'
    fi

    conf_variable_write "${conf_file}" MM_CPU_FREQUENCY_GOVERNOR  "${MM_CPU_FREQUENCY_GOVERNOR}"
    conf_variable_write "${conf_file}" MM_CPU_FETCH_MICROCODE_DAT "${MM_CPU_FETCH_MICROCODE_DAT}"
    conf_variable_write "${conf_file}" MM_CPU_USERSPACE_GOV_PARAMS "${MM_CPU_USERSPACE_GOV_PARAMS}"

    if [ "x${MM_CPU_FETCH_MICROCODE_DAT}" = "xyes" ] ; then
        /bin/mkdir -p /lib/firmware
        /bin/rm -f /lib/firmware/microcode.dat
        mm_confro_get microcode.dat /lib/firmware/microcode.dat
        if [ ! -e /lib/firmware/microcode.dat ] ; then
            mm_message_output err "error: failed to fetch 'microcode.dat' file."
        fi
    fi

    return 0
}
