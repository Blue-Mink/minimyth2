################################################################################
# MM_X configuration variables and files.
################################################################################
. /lib/minimyth/mm_detect

conf_write_S_X() {
    local conf_file=$1

    # X driver variables.
    if [ -z "${MM_X_HW_TYPE}" ] ; then
        MM_X_HW_TYPE=`mm_detect_state_get 'x' | /usr/bin/cut -d ' ' -f 1 | /usr/bin/cut -d ',' -f 1`
    fi
    if [ -z "${MM_X_HW_TYPE}" ] ; then
        mm_message_output err "error: MiniMyth2 can't identify VIDEO hardware. Please report this ..."
        sleep 20
    fi

    # values of MM_X_HW_TYPE set by udev rules by MM_X_HW_TYPE=`mm_detect_state_get 'x'
    # sun4i
    # meson
    # vc4
    # intel_i915
    # intel_vaapi
    # nvidia_legacy
    # nvidia_legacy_vdpau
    # nouveau
    # radeon
    # radeon_vaapi
    # rockchip
    # vmware
    case "${MM_X_HW_TYPE}" in
        intel_i915)
            /bin/rm -rf /lib/modules/*/misc/nvidia* /usr/lib/nvidia* /usr/lib/vdpau-nvidia* /usr/lib/vdpau/libvdpau_nvidia.so.1
            MM_X_DRIVER='intel_i915'
            ;;
        intel_vaapi)
            /bin/rm -rf /lib/modules/*/misc/nvidia* /usr/lib/nvidia* /usr/lib/vdpau-nvidia* /usr/lib/vdpau/libvdpau_nvidia.so.1
            MM_X_DRIVER='intel_i915'
            ;;
        nvidia_vdpau)
            LIB_PATHS=`/bin/cat /etc/ld.so.conf`
            LIB_PATHS="/usr/lib/nvidia ${LIB_PATHS}"
            /bin/echo -n > /etc/ld.so.conf
            for LIB_PATH in ${LIB_PATHS} ; do
                /bin/echo "${LIB_PATH}" >> /etc/ld.so.conf
            done
            # Remove Open Source libraries that conflict with proprietary libraries.
            LIBS=`/usr/bin/find /usr/lib/nvidia -type f | /bin/sed -e "s%^.*/%%"`
            for LIB in ${LIBS} ; do
                LIB_PATH=`/usr/bin/find /usr/lib -name ${LIB} | /bin/sed -e "s%^/usr/lib/nvidia/.*\$%%"`
                if [ -n "${LIB_PATH}" ] ; then
                    /bin/rm -f ${LIB_PATH}
                fi
            done
            # Remove legacy drivers
            /bin/rm -rf /usr/lib/nvidia-legacy/* /usr/lib/vdpau-nvidia-legacy/libvdpau_nvidia.so.1
            # Rebuild library cache.
            /sbin/ldconfig
            MM_X_DRIVER='nvidia'
            ;;
        nvidia_legacy_vdpau)
            # Include path to proprietary libraries.
            LIB_PATHS=`/bin/cat /etc/ld.so.conf`
            LIB_PATHS="/usr/lib/nvidia-legacy ${LIB_PATHS}"
            /bin/echo -n > /etc/ld.so.conf
            for LIB_PATH in ${LIB_PATHS} ; do
                /bin/echo "${LIB_PATH}" >> /etc/ld.so.conf
            done
            # Remove Open Source libraries that conflict with proprietary libraries.
            LIBS=`/usr/bin/find /usr/lib/nvidia-legacy -type f | /bin/sed -e "s%^.*/%%"`
            for LIB in ${LIBS} ; do
                LIB_PATH=`/usr/bin/find /usr/lib -name ${LIB} | /bin/sed -e "s%^/usr/lib/nvidia-legacy/.*\$%%"`
                if [ -n "${LIB_PATH}" ] ; then
                    /bin/rm -f ${LIB_PATH}
                fi
            done
            # Remove non-legacy drivers
            /bin/rm -rf /usr/lib/nvidia/* /usr/lib/vdpau/libvdpau_nvidia.so.1 /usr/bin/nvidia-smi
            # Move legacy libvdpau to /usr/lib/vdpau
            /bin/mv /usr/lib/vdpau-nvidia-legacy/libvdpau_nvidia.so.1 /usr/lib/vdpau/
            # Move legacy nvidia-smi to /usr/bin
            /bin/mv /usr/bin/nvidia-legacy/nvidia-smi /usr/bin/
            # Rebuild library cache.
            /sbin/ldconfig
            MM_X_DRIVER='nvidia_legacy'
            ;;
        nouveau)
            /bin/rm -rf /lib/modules/*/misc/nvidia* /usr/lib/nvidia* /usr/lib/vdpau-nvidia* /usr/lib/vdpau/libvdpau_nvidia.so.1
            MM_X_DRIVER='nouveau'
            ;;
        radeon_vdpau)
            /bin/rm -rf /lib/modules/*/misc/nvidia* /usr/lib/nvidia* /usr/lib/vdpau-nvidia* /usr/lib/vdpau/libvdpau_nvidia.so.1
            MM_X_DRIVER='radeon'
            ;;
        radeon_vaapi)
            /bin/rm -rf /lib/modules/*/misc/nvidia* /usr/lib/nvidia* /usr/lib/vdpau-nvidia* /usr/lib/vdpau/libvdpau_nvidia.so.1
            MM_X_DRIVER='radeon'
            ;;
        vmware)
            /bin/rm -rf /lib/modules/*/misc/nvidia* /usr/lib/nvidia* /usr/lib/vdpau-nvidia* /usr/lib/vdpau/libvdpau_nvidia.so.1
            MM_X_DRIVER='vmware'
            ;;
        armsoc)
            /bin/rm -rf /lib/modules/*/misc/nvidia* /usr/lib/nvidia* /usr/lib/vdpau-nvidia* /usr/lib/vdpau/libvdpau_nvidia.so.1
            /sbin/rmmod lima ttm gpu_sched
            MM_X_DRIVER='armsoc'
            ;;
        meson)
            /bin/rm -rf /lib/modules/*/misc/nvidia* /usr/lib/nvidia* /usr/lib/vdpau-nvidia* /usr/lib/vdpau/libvdpau_nvidia.so.1
            MM_X_DRIVER='meson'
            ;;
        vc4)
            /bin/rm -rf /lib/modules/*/misc/nvidia* /usr/lib/nvidia* /usr/lib/vdpau-nvidia* /usr/lib/vdpau/libvdpau_nvidia.so.1
            MM_X_DRIVER='vc4'
            ;;
        rockchip)
            /bin/rm -rf /lib/modules/*/misc/nvidia* /usr/lib/nvidia* /usr/lib/vdpau-nvidia* /usr/lib/vdpau/libvdpau_nvidia.so.1
            MM_X_DRIVER='rockchip'
            ;;
        sun4i)
            /bin/rm -rf /lib/modules/*/misc/nvidia* /usr/lib/nvidia* /usr/lib/vdpau-nvidia* /usr/lib/vdpau/libvdpau_nvidia.so.1
            MM_X_DRIVER='sun4i'
            ;;
        *)
            MM_X_DRIVER='unknown'
            ;;
    esac

    if [ -z "${MM_X_FETCH_XORG_CONF}" ] ; then
        MM_X_FETCH_XORG_CONF='no'
    fi
    if [ -z "${MM_X_WATCHDOG_MYTH_PROC}" ] ; then
        MM_X_WATCHDOG_MYTH_PROC='no'
    fi
    if [ -z "${MM_RESTART_ON_SLEEP}" ] ; then
        MM_RESTART_ON_SLEEP='none'
    fi
    if [ -z "${MM_X_VNC_ENABLED}" ] ; then
        MM_X_VNC_ENABLED='yes'
    fi

    MM_HARDWARE_KERNEL_MODULES="${MM_HARDWARE_KERNEL_MODULES} `mm_hardware_to_kernel_module_map ${MM_X_DRIVER} /etc/hardware.d/x2kernel.map`"
    MM_HARDWARE_KERNEL_MODULES="${MM_HARDWARE_KERNEL_MODULES} `mm_hardware_to_kernel_module_map ${MM_X_DRIVER} /etc/hardware.d/plat2kernel.map`"
    MM_HARDWARE_KERNEL_MODULES="${MM_HARDWARE_KERNEL_MODULES} `mm_hardware_cpu_process mm_hardware_cpu2kernel_map`"
    MM_HARDWARE_KERNEL_MODULES=`/bin/echo ${MM_HARDWARE_KERNEL_MODULES} | /bin/sed -e 's%  *% %g' | /bin/sed -e 's%^  *%%' | /bin/sed -e 's%  *$%%'`

    conf_variable_write "${conf_file}" MM_VIDEO_PLAYBACK_PROFILE        "${MM_VIDEO_PLAYBACK_PROFILE}"
    conf_variable_write "${conf_file}" MM_X_DRIVER                      "${MM_X_DRIVER}"
    conf_variable_write "${conf_file}" MM_X_HW_TYPE                     "${MM_X_HW_TYPE}"
    conf_variable_write "${conf_file}" MM_X_FETCH_XORG_CONF             "${MM_X_FETCH_XORG_CONF}"
    conf_variable_write "${conf_file}" MM_X_WATCHDOG_MYTH_PROC          "${MM_X_WATCHDOG_MYTH_PROC}"
    conf_variable_write "${conf_file}" MM_RESTART_ON_SLEEP              "${MM_RESTART_ON_SLEEP}"
    conf_variable_write "${conf_file}" MM_X_VNC_ENABLED                 "${MM_X_VNC_ENABLED}"
    conf_variable_write "${conf_file}" MM_HARDWARE_KERNEL_MODULES       "${MM_HARDWARE_KERNEL_MODULES}"

    if [ "x${MM_X_FETCH_XORG_CONF}" = "xyes" ] ; then
        /bin/rm -f /etc/X11/xorg.conf
        mm_confro_get /xorg.conf /etc/X11/xorg.conf
        if [ ! -e /etc/X11/xorg.conf ] ; then
            mm_message_output err "error: failed to fetch 'xorg.conf' file."
        fi
    fi

    return 0
}
