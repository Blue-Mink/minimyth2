################################################################################
# MM_X configuration variables and files.
################################################################################
. /lib/minimyth/mm_detect

conf_write_S_X() {
    local conf_file=$1

    local device
    local device_item
    local device_list

    if [ -z "${MM_VIDEO_PLAYBACK_PROFILE}" ] ; then
        MM_VIDEO_PLAYBACK_PROFILE=''
    fi
    if [ "x${MM_VIDEO_PLAYBACK_PROFILE}" = "xuserdefined" ] ; then
        MM_VIDEO_PLAYBACK_PROFILE=''
    fi

    # X driver variables.
    if [ -z "${MM_X_HW_TYPE}" ] ; then
        MM_X_HW_TYPE=`mm_detect_state_get 'x' | /usr/bin/cut -d ' ' -f 1 | /usr/bin/cut -d ',' -f 1`
    fi
    if [ -z "${MM_X_HW_TYPE}" ] ; then
        mm_message_output err "error: no supported video hardware found. Plese use MM_X_HW_TYPE to identify Your video hardware..."
    fi

    if [ "x${MM_X_HW_TYPE}" = "xnvidia_vdpau"          ] ; then
        MM_X_DRIVER='nvidia'
    elif [ "x${MM_X_HW_TYPE}" = "xnvidia_legacy_vdpau" ] ; then
        MM_X_DRIVER='nvidia_legacy'
    elif [ "x${MM_X_HW_TYPE}" = "xradeon_vdpau"        ] ; then
        MM_X_DRIVER='radeon'
    elif [ "x${MM_X_HW_TYPE}" = "xradeon_vaapi"        ] ; then
        MM_X_DRIVER='radeon'
    elif [ "x${MM_X_HW_TYPE}" = "xintel_vaapi"         ] ; then
        MM_X_DRIVER='intel_i915'
    else
        MM_X_DRIVER="${MM_X_HW_TYPE}"
    fi

    if [ -z "${MM_X_ENABLED}"                  ] ; then
        MM_X_ENABLED='yes'
    fi
    if [ -z "${MM_X_RESTART_ON_SLEEP_ENABLED}" ] ; then
        MM_X_RESTART_ON_SLEEP_ENABLED='no'
    fi
    if [ -z "${MM_X_WM_ENABLED}"               ] ; then
        MM_X_WM_ENABLED='yes'
    fi
    if [ -z "${MM_X_VNC_ENABLED}"              ] ; then
        MM_X_VNC_ENABLED='yes'
    fi
    if [ -z "${MM_X_SCREENSAVER}"              ] ; then
        MM_X_SCREENSAVER='none'
    fi
    if [ -z "${MM_X_SCREENSAVER_TIMEOUT}"      ] ; then
        MM_X_SCREENSAVER_TIMEOUT='10'
    fi
    if [ -z "${MM_X_SCREENSAVER_HACK}"         ] ; then
        MM_X_SCREENSAVER_HACK='sleep'
    fi
    if [ -z "${MM_X_MYTH_PROGRAM}"             ] ; then
        MM_X_MYTH_PROGRAM='mythfrontend'
    fi
    if [ -z "${MM_X_FETCH_XINITRC}"   ] ; then
        MM_X_FETCH_XINITRC='no'
    fi
    if [ -z "${MM_X_FETCH_XORG_CONF}" ] ; then
        MM_X_FETCH_XORG_CONF='no'
    fi
    if [ -z "${MM_X_MYTH_RSS_FOR_X_RESTART}" ] ; then
        MM_X_MYTH_RSS_FOR_X_RESTART='60'
    fi
    if [ -z "${MM_X_WATCHDOG_MYTH_PROC}" ] ; then
        MM_X_WATCHDOG_MYTH_PROC='no'
    fi
    if [ -z "${MM_RESTART_ON_SLEEP}" ] ; then
        MM_RESTART_ON_SLEEP='none'
    fi

    # Disable mythwatchdog when mythwelcome is selected
    if [ "x${MM_X_MYTH_PROGRAM}" = "xmythwelcome" ] ; then
        MM_X_WATCHDOG_MYTH_PROC='no'
    fi

    MM_HARDWARE_KERNEL_MODULES="${MM_HARDWARE_KERNEL_MODULES} `mm_hardware_x2kernel_map ${MM_X_DRIVER}`"
    MM_HARDWARE_KERNEL_MODULES="${MM_HARDWARE_KERNEL_MODULES} `mm_hardware_cpu_process mm_hardware_cpu2kernel_map`"
    MM_HARDWARE_KERNEL_MODULES=`/bin/echo ${MM_HARDWARE_KERNEL_MODULES} | /bin/sed -e 's%  *% %g' | /bin/sed -e 's%^  *%%' | /bin/sed -e 's%  *$%%'`

    conf_variable_write "${conf_file}" MM_VIDEO_PLAYBACK_PROFILE        "${MM_VIDEO_PLAYBACK_PROFILE}"

    conf_variable_write "${conf_file}" MM_X_DRIVER                      "${MM_X_DRIVER}"
    conf_variable_write "${conf_file}" MM_X_HW_TYPE                     "${MM_X_HW_TYPE}"

    conf_variable_write "${conf_file}" MM_X_ENABLED                     "${MM_X_ENABLED}"
    conf_variable_write "${conf_file}" MM_X_RESTART_ON_SLEEP_ENABLED    "${MM_X_RESTART_ON_SLEEP_ENABLED}"
    conf_variable_write "${conf_file}" MM_X_WM_ENABLED                  "${MM_X_WM_ENABLED}"
    conf_variable_write "${conf_file}" MM_X_VNC_ENABLED                 "${MM_X_VNC_ENABLED}"
    conf_variable_write "${conf_file}" MM_X_SCREENSAVER                 "${MM_X_SCREENSAVER}"
    conf_variable_write "${conf_file}" MM_X_SCREENSAVER_TIMEOUT         "${MM_X_SCREENSAVER_TIMEOUT}"
    conf_variable_write "${conf_file}" MM_X_SCREENSAVER_HACK            "${MM_X_SCREENSAVER_HACK}"
    conf_variable_write "${conf_file}" MM_X_MYTH_PROGRAM                "${MM_X_MYTH_PROGRAM}"

    conf_variable_write "${conf_file}" MM_X_FETCH_XINITRC               "${MM_X_FETCH_XINITRC}"
    conf_variable_write "${conf_file}" MM_X_FETCH_XORG_CONF             "${MM_X_FETCH_XORG_CONF}"
    conf_variable_write "${conf_file}" MM_X_MYTH_RSS_FOR_X_RESTART      "${MM_X_MYTH_RSS_FOR_X_RESTART}"
    conf_variable_write "${conf_file}" MM_X_WATCHDOG_MYTH_PROC          "${MM_X_WATCHDOG_MYTH_PROC}"
    conf_variable_write "${conf_file}" MM_RESTART_ON_SLEEP              "${MM_RESTART_ON_SLEEP}"

    conf_variable_write "${conf_file}" MM_HARDWARE_KERNEL_MODULES       "${MM_HARDWARE_KERNEL_MODULES}" 

    if [ "x${MM_X_FETCH_XINITRC}"   = "xyes" ] ; then
        /bin/rm -f /etc/X11/xinit/xinitrc
        mm_confro_get /xinitrc /etc/X11/xinit/xinitrc
        if [ ! -e /etc/X11/xinit/xinitrc ] ; then
            mm_message_output err "error: failed to fetch 'xinitrc' file."
        fi
    fi
    if [ "x${MM_X_FETCH_XORG_CONF}" = "xyes" ] ; then
        /bin/rm -f /etc/X11/xorg.conf
        mm_confro_get /xorg.conf /etc/X11/xorg.conf
        if [ ! -e /etc/X11/xorg.conf ] ; then
            mm_message_output err "error: failed to fetch 'xorg.conf' file."
        fi
    fi

    return 0
}
