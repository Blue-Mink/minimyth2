#!/bin/sh

# If cmd. line param is "dryrun" then intstead of entering sleep script will:
#
# 1.run all actions before suspend
# 2.wait 5 sec instead putting system into sleep
# 3.run all actions after resume



# Only allow one running instance of mm_sleep.
pids=`/bin/pidof mm_sleep`
instances=`/bin/echo ${pids} | /usr/bin/wc -w`
if [ ${instances} -ne 1 ] ; then
    /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] another instance is running ..."
    exit 1
fi

. /etc/rc.d/functions

/usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Script started..."

if [ -e /var/tmp/mm_tv_is_off ] ; then
    /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] POWER key pressed while TV is OFF -> Ignoring POWER key and turning-on TV"
    /bin/rm -f /var/tmp/mm_tv_is_off
    /usr/bin/mm_external tv_power_on
    if [ -n "`/bin/pidof xscreensaver`" ] ; then
        /usr/bin/xscreensaver-command -deactivate > /dev/null 2>&1
    fi
    exit 0
fi

# Create the state directory for mm_sleep.
/bin/rm -fr   /var/lib/mm_sleep.$$
/bin/mkdir -p /var/lib/mm_sleep.$$

# Turn off external equipment.
/usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Turning-off external equipment..."
if [ -e /var/tmp/mm_tv_is_off ] ; then
   /bin/rm -f /var/tmp/mm_tv_is_off
   /usr/bin/mm_external ampli_power_off
else
   /usr/bin/mm_external tv_power_off
   /usr/bin/mm_external ampli_power_off
fi

if [ "x${MM_AVAHI_ENABLED}" = "xyes" ] ; then
   /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Unpublishing frontend services by AVANI..."
   /usr/bin/killall avahi-publish
fi

# Asking google chrome to exit
pid=`ps ax | grep 'python /usr/bin/google-chrome.py' | grep -v grep | awk '{print $1}'`
if [ -n "${pid}" ] ; then
    /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Asking to Exit Google-chrome browser..."
    kill -2 ${pid}
fi

# Asking myth go go to main menu
/usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Asking myth to go to main menu..."
mm_jump_myth_mainmenu

# Asking SIP-DAEMON to exit
if [ "x${MM_VOIP_ENABLED}" = "xyes" ] ; then
    /bin/touch /tmp/exit.sem
    /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Exiting Telephony SIP daemon..."
fi

# Killing mm_notify_updates
if [ ! "x${MM_NOTIFY_ABOUT_UPDATES}" = "xno" ] ; then
    if [ -n "`/bin/pidof mm_notify_updates`" ] ; then
        /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Killing NOTIFY_UPDATES daemon..."
        /usr/bin/killall -9 mm_notify_updates > /dev/null 2>&1
    fi
fi

if [ "x${MM_RESTART_ON_SLEEP}" = "xmythfrontend" ] ; then
    /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Configured to restart mythfrontned at sleep ..."

    if [ -n "`/bin/pidof mm_watchdog`" ] ; then

        /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Killing mm_watchdog script..."
        /usr/bin/killall -9 mm_watchdog

        if [ -n "`/bin/pidof mm_watchdog`" ] ; then
            /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Still trying to killing mm_watchdog script..."
            /usr/bin/killall -9 mm_watchdog
        else
            /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] mm_watchdog script killed..."
        fi
    fi

    /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Asking mythfrontend to exit..."
    killall mythfrontend

    /bin/sleep 3

    i=0
    while [ $i -lt 2 ] ; do
        i=$((${i} + 1))
        mythpid=`/bin/pidof mythfrontend`
        if [ -n "${mythpid}" ] ; then
            /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Waiting mythfrontend to exit...($i). PID is:'${mythpid}'"
            killall mythfrontend
            /bin/sleep 3
        else
            /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Frontend exited..."
            i=2
        fi
    done
    if [ -n "`/bin/pidof mythfrontend`" ] ; then
        /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Exiting mythfrontend failed. Killing mythfrontend..."
        killall -9 mythfrontend
        /bin/sleep 1
    fi

else [ "x${MM_RESTART_ON_SLEEP}" = "xdisplayserver" ] ; then
    /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Configured to restart display server at sleep ..."
    /etc/rc.d/init.d/frontend stop
fi

# Stop LCDd because it can stop working as a result of suspend.
if [ -n "`/bin/pidof LCDd`" ] ; then
    /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Killing LCDd daemon..."
    /bin/touch /var/lib/mm_sleep.$$/LCDd
    /usr/bin/killall LCDd 2> /dev/null
    while [ -n "`/bin/pidof LCDd`" ] ; do
        /usr/bin/killall LCDd 2> /dev/null
        /bin/sleep 1
    done
fi

# Stop irserver because it can stop working as a result of suspend.
if [ -n "`/bin/pidof irserver`" ] ; then 
    /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Killing irserver..."
    /bin/touch /var/lib/mm_sleep.$$/irserver
    /usr/bin/killall irserver 2> /dev/null
    while [ -n "`/bin/pidof irserver`" ] ; do
        /usr/bin/killall irserver 2> /dev/null
        /bin/sleep 1
    done
fi

# Stop irexec so that the remote button press used to wake up the frontend
# does not suspend the frontend.
if [ -n "`/bin/pidof irexec`" ] ; then
    /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Killing irexec..."
    /bin/touch /var/lib/mm_sleep.$$/irexec
    /usr/bin/killall irexec 2> /dev/null
    while [ -n "`/bin/pidof irexec`" ] ; do
        /usr/bin/killall irexec 2> /dev/null
        /bin/sleep 1
    done
fi

# Killing screensaver
if [ "x${MM_X_SCREENSAVER}" = "xxscreensaver" ] ; then
    if [ -n "`/bin/pidof xscreensaver`" ] ; then
        /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Killing screensaver..."
        /usr/bin/killall xscreensaver > /dev/null 2>&1
    fi
fi

# Stop X if configuration asks to stop-restart Xorg during sleep-resume
if [ "x${MM_RESTART_ON_SLEEP}" = "xxorg" ] ; then
    /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Stoping X-server..."
    mm_x_stop
fi

# Make sure SIP-DAEMON is dead. If not, kill it
if [ "x${MM_VOIP_ENABLED}" = "xyes" ] ; then
    sipdaemonpid=`/bin/ps ax -o ppid,pid,args | grep '/usr/bin/sip-daemon.py' | grep -v grep`
    if [ -n "$sipdaemonpid" ] ; then
        /usr/bin/killall sip-daemon.py
        /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Telephony SIP daemonN still alive. Killing it..."
    fi
fi

# If enabled unmount all shares
if [ "x${MM_MEDIA_UNMOUNT_ON_SLEEP}" = "xyes" ] ; then
    /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Unmount all shares..."
    /etc/rc.d/init.d/media stop
fi

# Stoping NTP (if required and synchronizing RTC clock
if [ "x${MM_RESTART_NTP_ON_SLEEP}" = "xyes" ] ; then
    /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Stoping NTP daemon..."
    /bin/touch /var/lib/mm_sleep.$$/ntp
    /etc/rc.d/init.d/time stop
else
    /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Synchronizing RTC clock..."
    /sbin/hwclock -w -u
fi

# If enabled exacute all workarounds needed for sucessfull suspend
if [ -e /usr/bin/mm_sleep_workarounds ] ; then
    /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Executing MM_SLEEP_WORKAROUNDS script..."
    /usr/bin/mm_sleep_workarounds
fi

/bin/sleep 5

if [ x${1} = "xdryrun" ] ; then
    /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Simulating entering S3 state..."
    echo "[mm_sleep] Simulating entering S3 state..."
    echo ""
    echo "--- sleeping 5 sec. to simulate ---"
    /bin/sleep 5
    echo ""
    echo "[mm_sleep] Simulating return from S3 state..."
    /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Simulating return from S3 state..."
else
    /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Entering S3 state..."
    /bin/echo mem > /sys/power/state
    /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Returning from S3 state..."
fi

# If enabled exacute all workarounds needed for sucessfull resume
if [ -e /usr/bin/mm_resume_workarounds ] ; then
    /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Executing MM_RESUME_WORKAROUNDS script..."
    /usr/bin/mm_resume_workarounds
fi

# If enabled mount all shares
if [ "x${MM_MEDIA_UNMOUNT_ON_SLEEP}" = "xyes" ] ; then
    /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Momounting all shares..."
    /etc/rc.d/init.d/media start
fi

if [ "x${MM_RESTART_ON_SLEEP}" = "xmythfrontend" ] || [ "x${MM_RESTART_ON_SLEEP}" = "xdisplayserver" ] ; then

    /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Restarting mythfrontend and diaplay server ..."
    /etc/rc.d/init.d/frontend start
fi

# Restart screensaver
if [ "x${MM_X_SCREENSAVER}" = "xxscreensaver" ] ; then
    if [ -z "`/bin/pidof xscreensaver`" ] ; then
        /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Restarting screensaver..."
        su minimyth -c "/usr/bin/xscreensaver" & > /dev/null 2>&1
    fi
fi

# If irexec was running before suspend, then restart it.
if [ -e /var/lib/mm_sleep.$$/irexec ] ; then
    if [ -z `/bin/pidof irexec` ] ; then
        /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Restarting irexec..."
        /usr/bin/irexec -d /etc/lirc/lircrc
    fi	
    /bin/rm -f /var/lib/mm_sleep.$$/irexec
fi

# Turn on external equipment.
/usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Turning-on external equipment..."
/usr/bin/mm_external ampli_power_on
/usr/bin/mm_external tv_power_on

# If irserver was running before suspend, then restart it.
if [ -e /var/lib/mm_sleep.$$/irserver ] ; then
    if [-z `/bin/pidof irserver` ] ; then
        /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Restarting irserver..."
        if [ "x${MM_LIRC_DRIVER}" = "xirtrans" ] || \
           [ -z "${MM_LIRC_DEVICE_LIST}"       ] ; then
           /usr/sbin/irserver \
           -logfile /var/log/irserver \
           -pidfile /var/run/irserver.pid \
           -daemon "${MM_LCDPROC_DEVICE}"
        else
            /usr/sbin/irserver \
            -no_lirc \
            -logfile /var/log/irserver \
            -pidfile /var/run/irserver.pid \
            -daemon "${MM_LCDPROC_DEVICE}"
        fi
    fi
fi

# If LCDd was running before suspend, then restart it.
if [ -e /var/lib/mm_sleep.$$/LCDd ] ; then
    if [ -z `/bin/pidof LCDd` ] ; then
        /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Restarting LCDd..."
        /usr/sbin/LCDd -c /etc/LCDd.conf
    fi
    /bin/rm -f /var/lib/mm_sleep.$$/LCDd
fi

# Restart mailnotifier script
if [ "x${MM_MAIL_NOTIFY_NEW_MAILS}" = "xyes" ] ; then
    if [ "x${MM_MAIL_NOTIFY_ALL_ON_RESUME}" = "xyes" ] ; then
        mailnotifypid=`/bin/ps ax -o ppid,pid,args | grep '/usr/bin/mailnotifier.py' | grep -v grep | cut -c 7-12`
        if [ -n "${mailnotifypid}" ] ; then
            /bin/kill ${mailnotifypid}
            /bin/sleep 1
            /usr/bin/python /usr/bin/mailnotifier.py ${MM_MAIL_NOTIFY_NEW_MAILS} &
            /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Restarting MAILNOTIFIER.py script..."
        fi
    fi
fi

# Restarting sip-daemon
if [ "x${MM_VOIP_ENABLED}" = "xyes" ] ; then
    sipdaemonpid=`/bin/ps ax -o ppid,pid,args | grep '/usr/bin/sip-daemon.py' | grep -v grep`
    if [ -z "${sipdaemonpid}" ] ; then
        /usr/bin/sip-daemon.sh &
        /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Restarting Telephony SIP daemon...."
    fi
fi

# Restarting mm_notify_updates
if [ ! "x${MM_NOTIFY_ABOUT_UPDATES}" = "x" ] && [ ! "x${MM_NOTIFY_ABOUT_UPDATES}" = "xno" ] ; then
    if [ -z `/bin/pidof mm_notify_updates` ] ; then
        /usr/bin/mm_notify_updates ${MM_NOTIFY_ABOUT_UPDATES} &
        /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Restarting NOTIFY_UPDATES daemon. Check period is ${MM_NOTIFY_ABOUT_UPDATES}min..."
    fi
fi

if [ "x${MM_AVAHI_ENABLED}" = "xyes" ] ; then
  /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Publishing frontend services by AVANI..."
  /usr/bin/avahi-publish-http-logs-service &
  /usr/bin/avahi-publish-http-mainpage-service &
  /usr/bin/avahi-publish-telnet-service &
fi

# If enabled, kicking logrotate script
if [ "x${MM_MINIMYTH_LOGROTATE}" = "xyes" ] ; then
    /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Rotating LOGs..."
    /usr/bin/mm_rotatelogs &
fi

# If enabled, restarting NTP after sleep
if [ "x${MM_RESTART_NTP_ON_SLEEP}" = "xyes" ] ; then
    if [ -e /var/lib/mm_sleep.$$/ntp ] ; then
        /usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Restarting NTP daemon..."
        /etc/rc.d/init.d/time start
        /bin/rm -f /var/lib/mm_sleep.$$/LCDd
    fi
fi

# Checking is local time in good sync with BE server 
/usr/bin/mm_check_time_sync &

# Remove the state directory for mm_sleep.
/bin/rm -fr   /var/lib/mm_sleep.$$

/usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] All done. Waiting 10s guard time..."

/bin/sleep 10

/usr/bin/logger -t minimyth -p "local0.info" "[mm_sleep] Exiting..."

file_name="/usr/local/share/`hostname`.resume_stats"

top -b -n1                 > ${file_name}
echo "------------------" >> ${file_name}
cat /proc/meminfo         >> ${file_name}
echo "------------------" >> ${file_name}
df -h                     >> ${file_name}
echo "------------------" >> ${file_name}
cat /var/log/messages     >> ${file_name}
echo "------------------" >> ${file_name}
cat /var/log/mythfrontend.log >> ${file_name}

exit 0
