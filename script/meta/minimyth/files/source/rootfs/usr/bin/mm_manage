#!/bin/sh

. /etc/rc.d/functions
. /etc/mm_ui_localizations_sh


ssh_command="/usr/bin/ssh -c aes128-ctr root@192.168.1.254"

command=$1

pids=`/bin/pidof mm_manage`
instances=`/bin/echo ${pids} | /usr/bin/wc -w`
if [ ${instances} -ne 1 ] ; then
    echo "[mm_manage] Another instance already running...Exiting"
    exit 1
fi


#restart_mythfrontend_str="Restartuję proces Mythfrontend..."
#restart_xserver_str="Restartuję X-Serwer..."
#restart_this_frontend_str="Restartuję Frontend..."
#reload_this_system_str="Nowe oprogramowanie wymaga restaru. \nRestartuję Frontend..."
#shutdown_this_frontend_str="Wyłączam Ten System..."
#restart_mythbackend_str="Restartuję MythTV Backend..."
#restart_server_str="Restartuję Centralny Serwer..."
#save_themecache_str="Zapisuję cache skórki..."
#save_themecache_ok="Cache skórki zapisano pomyślnie !"
#save_cookiejar_str="Zapisuję ciasteczka WEB..."
#save_cookiejar_ok_str="Ciasteczka WEB zapisano pomyślnie !"
#save_game_str="Zapisuję ustawienia gier..."
#save_game_ok_str="Ustawienia gier zapisano pomyślnie !"
#restore_game_str="Odtwarzam ustawienia gier..."
#restore_game_ok_str="Ustawienia gier odtworzono pomyślnie !"
#error_str="Wystąpił błąd !"

#accout_str = "Konto: "
#mails_str = " nowych wiadomości..."


#-------------------------------------------------------------------------------

if [ "x${command}" = "xrestart_mythfrontend" ] ; then 
  mm_manage _restart_mythfrontend &
  exit 0
fi
if [ "x${command}" = "x_restart_mythfrontend" ] ; then
  mm_show_mythnotify "${restart_mythfrontend_str}" '' 'warning'
  /bin/sleep 5
  /usr/bin/logger -t minimyth -p "local0.info" "[mm_manage] Killing mythfrontend ..."
  /usr/bin/killall -9 mythfrontend
  /bin/umount /media/disk
  if [ -z "`/bin/pidof mm_watchdog`" ] ; then
    sleep 1
    /etc/rc.d/init.d/frontend start
  fi
  exit 0
fi

#-------------------------------------------------------------------------------

if [ "x${command}" = "xrestart_xserver" ] ; then 
  mm_manage _restart_xserver &
  exit 0
fi
if [ "x${command}" = "x_restart_xserver" ] ; then 
  mm_show_mythnotify "${restart_xserver_str}" '' 'warning'
  /bin/sleep 5
  /bin/umount /media/disk
  /usr/bin/logger -t minimyth -p "local0.info" "[mm_manage] Killing google-chrome ..."
  /usr/bin/killall chrome
  /usr/bin/logger -t minimyth -p "local0.info" "[mm_manage] Killing mythfrontend and display server ..."
  /etc/rc.d/init.d/frontend stop
  /usr/bin/logger -t minimyth -p "local0.info" "[mm_manage] Reloading mceusb module ..."
  /sbin/rmmod mceusb
  /sbin/modprobe mceusb
  /usr/bin/logger -t minimyth -p "local0.info" "[mm_manage] Reloading lirc daemons ..."
  /bin/sleep 2
  /etc/rc.d/init.d/lirc stop
  /etc/rc.d/init.d/lirc start
  /usr/bin/logger -t minimyth -p "local0.info" "[mm_manage] Starting mythfrontend and display server ..."
  /etc/rc.d/init.d/frontend start
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xrestart_this_frontend" ] ; then
  mm_manage _restart_this_frontend &
  exit 0
fi
if [ "x${command}" = "x_restart_this_frontend" ] ; then
  mm_show_mythnotify "${restart_this_frontend_str}" '' 'warning'
  /bin/sleep 5
  /sbin/reboot
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xreload_this_system" ] ; then
  mm_show_mythnotify "${reload_this_system_str}" '' 'warning'
  /bin/sleep 5
  /sbin/reboot
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xshutdown_this_frontend" ] ; then
  mm_manage _shutdown_this_frontend &
  exit 0
fi
if [ "x${command}" = "x_shutdown_this_frontend" ] ; then
  mm_show_mythnotify "${shutdown_this_frontend_str}" '' 'warning'
  /bin/sleep 5
  /sbin/poweroff
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xrestart_mythbackend" ] ; then
  mm_manage _restart_mythbackend &
  exit 0
fi
if [ "x${command}" = "x_restart_mythbackend" ] ; then
  mm_show_mythnotify "${restart_mythbackend_str}" '' 'warning'
  /bin/sleep 5
  ${ssh_command} /usr/bin/systemctl restart mythbackend.service
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xrestart_server" ] ; then
  mm_manage _restart_server &
  exit 0
fi
if [ "x${command}" = "x_restart_server" ] ; then
  mm_show_mythnotify "${restart_server_str}" '' 'warning'
  /bin/sleep 5
  ${ssh_command} reboot
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xsave_themecache" ] ; then
  mm_manage _save_themecache &
  exit 0
fi
if [ "x${command}" = "x_save_themecache" ] ; then
  mm_show_mythnotify "${save_themecache_str}" '' 'warning'
  /usr/bin/mm_command themecache_save > /tmp/tmp.out 2>&1
  if [ $? -eq 0 ] ; then
    mm_show_mythnotify "${save_themecache_ok_str}" '' 'ok'
  else
    result=`cat /tmp/tmp.out`
    mm_show_mythnotify "${error_str}" "${result}" 'error'
  fi
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xsave_cookiejar" ] ; then
  mm_manage _save_cookiejar &
  exit 0
fi
if [ "x${command}" = "x_save_cookiejar" ] ; then
  mm_show_mythnotify "${save_cookiejar_str}" '' 'warning'
  /usr/bin/mm_command cookiejar_save > /tmp/tmp.out 2>&1
  if [ $? -eq 0 ] ; then
    mm_show_mythnotify "${save_cookiejar_ok_str}" '' 'ok'
  else
    result=`cat /tmp/tmp.out`
    mm_show_mythnotify "${error_str}" "${result}" 'error'
  fi
  exit 0
fi


#-------------------------------------------------------------------------------
if [ "x${command}" = "xsave_game" ] ; then
  mm_manage _save_game &
  exit 0
fi
if [ "x${command}" = "x_save_game" ] ; then
  mm_show_mythnotify "${save_game_str}" '' 'warning'
  /usr/bin/mm_command game_save > /tmp/tmp.out 2>&1
  if [ $? -eq 0 ] ; then
    mm_show_mythnotify "${save_game_ok_str}" '' 'ok'
  else
    result=`cat /tmp/tmp.out`
    mm_show_mythnotify "${error_str}" "${result}" 'error'
  fi
  exit 0
fi


#-------------------------------------------------------------------------------
if [ "x${command}" = "xrestore_game" ] ; then
  mm_manage _restore_game &
  exit 0
fi
if [ "x${command}" = "x_restore_game" ] ; then
  mm_show_mythnotify "${restore_game_str}" '' 'warning'
  /usr/bin/mm_command game_restore > /tmp/tmp.out 2>&1
  if [ $? -eq 0 ] ; then
    mm_show_mythnotify "${restore_game_ok_str}" '' 'ok'
  else
    result=`cat /tmp/tmp.out`
    mm_show_mythnotify "${error_str}" "${result}" 'error'
  fi
  exit 0
fi



#-------------------------------------------------------------------------------
if [ "x${command}" = "xreload_voip_config" ] ; then
  mm_manage _reload_voip_config &
  exit 0
fi
if [ "x${command}" = "x_reload_voip_config" ] ; then
  mm_show_mythnotify "${reload_voip_config_str}" '' 'warning'
  /usr/bin/mm_command reload_voip_config > /tmp/tmp.out 2>&1
  if [ $? -eq 0 ] ; then
    mm_show_mythnotify "${reload_voip_config_ok_str}" '' 'ok'
  else
    result=`cat /tmp/tmp.out`
    mm_show_mythnotify "${error_str}" "${result}" 'error'
  fi
  exit 0
fi



#-------------------------------------------------------------------------------
if [ "x${command}" = "xredownload_theme" ] ; then
  mm_manage _redownload_theme &
  exit 0
fi
if [ "x${command}" = "x_redownload_theme" ] ; then
  mm_show_mythnotify "${redownload_theme_str}" '' 'warning'
  /usr/bin/mm_command redownload_theme > /tmp/tmp.out 2>&1
  if [ $? -eq 0 ] ; then
    mm_show_mythnotify "${redownload_theme_ok_str}" '' 'ok'
    mm_manage restart_mythfrontend &
  else
    result=`cat /tmp/tmp.out`
    mm_show_mythnotify "${error_str}" "${result}" 'error'
  fi
  exit 0
fi



#-------------------------------------------------------------------------------

if [ "x${command}" = "xcheck_updates" ] ; then
  mm_manage _check_updates &
  exit 0
fi
if [ "x${command}" = "x_check_updates" ] ; then
  if [ "x${MM_MINIMYTH_ONLINE_UPDATES_URL}" = "x" ] ; then
    # Do update check for PXE booted diskless case
    mm_show_mythnotify "Checking for system updates..." '' 'warning' '12' 'System Updates'
    ${ssh_command} pacman -Sy > /dev/null 2>&1
    updates=`${ssh_command} pacman -Qqu | /usr/bin/wc -w 2> /dev/null`
    if [ -n ${updates} ] ; then
      if [ ! ${updates} = 0 ] ; then
        mm_show_mythnotify "${updates_detected_str}" "There is ${updates} updated package(s)..." 'warning' '12'
      else
        mm_show_mythnotify "There is no any updates for Yours system..." '' 'ok' '12'
      fi
    fi
  else
    # Do update check for SD card/USB key booted case
    if [ "x${MM_MYTHTV_DRAW_ON}" = "xeglfs" ] ; then
      mm_show_mythnotify "Checking in background ..." '' 'warning' '900' 'System Updates'
      /bin/su root -c "mm_do_online_update"
    else
      mm_show_mythnotify "Checking for system updates..." '' 'warning' '12' 'System Updates'
      mm_term_start "/bin/su root -c \" \
      echo ''; \
      echo ''; \
      echo '----- CHECK FOR FULL SYSTEM UPDATES -----'; \
      echo ''; \
      mm_do_online_update; \
      echo ''; \
      echo ''; \
      echo 'Press BACK or Esc for exit...'; \
      read \""
    fi
  fi
  exit 0
fi



#-------------------------------------------------------------------------------

if [ "x${command}" = "xinstall_updates" ] ; then
  mm_manage _install_updates &
  exit 0
fi
if [ "x${command}" = "x_install_updates" ] ; then
  if [ "x${MM_MINIMYTH_ONLINE_UPDATES_URL}" = "x" ] ; then
    # Do update update for PXE booted diskless case
    mm_show_mythnotify "Installing system updates..." '' 'warning' '12' 'System Updates'
    mm_term_start "/bin/su root -c \" \
    echo ''; \
    echo ''; \
    echo '--------- FULL SYSTEM UPDATE ---------'; \
    echo ''; \
    ${ssh_command} pacman -Syu --force --noconfirm; \
    echo ''; \
    echo '-------- DELETING OLD PACKAGES --------'; \
    echo ''; \
    ${ssh_command} pacman -Scq --force --noconfirm; \
    echo ''; \
    echo '----- RELOADING DAEMONS ON SERVER -----'; \
    echo ''; \
    ${ssh_command} /usr/bin/systemctl daemon-reload; \
    echo 'Done ! '; \
    echo ''; \
    echo '----- UPDATES WILL BE ACTIVATED AFTER REBOOT ! -----'; \
    echo ''; \
    echo 'Press BACK or Esc for exit...'; \
    read\""

    # If new PXE image was installed - then force reboot to load this ne image
    if [ -e /usr/local/share/myth-at-home/version ] ; then
      rc=`/usr/bin/cmp /etc/version /usr/local/share/myth-at-home/version`
      if [ -n "${rc}" ] ; then
        mm_manage reload_this_system &
      fi
    fi
  else
    # Do update for SD card/USB key booted case
    if [ "x${MM_MYTHTV_DRAW_ON}" = "xeglfs" ] ; then
      mm_show_mythnotify "Installing updates in background ..." '' 'warning' '900' 'System Updates'
      /bin/su root -c "mm_do_online_update doupdate"
    else
      mm_show_mythnotify "Installing system updates..." '' 'warning' '12' 'System Updates'
      mm_term_start "/bin/su root -c \" \
      echo ''; \
      echo ''; \
      echo '----- FULL SYSTEM UPDATE -----'; \
      echo ''; \
      mm_do_online_update doupdate; \
      echo ''; \
      echo '----- UPDATES WILL BE ACTIVATED AFTER REBOOT ! -----'; \
      echo ''; \
      echo 'Press BACK or Esc for exit...'; \
      read\""
    fi
  fi
  exit 0
fi



#-------------------------------------------------------------------------------

if [ "x${command}" = "xcheck_mythtv_db" ] ; then
  mm_term_start "/bin/su root -c \" \
  echo ''; \
  echo ''; \
  echo '----- SPRAWDZAM BAZE DANYCH MythTV -----'; \
  echo ''; \
  ${ssh_command} /usr/local/bin/maintenance/check-optimize-db.sh; \
  echo ''; \
  echo ''; \
  echo 'Press BACK or Esc for exit...'; \
  read\""
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xtest_network_speed" ] ; then
  mm_term_start "/bin/su root -c \" \
  echo ''; \
  echo ''; \
  /usr/bin/mm_test_network_speed; \
  echo ''; \
  echo ''; \
  echo 'Press BACK or Esc for exit...'; \
  read\""
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xbluray_rip_start" ] ; then
  mm_manage _bluray_rip_start &
  exit 0
fi
if [ "x${command}" = "x_bluray_rip_start" ] ; then
  /usr/bin/mm_rip_bluray_start &
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xbluray_copy_start" ] ; then
  mm_manage _bluray_copy_start &
  exit 0
fi
if [ "x${command}" = "x_bluray_copy_start" ] ; then
  /usr/bin/mm_copy_bluray_start &
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xbluray_rip_progress" ] ; then
  mm_manage _bluray_rip_progress &
  exit 0
fi
if [ "x${command}" = "x_bluray_rip_progress" ] ; then
  /usr/bin/mm_rip_bluray_show_progress &
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xbluray_rip_stop" ] ; then
  mm_manage _bluray_rip_stop &
  exit 0
fi
if [ "x${command}" = "x_bluray_rip_stop" ] ; then
  /usr/bin/mm_rip_bluray_stop &
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xnotify_added_remote" ] ; then
  mm_show_mythnotify "New IR remote connected/disconnected..." '' 'ok' '5'
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xnotify_added_input_device" ] ; then
  mm_show_mythnotify "New INPUT device added/removed..." '' 'ok' '5'
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xnotify_added_storage" ] ; then
  mm_show_mythnotify "New STORAGE device connected..." '' 'ok' '5'
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xnotify_removed_storage" ] ; then
  mm_show_mythnotify "Storage device removed..." '' 'ok' '5'
  exit 0
fi



echo "ERROR: Unknown command: \"${command}\""
echo "Exiting..."
echo ""

exit 1
