#!/bin/sh

# Script:
#  1.duplicates first rootfs_sise MBytes from SD card to eMMC
#  2.duplicates bootloader from SD card to eMMC
#
# safety_margina is mount of extra size beyond 1st + 2nd + 3rd partitions to be
# duplicated from SD card to eMMC. In MBytes
safety_margin=100

#-----------------------------










































ver=1.0

confirm() {

    echo " "
    echo "    Please confirm $1 by pressing 'y'"
    echo "    or press Enter (or any other key) to exit ..."
    echo " "

    read sel

    if [ x$sel = "xy" ] || [ x$sel = "xY" ] ; then
        return
    else
        echo "Exiting stript (by user no-confirm)"
        exit 0
    fi
}

what_platform() {

    platform=$(cat /sys/firmware/devicetree/base/compatible)
    echo "Ooo...You are running ${platform}"

    if [[ ${platform} =~ "allwinner" ]] ; then
        echo "Allwinner detected...Good!"
        platform_type=1
    elif [[ "${platform}" =~ "rk3328" ]] ; then
        echo "Rockchip 3328 detected..Good!"
        platform_type=2
    elif [[ "${platform}" =~ "rk3399" ]] ; then
        echo "Rockchip 3399 detected...Good!"
        platform_type=3
    elif [[ "${platform}" =~ "rk356" ]] ; then
        echo "Rockchip 3566/3568 detected...Good!"
        platform_type=4
    elif [[ "${platform}" =~ "rk3588" ]] ; then
        echo "Rockchip 3588 detected...Good!"
        platform_type=5
    elif [[ "${platform}" =~ "amlogic" ]] ; then
        echo "Amlogic detected...Good!"
        platform_type=6
    elif [[ "${platform}" =~ "raspberrypi" ]] ; then
        echo "Rpi detected...Good!"
        platform_type=7
    else
        echo "Unknown platform!"
        platform_type=10
    fi
}

get_size_to_copy() {

    start=$(cat /sys/block/${sdcard_dev}/${sdcard_dev}p3/start)
    size=$(cat /sys/block/${sdcard_dev}/${sdcard_dev}p3/size)
    end=$((${start} + $size))
    storage_usage=$((${end} / 2000))
}

duplicate_sdcard_to_emmc() {

    echo "  ==> copying from: SDcard(${sdcard_dev}) to: eMMC(${emmc_dev}) ..."
    dd if=/dev/${sdcard_dev} of=/dev/${emmc_dev} bs=1M count=$1 conv=fsync
}

update_emmc_bootloader_config() {

    echo "  ==> updating extlinux.conf on eMMC ..."
    partprobe /dev/${emmc_dev}
    mkdir -p /media/boot.emmc
    mount /dev/${emmc_dev}p1 /media/boot.emmc
    if [ -e /media/boot.emmc/extlinux/extlinux.conf ] ; then
        sed -e "s|${sdcard_dev}|${emmc_dev}|g" -i /media/boot.emmc/extlinux/extlinux.conf
        sync
        echo "extlinux.conf on eMMC updated successfuly ..."
    else
        echo "ERROR: can't update extlinux.conf on eMMC as extlinux.conf is not found."
        echo "You can update extlinux.conf namually by mounting eMMC /BOOT part and"
        echo "updating root=... to root=/dev/${emmc_dev}p2 in extlinux.conf file ..."
    fi
}

write_to_emmc_bootloader() {

    if [ $platform_type = 1 ] ; then
        # this is for allwinner
        echo "  ==> copying bootloader from ${sdcard_dev} to ${emmc_dev} ..."
        echo 0 > /sys/block/${emmc_dev}boot0/force_ro
        echo "  ==> erasing existing bootloader ..."
        dd if=/dev/zero of=/dev/${emmc_dev}boot0 bs=1k count=2048 conv=fsync
        dd if=/dev/zero of=/dev/${emmc_dev} bs=1k count=2048 conv=fsync
        echo "  ==> copying bootloader ..."
        dd if=/dev/${sdcard_dev} of=/dev/${emmc_dev}boot0 bs=1k count=2048 conv=fsync
        dd if=/dev/${sdcard_dev} of=/dev/${emmc_dev} bs=1k count=2048 conv=fsync
        echo "bootloader copied to eMMC ..."

    elif [ $platform_type = 2 ] ; then
        # this is for rockchip 3328
        update_emmc_bootloader_config

    elif [ $platform_type = 3 ] ; then
        # this is for rockchip 3399
        update_emmc_bootloader_config

    elif [ $platform_type = 4 ] ; then
        # this is for rockchip 356x
        update_emmc_bootloader_config

    elif [ $platform_type = 5 ] ; then
        # this is for rockchip 3588
        update_emmc_bootloader_config

    elif [ $platform_type = 6 ] ; then
        # this is for amlogic
        echo "  ==> erasing existing bootloader ..."
        echo "  ==> copying bootloader ..."

    elif [ $platform_type = 7 ] ; then
        # this is for rpi
        echo "  ==> erasing existing bootloader ..."
        echo "  ==> copying bootloader ..."

    else
        # this is for usupported
        echo "  ==> write_to_emmc_bootloader: unknown platform ..."
    fi
}

sdcard_dev=$(grep /media/boot /proc/mounts | awk '{print $1}' | sed 's/p[012]//g' | sed 's/\/dev\///g')
emmc_dev=""

for TYPE in /sys/class/block/mmcblk*/device/type; do
  if grep -q "MMC" "${TYPE}"; then
    emmc_dev="$(echo "${TYPE}" | awk -F/ '{print $5}')"
    break
  fi
done


echo " "
echo "--- MiniMyth2 to eMMC installer v$ver (c)Piotr Oniszczuk ---"
echo " "

what_platform
# mark anything above 5 (amlogic, rpi) as unsupported (yet)
if [ $platform_type -gt 5 ] ; then
  echo "Unsupported (yet) platform! Exiting ..."
  exit 1
fi

if [ -z "${emmc_dev}" ]; then
  echo "Can't determine eMMC device! Exiting ..."
  exit 1
fi

if [ "${sdcard_dev}" = "${emmc_dev}" ]; then
  echo "Your device is booted from the eMMC! Exiting ..."
  exit 1
fi

get_size_to_copy

echo " "
echo "System booted from : ${sdcard_dev}"
echo "eMMC device        : ${emmc_dev}"
echo "SDcard usage       : ${storage_usage}MB"

confirm "to copy ${storage_usage}MB from SD card to eMMC"

confirm "You ARE SURE to OVERWRITE eMMC content"

echo "copying of ${storage_usage}MB from SD card to eMMC ..."
duplicate_sdcard_to_emmc $((${storage_usage} + $safety_margin))
echo "copying to eMMC done ..."

echo "copying bootloader to eMMC ..."
confirm "to install bootloader on eMMC"
write_to_emmc_bootloader

echo " "
echo "Now you can remove SD card and reboot ..."
echo " "

exit 0
