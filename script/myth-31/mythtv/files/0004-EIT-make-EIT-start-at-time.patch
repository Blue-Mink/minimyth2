diff -Naur mythtv-master-20200207-g2869463-old/mythtv/libs/libmythtv/tv_rec.cpp mythtv-master-20200207-g2869463-new/mythtv/libs/libmythtv/tv_rec.cpp
--- mythtv-master-20200207-g2869463-old/mythtv/libs/libmythtv/tv_rec.cpp	2020-02-08 14:18:10.583333335 +0100
+++ mythtv-master-20200207-g2869463-new/mythtv/libs/libmythtv/tv_rec.cpp	2020-02-08 14:18:12.280000002 +0100
@@ -157,6 +157,10 @@
     m_eitTransportTimeout =
         max(gCoreContext->GetNumSetting("EITTransportTimeout", 5) * 60, 6);
     m_eitCrawlIdleStart = gCoreContext->GetNumSetting("EITCrawIdleStart", 60);
+    // EITCrawlDuration currently defaulted to 240min.
+    // if user wants diferent value, EITCrawlDuration setting shoud be added to settings table
+    m_eitCrawlDuration  = gCoreContext->GetNumSetting("EITCrawDuration", 240);
+    // m_eitCrawlDuration  = 240;
     m_audioSampleRateDB = gCoreContext->GetNumSetting("AudioSampleRate");
     m_overRecordSecNrml = gCoreContext->GetNumSetting("RecordOverTime");
     m_overRecordSecCat  = gCoreContext->GetNumSetting("CategoryOverTime") * 60;
@@ -1047,6 +1051,8 @@
         ClearFlags(kFlagEITScannerRunning, __FILE__, __LINE__);
         m_eitScanStartTime = MythDate::current().addSecs(
             m_eitCrawlIdleStart + eit_start_rand(m_eitTransportTimeout));
+        LOG(VB_GENERAL, LOG_INFO, LOC +
+            "EIT active scanner stopped by Recording or LiveTV");
     }
 
     // Handle different state transitions
@@ -1099,11 +1105,53 @@
     m_internalState = nextState;
     m_changeState = false;
 
-    m_eitScanStartTime = MythDate::current();
+    m_eitScanStartTime = QDateTime::currentDateTime();
     if (m_scanner && (m_internalState == kState_None))
     {
-        m_eitScanStartTime = m_eitScanStartTime.addSecs(
-            m_eitCrawlIdleStart + eit_start_rand(m_eitTransportTimeout));
+        int start_delay = eit_start_rand(m_eitTransportTimeout);
+        // If eitCrawlIdleStart is above 3600 then we enter schedulled mode.
+        // For values 3600 and below we have old behaviour.
+        if (m_eitCrawlIdleStart <= 3600)
+        {
+            m_eitScanStartTime = m_eitScanStartTime.addSecs(
+                m_eitCrawlIdleStart + start_delay);
+            m_eitScanEndTime   = m_eitScanStartTime.addYears(1);
+            LOG(VB_GENERAL, LOG_INFO, LOC +
+                QString("EIT active scan will resume after %1 sec.").arg(m_eitCrawlIdleStart + start_delay));
+        }
+        else
+        {
+            // Check is current event within active EIT scan window. If it is,
+            // then scanner will be resumed after 60sec.
+            // If not, set start/end times next nearest window.
+            if ((QDateTime::currentDateTime() < m_eitScanStartTime) ||
+               (QDateTime::currentDateTime() > m_eitScanEndTime))
+            {
+                m_eitScanStartTime.setTime(QTime(0, 0));
+                m_eitScanStartTime = m_eitScanStartTime.addSecs(m_eitCrawlIdleStart);
+                m_eitScanEndTime = m_eitScanStartTime.addSecs(m_eitCrawlDuration*60);
+
+                // distribute scan resume time evenly over m_eitTransportTimeout
+                m_eitScanStartTime = m_eitScanStartTime.addSecs(start_delay);
+
+                // IF we started after window, move start & end
+                // time to next day
+                if (QDateTime::currentDateTime() > m_eitScanEndTime)
+                {
+                    m_eitScanStartTime = m_eitScanStartTime.addDays(1);
+                    m_eitScanEndTime = m_eitScanEndTime.addDays(1);
+                }
+                LOG(VB_GENERAL, LOG_INFO, LOC +
+                    QString("EIT active scan will resume at:%1").arg(m_eitScanStartTime.toString(Qt::ISODate)));
+            }
+            else
+            {
+                m_eitScanStartTime = m_eitScanStartTime.addSecs(60 + start_delay);
+                LOG(VB_GENERAL, LOG_INFO, LOC +
+                    QString("EIT active scan is in %1min. window. If enabled, will (re)start after %2 sec.")
+                    .arg(m_eitCrawlDuration).arg(60 + start_delay));
+            }
+        }
     }
     else
     {
@@ -1305,19 +1353,58 @@
     SetFlags(kFlagRunMainLoop, __FILE__, __LINE__);
     ClearFlags(kFlagExitPlayer | kFlagFinishRecording, __FILE__, __LINE__);
 
-    m_eitScanStartTime = MythDate::current();
+    m_eitScanStartTime = QDateTime::currentDateTime();
     // check whether we should use the EITScanner in this TVRec instance
     if (CardUtil::IsEITCapable(m_genOpt.m_inputType) &&
         (!GetDTVChannel() || GetDTVChannel()->IsMaster()) &&
         (m_dvbOpt.m_dvbEitScan || get_use_eit(m_inputId)))
     {
         m_scanner = new EITScanner(m_inputId);
-        m_eitScanStartTime = m_eitScanStartTime.addSecs(
+        int start_delay = eit_start_rand(m_eitTransportTimeout);
+
+        if (m_eitCrawlIdleStart <= 3600)
+        {
+            m_eitScanStartTime = m_eitScanStartTime.addSecs(m_eitCrawlIdleStart + start_delay);
+
+            m_eitScanEndTime   = m_eitScanStartTime.addYears(1);
+            LOG(VB_GENERAL, LOG_INFO, LOC +
+                QString("EIT active scan start after %1 sec.").arg(m_eitCrawlIdleStart + start_delay));
+        }
+        else
+        {
+            // Set initial scan start / end times to
+            // 0:00+eitCrawlIdleStart / eitCrawlIdleStart+m_eitCrawlDuration.
+            m_eitScanStartTime.setTime(QTime(0, 0));
+            m_eitScanStartTime = m_eitScanStartTime.addSecs(m_eitCrawlIdleStart + start_delay);
+            m_eitScanEndTime = m_eitScanStartTime.addSecs(m_eitCrawlDuration*60);
+
+            // If we are in scan window then delay and randomize start
+            if (QDateTime::currentDateTime() > m_eitScanStartTime && QDateTime::currentDateTime() < m_eitScanEndTime)
+            {
+                m_eitScanStartTime = QDateTime::currentDateTime();
+                m_eitScanStartTime = m_eitScanStartTime.addSecs(60 + start_delay);
+                LOG(VB_GENERAL, LOG_INFO, LOC +
+                   QString("EIT scanner is in window & will start: %1").arg(m_eitScanStartTime.toString(Qt::ISODate)));
+            }
+
+            // If we are started after scan window, then move start & end
+            // times to next day
+            if (QDateTime::currentDateTime() > m_eitScanEndTime)
+            {
+                m_eitScanStartTime = m_eitScanStartTime.addDays(1);
+                m_eitScanEndTime = m_eitScanEndTime.addDays(1);
+            }
+
+            LOG(VB_GENERAL, LOG_INFO, LOC +
+                QString("EIT active scan window: %1").arg(m_eitScanStartTime.toString(Qt::ISODate)) +
+                QString(" <--> %1 ").arg(m_eitScanEndTime.toString(Qt::ISODate)) + QString("(%1min duration)").arg(m_eitCrawlDuration));
+        }        m_eitScanStartTime = m_eitScanStartTime.addSecs(
             m_eitCrawlIdleStart + eit_start_rand(m_eitTransportTimeout));
     }
     else
     {
         m_eitScanStartTime = m_eitScanStartTime.addYears(1);
+        m_eitScanEndTime = m_eitScanStartTime;
     }
 
     while (HasFlags(kFlagRunMainLoop))
@@ -1458,46 +1545,61 @@
         }
 
         if (m_scanner && m_channel &&
-            MythDate::current() > m_eitScanStartTime)
+            (QDateTime::currentDateTime() > m_eitScanStartTime || QDateTime::currentDateTime() > m_eitScanEndTime))
         {
             if (!m_dvbOpt.m_dvbEitScan)
             {
                 LOG(VB_EIT, LOG_INFO, LOC +
                     "EIT scanning disabled for this input.");
                 m_eitScanStartTime = m_eitScanStartTime.addYears(1);
+                m_eitScanEndTime = m_eitScanEndTime.addYears(1);
             }
             else if (!get_use_eit(GetInputId()))
             {
                 LOG(VB_EIT, LOG_INFO, LOC +
                     "EIT scanning disabled for all sources on this input.");
                 m_eitScanStartTime = m_eitScanStartTime.addYears(1);
+                m_eitScanEndTime = m_eitScanEndTime.addYears(1);
             }
             else
             {
-                // Check if another card in the same input group is
-                // busy.  This could be either virtual DVB-devices or
-                // a second tuner on a single card
-                s_inputsLock.lockForRead();
-                bool allow_eit = true;
-                vector<uint> inputids =
-                    CardUtil::GetConflictingInputs(m_inputId);
-                InputInfo busy_input;
-                for (uint i = 0; i < inputids.size() && allow_eit; ++i)
-                    allow_eit = !RemoteIsBusy(inputids[i], busy_input);
-                if (allow_eit)
-                {
-                    m_scanner->StartActiveScan(this, m_eitTransportTimeout);
-                    SetFlags(kFlagEITScannerRunning, __FILE__, __LINE__);
-                    m_eitScanStartTime =
-                        QDateTime::currentDateTime().addYears(1);
-                }
-                else
+
+                if (QDateTime::currentDateTime() > m_eitScanStartTime && QDateTime::currentDateTime() < m_eitScanEndTime)
                 {
-                    LOG(VB_EIT, LOG_INFO, LOC + QString(
+
+                    // Check if another card in the same input group is
+                    // busy.  This could be either virtual DVB-devices or
+                    // a second tuner on a single card
+                    s_inputsLock.lockForRead();
+                    bool allow_eit = true;
+                    vector<uint> inputids =
+                        CardUtil::GetConflictingInputs(m_inputId);
+                    InputInfo busy_input;
+                    for (uint i = 0; i < inputids.size() && allow_eit; ++i)
+                        allow_eit = !RemoteIsBusy(inputids[i], busy_input);
+                    if (allow_eit)
+                    {
+                        m_scanner->StartActiveScan(this, m_eitTransportTimeout);
+                        SetFlags(kFlagEITScannerRunning, __FILE__, __LINE__);
+                        m_eitScanStartTime = MythDate::current().addYears(1);
+                        LOG(VB_GENERAL, LOG_INFO, LOC +
+                            "EIT active scan started.");
+                    }
+                    else
+                    {
+                        LOG(VB_GENERAL, LOG_INFO, LOC + QString(
                             "Postponing EIT scan on input [%1] "
                             "because input %2 is busy")
-                        .arg(m_inputId).arg(busy_input.m_inputId));
-                    m_eitScanStartTime = m_eitScanStartTime.addSecs(300);
+                            .arg(m_inputId).arg(busy_input.m_inputId));
+                        m_eitScanStartTime = m_eitScanStartTime.addSecs(300);
+                    }
+                }
+                else if (QDateTime::currentDateTime() > m_eitScanEndTime && HasFlags(kFlagEITScannerRunning))
+                {
+                    m_scanner->StopActiveScan();
+                    ClearFlags(kFlagEITScannerRunning, __FILE__, __LINE__);
+                    LOG(VB_GENERAL, LOG_INFO, LOC +
+                        "EIT active scan stopped by reaching time window.");
                 }
                 s_inputsLock.unlock();
             }
diff -Naur mythtv-master-20200207-g2869463-old/mythtv/libs/libmythtv/tv_rec.h mythtv-master-20200207-g2869463-new/mythtv/libs/libmythtv/tv_rec.h
--- mythtv-master-20200207-g2869463-old/mythtv/libs/libmythtv/tv_rec.h	2020-02-08 14:18:10.583333335 +0100
+++ mythtv-master-20200207-g2869463-new/mythtv/libs/libmythtv/tv_rec.h	2020-02-08 14:18:12.280000002 +0100
@@ -360,6 +360,7 @@
     bool               m_runJobOnHostOnly         {false};
     int                m_eitCrawlIdleStart        {60};
     int                m_eitTransportTimeout      {5*60};
+    int                m_eitCrawlDuration         {240};
     int                m_audioSampleRateDB        {0};
     int                m_overRecordSecNrml        {0};
     int                m_overRecordSecCat         {0};
@@ -390,6 +391,7 @@
     TuningQueue        m_tuningRequests;
     TuningRequest      m_lastTuningRequest        {0};
     QDateTime          m_eitScanStartTime;
+    QDateTime          m_eitScanEndTime;
     mutable QMutex     m_triggerEventLoopLock     {QMutex::NonRecursive};
     QWaitCondition     m_triggerEventLoopWait;
     bool               m_triggerEventLoopSignal   {false};
diff -Naur mythtv-master-20200207-g2869463-old/mythtv/programs/mythtv-setup/backendsettings.cpp mythtv-master-20200207-g2869463-new/mythtv/programs/mythtv-setup/backendsettings.cpp
--- mythtv-master-20200207-g2869463-old/mythtv/programs/mythtv-setup/backendsettings.cpp	2020-02-08 14:18:10.383333335 +0100
+++ mythtv-master-20200207-g2869463-new/mythtv/programs/mythtv-setup/backendsettings.cpp	2020-02-08 14:18:12.280000002 +0100
@@ -381,12 +381,15 @@
 
 static GlobalSpinBoxSetting *EITCrawIdleStart()
 {
-    auto *gc = new GlobalSpinBoxSetting("EITCrawIdleStart", 30, 7200, 30);
+    auto *gc = new GlobalSpinBoxSetting("EITCrawIdleStart", 30, 86400, 20);
     gc->setLabel(QObject::tr("Backend idle before EIT crawl (secs)"));
     gc->setValue(60);
     QString help = QObject::tr(
-        "The minimum number of seconds after a recorder becomes idle "
-        "to wait before MythTV begins collecting EIT listings data.");
+        "The number of seconds for idle recorders when collecting EIT listings begins. "
+        "If this value is higher than 3600 sec, MythTV will switch to schedulled mode"
+        " where collecting starts this number of seconds after midnight and will go"
+        " for EITCrawDuration or if not defined, 4h time window."
+        );
     gc->setHelpText(help);
     return gc;
 }
