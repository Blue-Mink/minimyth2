From 8bd3f3c6b20fef892691faf480684a3b19f80d72 Mon Sep 17 00:00:00 2001
From: Alyssa Rosenzweig <alyssa@collabora.com>
Date: Tue, 5 Oct 2021 16:01:00 -0400
Subject: [PATCH 1/8] panfrost: Detect implementations support AFBC

AFBC is an optional feature on Bifrost. If it is missing, a bit will be
set in the poorly named AFBC_FEATURES register. Check this so we can act
appropriately.

Signed-off-by: Alyssa Rosenzweig <alyssa@collabora.com>
---
 src/panfrost/lib/pan_device.h |  1 +
 src/panfrost/lib/pan_props.c  | 14 ++++++++++++++
 2 files changed, 15 insertions(+)

diff --git a/src/panfrost/lib/pan_device.h b/src/panfrost/lib/pan_device.h
index eddd96a1788..5de3dcbdbc6 100644
--- a/src/panfrost/lib/pan_device.h
+++ b/src/panfrost/lib/pan_device.h
@@ -160,6 +160,7 @@ struct panfrost_device {
         unsigned thread_tls_alloc;
         struct panfrost_tiler_features tiler_features;
         unsigned quirks;
+        bool has_afbc;
 
         /* Table of formats, indexed by a PIPE format */
         const struct panfrost_format *formats;
diff --git a/src/panfrost/lib/pan_props.c b/src/panfrost/lib/pan_props.c
index 551d9713d3e..44d626fd6ff 100644
--- a/src/panfrost/lib/pan_props.c
+++ b/src/panfrost/lib/pan_props.c
@@ -214,6 +214,19 @@ panfrost_model_name(unsigned gpu_id)
         }
 }
 
+/* Check for AFBC hardware support. AFBC is introduced in v5. Implementations
+ * may omit it, signaled as a nonzero value in the AFBC_FEATURES property. */
+
+static bool
+panfrost_query_afbc(int fd, unsigned arch)
+{
+        unsigned reg = panfrost_query_raw(fd,
+                                          DRM_PANFROST_PARAM_AFBC_FEATURES,
+                                          false, 0);
+
+        return (arch >= 5) && (reg == 0);
+}
+
 void
 panfrost_open_device(void *memctx, int fd, struct panfrost_device *dev)
 {
@@ -228,6 +241,7 @@ panfrost_open_device(void *memctx, int fd, struct panfrost_device *dev)
         dev->quirks = panfrost_get_quirks(dev->gpu_id, revision);
         dev->compressed_formats = panfrost_query_compressed_formats(fd);
         dev->tiler_features = panfrost_query_tiler_features(fd);
+        dev->has_afbc = panfrost_query_afbc(fd, dev->arch);
 
         if (dev->quirks & HAS_SWIZZLES)
                 dev->formats = panfrost_pipe_format_v6;
-- 
GitLab


From cd5e92d9040dfe0d0330d1c55e933e0e69ee597c Mon Sep 17 00:00:00 2001
From: Alyssa Rosenzweig <alyssa@collabora.com>
Date: Tue, 5 Oct 2021 16:05:56 -0400
Subject: [PATCH 2/8] panfrost,panvk: Use dev->has_afbc instead of quirks

This uses the new property for AFBC we've added. The AFBC quirk is
applied only to v4, and we only set dev->has_afbc on v5+ so this is not
a regression. It now respects the hardware-specific AFBC disable.

Signed-off-by: Alyssa Rosenzweig <alyssa@collabora.com>
---
 src/gallium/drivers/panfrost/pan_resource.c |  4 ++--
 src/gallium/drivers/panfrost/pan_screen.c   | 12 ++++--------
 src/panfrost/vulkan/panvk_image.c           |  2 +-
 3 files changed, 7 insertions(+), 11 deletions(-)

diff --git a/src/gallium/drivers/panfrost/pan_resource.c b/src/gallium/drivers/panfrost/pan_resource.c
index 571dc69ebcc..1e2453599b6 100644
--- a/src/gallium/drivers/panfrost/pan_resource.c
+++ b/src/gallium/drivers/panfrost/pan_resource.c
@@ -355,8 +355,8 @@ panfrost_should_afbc(struct panfrost_device *dev,
         if (pres->base.bind & ~valid_binding)
                 return false;
 
-        /* AFBC introduced with Mali T760 */
-        if (dev->quirks & MIDGARD_NO_AFBC)
+        /* AFBC support is optional */
+        if (!dev->has_afbc)
                 return false;
 
         /* AFBC<-->staging is expensive */
diff --git a/src/gallium/drivers/panfrost/pan_screen.c b/src/gallium/drivers/panfrost/pan_screen.c
index 05ccda9c947..567fddf311b 100644
--- a/src/gallium/drivers/panfrost/pan_screen.c
+++ b/src/gallium/drivers/panfrost/pan_screen.c
@@ -572,12 +572,9 @@ panfrost_walk_dmabuf_modifiers(struct pipe_screen *screen,
 {
         /* Query AFBC status */
         struct panfrost_device *dev = pan_device(screen);
-        bool afbc = panfrost_format_supports_afbc(dev, format);
+        bool afbc = dev->has_afbc && panfrost_format_supports_afbc(dev, format);
         bool ytr = panfrost_afbc_can_ytr(format);
 
-        /* Don't advertise AFBC before T760 */
-        afbc &= !(dev->quirks & MIDGARD_NO_AFBC);
-
         unsigned count = 0;
 
         for (unsigned i = 0; i < PAN_MODIFIER_COUNT; ++i) {
@@ -840,15 +837,14 @@ panfrost_create_screen(int fd, struct renderonly *ro)
         panfrost_open_device(screen, fd, dev);
 
         if (dev->debug & PAN_DBG_NO_AFBC)
-                dev->quirks |= MIDGARD_NO_AFBC;
+                dev->has_afbc = false;
 
-        /* XXX: AFBC is currently broken on Bifrost in a few different ways
+        /* XXX: AFBC is currently broken on Bifrost
          *
          *  - Preload is broken if the effective tile size is not 16x16
-         *  - Some systems lack AFBC but we need kernel changes to know that
          */
         if (dev->arch == 7)
-                dev->quirks |= MIDGARD_NO_AFBC;
+                dev->has_afbc = false;
 
         dev->ro = ro;
 
diff --git a/src/panfrost/vulkan/panvk_image.c b/src/panfrost/vulkan/panvk_image.c
index 6ef706b86ba..cbefd3d2064 100644
--- a/src/panfrost/vulkan/panvk_image.c
+++ b/src/panfrost/vulkan/panvk_image.c
@@ -183,7 +183,7 @@ panvk_image_select_mod(VkDevice _device,
    if (pCreateInfo->samples > 1)
       return DRM_FORMAT_MOD_ARM_16X16_BLOCK_U_INTERLEAVED;
 
-   if (pdev->quirks & MIDGARD_NO_AFBC)
+   if (!pdev->has_afbc)
       return DRM_FORMAT_MOD_ARM_16X16_BLOCK_U_INTERLEAVED;
 
    /* Only a small selection of formats are AFBC'able */
-- 
GitLab


From e2f5cf803eee0668019cf28b048b25310a103d58 Mon Sep 17 00:00:00 2001
From: Alyssa Rosenzweig <alyssa@collabora.com>
Date: Tue, 5 Oct 2021 16:09:27 -0400
Subject: [PATCH 3/8] panfrost: Remove unused MIDGARD_NO_AFBC quirk

This is not Midgard-specific and is handled outside of the quirks
infrastructure now.

Signed-off-by: Alyssa Rosenzweig <alyssa@collabora.com>
---
 src/panfrost/include/panfrost-quirks.h | 8 +++-----
 1 file changed, 3 insertions(+), 5 deletions(-)

diff --git a/src/panfrost/include/panfrost-quirks.h b/src/panfrost/include/panfrost-quirks.h
index cede8254dc0..804dc311c29 100644
--- a/src/panfrost/include/panfrost-quirks.h
+++ b/src/panfrost/include/panfrost-quirks.h
@@ -62,8 +62,7 @@
 /* Has some missing formats for typed loads */
 #define MIDGARD_MISSING_LOADS (1 << 9)
 
-/* Lack support for AFBC */
-#define MIDGARD_NO_AFBC (1 << 10)
+/* bit 10 unused */
 
 /* Does this GPU support anisotropic filtering? */
 #define HAS_ANISOTROPIC (1 << 11)
@@ -86,12 +85,11 @@ panfrost_get_quirks(unsigned gpu_id, unsigned gpu_revision)
         case 0x620:
                 return MIDGARD_QUIRKS | MIDGARD_SFBD
                         | MIDGARD_NO_TYPED_BLEND_LOADS
-                        | NO_BLEND_PACKS | MIDGARD_NO_AFBC
-                        | NO_TILE_ENABLE_MAP;
+                        | NO_BLEND_PACKS | NO_TILE_ENABLE_MAP;
 
         case 0x720:
                 return MIDGARD_QUIRKS | MIDGARD_SFBD | MIDGARD_NO_HIER_TILING
-                        | MIDGARD_NO_AFBC | NO_TILE_ENABLE_MAP;
+                        | NO_TILE_ENABLE_MAP;
 
         case 0x820:
         case 0x830:
-- 
GitLab


From 6510effd464e7dfc27b38ecd754563d36a6f409d Mon Sep 17 00:00:00 2001
From: Alyssa Rosenzweig <alyssa@collabora.com>
Date: Tue, 5 Oct 2021 16:51:03 -0400
Subject: [PATCH 4/8] panfrost: Fix "reverse issue order?" flag

This is only on v7, not v6.

Fixes: b76420be1f1 ("panfrost: Split command stream descriptor
definitions per-gen")
Signed-off-by: Alyssa Rosenzweig <alyssa@collabora.com>
---
 src/panfrost/lib/genxml/v6.xml | 5 -----
 src/panfrost/lib/genxml/v7.xml | 4 ++--
 2 files changed, 2 insertions(+), 7 deletions(-)

diff --git a/src/panfrost/lib/genxml/v6.xml b/src/panfrost/lib/genxml/v6.xml
index 64bf6998d9d..9a6a59be3af 100644
--- a/src/panfrost/lib/genxml/v6.xml
+++ b/src/panfrost/lib/genxml/v6.xml
@@ -1095,11 +1095,6 @@
     <field name="Chunk Size" size="12" start="7:0" type="uint"/>
     <field name="AFBC Split Block Enable" size="1" start="7:18" type="bool"/>
     <field name="AFBC Wide Block Enable" size="1" start="7:19" type="bool"/>
-
-    <!-- Flag in v7 to effectively disable AFBC as a race condition workaround
-    when in-place rendering is used with the AFBC block size differing
-    from the effective tile size (XXX: does v6 need a different workaround?) -->
-    <field name="Reverse Issue Order" size="1" start="7:20" type="bool"/>
     <field name="YUV Transform Enable" size="1" start="7:17" type="bool"/>
     <field name="Body" size="64" start="8:0" type="address"/>
     <field name="Body Size" size="32" start="10:0" type="uint"/>
diff --git a/src/panfrost/lib/genxml/v7.xml b/src/panfrost/lib/genxml/v7.xml
index 770df9af7e1..97ab7f9b7c6 100644
--- a/src/panfrost/lib/genxml/v7.xml
+++ b/src/panfrost/lib/genxml/v7.xml
@@ -1135,14 +1135,14 @@
     <field name="Header" size="64" start="4:0" type="address"/>
     <field name="Row Stride" size="13" start="6:0" type="uint"/>
     <field name="Chunk Size" size="12" start="7:0" type="uint"/>
+    <field name="YUV Transform Enable" size="1" start="7:17" type="bool"/>
     <field name="AFBC Split Block Enable" size="1" start="7:18" type="bool"/>
     <field name="AFBC Wide Block Enable" size="1" start="7:19" type="bool"/>
 
     <!-- Flag in v7 to effectively disable AFBC as a race condition workaround
     when in-place rendering is used with the AFBC block size differing
-    from the effective tile size (XXX: does v6 need a different workaround?) -->
+    from the effective tile size -->
     <field name="Reverse Issue Order" size="1" start="7:20" type="bool"/>
-    <field name="YUV Transform Enable" size="1" start="7:17" type="bool"/>
     <field name="Body" size="64" start="8:0" type="address"/>
     <field name="Body Size" size="32" start="10:0" type="uint"/>
   </struct>
-- 
GitLab


From 010a25386489e218333c946cc8efbd5bb385cd70 Mon Sep 17 00:00:00 2001
From: Alyssa Rosenzweig <alyssa@collabora.com>
Date: Tue, 5 Oct 2021 16:56:16 -0400
Subject: [PATCH 5/8] panfrost: Add missing ZS reverse issue order flag

Same semantics as the colour AFBC counterpart.

Signed-off-by: Alyssa Rosenzweig <alyssa@collabora.com>
---
 src/panfrost/lib/genxml/v7.xml | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/panfrost/lib/genxml/v7.xml b/src/panfrost/lib/genxml/v7.xml
index 97ab7f9b7c6..29648d073e5 100644
--- a/src/panfrost/lib/genxml/v7.xml
+++ b/src/panfrost/lib/genxml/v7.xml
@@ -1086,6 +1086,7 @@
     <field name="ZS MSAA" size="2" start="3:8" default="Single" type="MSAA"/>
     <field name="ZS Clean Pixel Write Enable" size="1" start="3:10" type="bool"/>
     <field name="CRC Render Target" size="4" start="3:11" type="uint"/>
+    <field name="ZS AFBC Reverse Issue Order" size="1" start="3:14" type="bool"/>
     <field name="S Write Format" size="4" start="3:16" type="S Format"/>
     <field name="S Block Format" size="4" start="3:20" type="Block Format"/>
     <field name="S MSAA" size="2" start="3:24" default="Single" type="MSAA"/>
-- 
GitLab


From 016330102f25b3351ef2887cef4d7808fbcac728 Mon Sep 17 00:00:00 2001
From: Alyssa Rosenzweig <alyssa@collabora.com>
Date: Tue, 5 Oct 2021 16:56:44 -0400
Subject: [PATCH 6/8] panfrost: Shrink CRC Render Target field

This is only 3 bits, not 4. Don't shadow the AFBC reverse issue order
flag.

Signed-off-by: Alyssa Rosenzweig <alyssa@collabora.com>
---
 src/panfrost/lib/genxml/v7.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/panfrost/lib/genxml/v7.xml b/src/panfrost/lib/genxml/v7.xml
index 29648d073e5..0aafb72db2f 100644
--- a/src/panfrost/lib/genxml/v7.xml
+++ b/src/panfrost/lib/genxml/v7.xml
@@ -1085,7 +1085,7 @@
     <field name="ZS Block Format" size="4" start="3:4" type="Block Format"/>
     <field name="ZS MSAA" size="2" start="3:8" default="Single" type="MSAA"/>
     <field name="ZS Clean Pixel Write Enable" size="1" start="3:10" type="bool"/>
-    <field name="CRC Render Target" size="4" start="3:11" type="uint"/>
+    <field name="CRC Render Target" size="3" start="3:11" type="uint"/>
     <field name="ZS AFBC Reverse Issue Order" size="1" start="3:14" type="bool"/>
     <field name="S Write Format" size="4" start="3:16" type="S Format"/>
     <field name="S Block Format" size="4" start="3:20" type="Block Format"/>
-- 
GitLab


From 7dcb703deaa32ce22476003656ce19bd9a7d4177 Mon Sep 17 00:00:00 2001
From: Alyssa Rosenzweig <alyssa@collabora.com>
Date: Tue, 5 Oct 2021 19:20:03 -0400
Subject: [PATCH 7/8] WIP: panfrost: Workaround TSIX 2033

---
 src/panfrost/lib/pan_cs.c | 65 +++++++++++++++++++++++++++++++++++++--
 1 file changed, 62 insertions(+), 3 deletions(-)

diff --git a/src/panfrost/lib/pan_cs.c b/src/panfrost/lib/pan_cs.c
index c5ae5460025..055f88530da 100644
--- a/src/panfrost/lib/pan_cs.c
+++ b/src/panfrost/lib/pan_cs.c
@@ -551,6 +551,63 @@ pan_emit_rt(const struct pan_fb_info *fb,
         }
 }
 
+#if PAN_ARCH >= 6
+/* TSIX-2033 workaround */
+static enum mali_pre_post_frame_shader_mode
+pan_fix_frame_shader_mode(enum mali_pre_post_frame_shader_mode mode, bool force_clean_tile)
+{
+        /* Cannot force clean_tile_write with INTERSECT */
+        if (force_clean_tile && mode == MALI_PRE_POST_FRAME_SHADER_MODE_INTERSECT)
+                return MALI_PRE_POST_FRAME_SHADER_MODE_ALWAYS;
+        else
+                return mode;
+}
+
+/*
+ * Regardless of clean_tile_write_enable, the hardware writes clean tiles if
+ * the effective tile size differs from the superblock size of any enabled AFBC
+ * render target. Check this condition.
+ */
+static bool
+pan_force_clean_write_rt(const struct pan_image_view *rt, unsigned tile_size)
+{
+        if (!drm_is_afbc(rt->image->layout.modifier))
+                return false;
+
+        unsigned superblock = panfrost_block_dim(rt->image->layout.modifier, true, 0);
+
+        assert(superblock >= 16);
+        assert(tile_size <= 16*16);
+
+        /* Tile size and superblock differ unless they are both 16x16 */
+        return !(superblock == 16 && tile_size == 16*16);
+}
+
+static bool
+pan_force_clean_write(const struct pan_fb_info *fb, unsigned tile_size)
+{
+        /* Maximum tile size */
+        assert(tile_size <= 16*16);
+
+        for (unsigned i = 0; i < fb->rt_count; ++i) {
+                if (fb->rts[i].view && !fb->rts[i].discard &&
+                    pan_force_clean_write_rt(fb->rts[i].view, tile_size))
+                        return true;
+        }
+
+        if (fb->zs.view.zs && !fb->zs.discard.z &&
+            pan_force_clean_write_rt(fb->zs.view.zs, tile_size))
+                return true;
+
+        if (fb->zs.view.s && !fb->zs.discard.s &&
+            pan_force_clean_write_rt(fb->zs.view.s, tile_size))
+                return true;
+
+        return false;
+}
+
+#endif
+
 static unsigned
 pan_emit_mfbd(const struct panfrost_device *dev,
               const struct pan_fb_info *fb,
@@ -574,11 +631,13 @@ pan_emit_mfbd(const struct panfrost_device *dev,
 
         pan_section_pack(fbd, FRAMEBUFFER, PARAMETERS, cfg) {
 #if PAN_ARCH >= 6
+                bool force_clean_write = pan_force_clean_write(fb, tile_size);
+
                 cfg.sample_locations =
                         panfrost_sample_positions(dev, pan_sample_pattern(fb->nr_samples));
-                cfg.pre_frame_0 = fb->bifrost.pre_post.modes[0];
-                cfg.pre_frame_1 = fb->bifrost.pre_post.modes[1];
-                cfg.post_frame = fb->bifrost.pre_post.modes[2];
+                cfg.pre_frame_0 = pan_fix_frame_shader_mode(fb->bifrost.pre_post.modes[0], force_clean_write);
+                cfg.pre_frame_1 = pan_fix_frame_shader_mode(fb->bifrost.pre_post.modes[1], force_clean_write);
+                cfg.post_frame  = pan_fix_frame_shader_mode(fb->bifrost.pre_post.modes[2], force_clean_write);
                 cfg.frame_shader_dcds = fb->bifrost.pre_post.dcds.gpu;
                 cfg.tiler = tiler_ctx->bifrost;
 #endif
-- 
GitLab


From c6d20427ac8d2ca0d03af97021a649dc08aa145a Mon Sep 17 00:00:00 2001
From: Alyssa Rosenzweig <alyssa@collabora.com>
Date: Tue, 5 Oct 2021 16:18:22 -0400
Subject: [PATCH 8/8] panfrost: Enable AFBC on v7

The bugs blocking this have been resolved, so flip on AFBC again and get
moar fps.

Signed-off-by: Alyssa Rosenzweig <alyssa@collabora.com>
---
 src/gallium/drivers/panfrost/pan_screen.c | 7 -------
 1 file changed, 7 deletions(-)

diff --git a/src/gallium/drivers/panfrost/pan_screen.c b/src/gallium/drivers/panfrost/pan_screen.c
index 567fddf311b..bbaf6f753d7 100644
--- a/src/gallium/drivers/panfrost/pan_screen.c
+++ b/src/gallium/drivers/panfrost/pan_screen.c
@@ -839,13 +839,6 @@ panfrost_create_screen(int fd, struct renderonly *ro)
         if (dev->debug & PAN_DBG_NO_AFBC)
                 dev->has_afbc = false;
 
-        /* XXX: AFBC is currently broken on Bifrost
-         *
-         *  - Preload is broken if the effective tile size is not 16x16
-         */
-        if (dev->arch == 7)
-                dev->has_afbc = false;
-
         dev->ro = ro;
 
         /* Check if we're loading against a supported GPU model. */
-- 
GitLab

