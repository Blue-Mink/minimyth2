diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/HLS/httplivestream.cpp mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/HLS/httplivestream.cpp
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/HLS/httplivestream.cpp	2014-05-05 11:57:53.195618582 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/HLS/httplivestream.cpp	2014-05-05 11:58:08.402198234 +0200
@@ -121,7 +121,7 @@
         m_audioBitrate = 64000;
 
     if (m_segmentSize == 0)
-        m_segmentSize = 10;
+        m_segmentSize = 4;
 
     if (m_audioOnlyBitrate == 0)
         m_audioOnlyBitrate = 64000;
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/programs/mythbackend/services/content.cpp mythtv-0.27-20140504-ge2acf0d-new/mythtv/programs/mythbackend/services/content.cpp
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/programs/mythbackend/services/content.cpp	2014-05-05 11:57:50.798965634 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/programs/mythbackend/services/content.cpp	2014-05-05 11:58:08.605530402 +0200
@@ -845,7 +845,7 @@
 
     HTTPLiveStream *hls = new
         HTTPLiveStream(sFullFileName, nWidth, nHeight, nBitrate, nAudioBitrate,
-                       nMaxSegments, 10, 32000, nSampleRate);
+                       nMaxSegments, 0, 0, nSampleRate);
 
     if (!hls)
     {
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/programs/mythtranscode/transcode.cpp mythtv-0.27-20140504-ge2acf0d-new/mythtv/programs/mythtranscode/transcode.cpp
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/programs/mythtranscode/transcode.cpp	2014-05-05 11:57:50.732299351 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/programs/mythtranscode/transcode.cpp	2014-05-05 11:58:08.605530402 +0200
@@ -455,12 +455,37 @@
 
         if (hlsMode)
         {
-            int segmentSize = 10;
+
+            if (hlsStreamID == -1)
+            {
+                hls = new HTTPLiveStream(inputname, newWidth, newHeight,
+                                         cmdBitrate,
+                                         cmdAudioBitrate, hlsMaxSegments,
+                                         0, 0);
+
+                hlsStreamID = hls->GetStreamID();
+                if (!hls || hlsStreamID == -1)
+                {
+                    LOG(VB_GENERAL, LOG_ERR, "Unable to create new stream");
+                 SetPlayerContext(NULL);
+                    delete avfw;
+                    if (avfw2)
+                        delete avfw2;
+                    return REENCODE_ERROR;
+                }
+            }
+
+            int segmentSize = hls->GetSegmentSize();
             int audioOnlyBitrate = 0;
 
+
+            LOG(VB_GENERAL, LOG_NOTICE,
+                QString("HLS: Using segment size of %1 seconds")
+                    .arg(segmentSize));
+
             if (!hlsDisableAudioOnly)
             {
-                audioOnlyBitrate = 48000;
+                audioOnlyBitrate = hls->GetAudioOnlyBitrate();
 
                 avfw2 = new AVFormatWriter();
 
@@ -501,25 +526,6 @@
 # endif
 #endif
 
-            if (hlsStreamID == -1)
-            {
-                hls = new HTTPLiveStream(inputname, newWidth, newHeight,
-                                         cmdBitrate,
-                                         cmdAudioBitrate, hlsMaxSegments,
-                                         segmentSize, audioOnlyBitrate);
-
-                hlsStreamID = hls->GetStreamID();
-                if (!hls || hlsStreamID == -1)
-                {
-                    LOG(VB_GENERAL, LOG_ERR, "Unable to create new stream");
-                    SetPlayerContext(NULL);
-                    delete avfw;
-                    if (avfw2)
-                        delete avfw2;
-                    return REENCODE_ERROR;
-                }
-            }
-
             hls->UpdateStatus(kHLSStatusStarting);
             hls->UpdateStatusMessage("Transcoding Starting");
             hls->UpdateSizeInfo(newWidth, newHeight, video_width, video_height);
