From 4c5585a0d4f4d6cd3ea02b9b786518b767587e16 Mon Sep 17 00:00:00 2001
From: Stuart Morgan <smorgan@mythtv.org>
Date: Mon, 14 Jul 2014 00:16:13 +0100
Subject: [PATCH 24/24] UPnP: Try to use more specific containers where
 possible.

This includes Album container support complete with artist info and
artwork. This should be a significant improvement when browsing by
album on clients that utilise this additional metadata.
---
 mythtv/libs/libmythupnp/upnpcds.cpp          |   65 ++++++++--
 mythtv/libs/libmythupnp/upnpcds.h            |    9 +-
 mythtv/libs/libmythupnp/upnpcdsobjects.cpp   |    7 ++
 mythtv/programs/mythbackend/upnpcdsmusic.cpp |  168 +++++++++++++++++++-------
 mythtv/programs/mythbackend/upnpcdsmusic.h   |   19 ++-
 mythtv/programs/mythbackend/upnpcdstv.cpp    |   31 ++++-
 mythtv/programs/mythbackend/upnpcdsvideo.cpp |   70 +++++++----
 7 files changed, 275 insertions(+), 94 deletions(-)

diff --git a/mythtv/libs/libmythupnp/upnpcds.cpp b/mythtv/libs/libmythupnp/upnpcds.cpp
index a36ef52..053c7a7 100644
--- a/mythtv/libs/libmythupnp/upnpcds.cpp
+++ b/mythtv/libs/libmythupnp/upnpcds.cpp
@@ -865,7 +865,7 @@ UPnpCDSExtensionResults *
             pResults->m_nTotalMatches   = 1;
             pResults->m_nUpdateID       = 1;
 
-            CDSObject *pRoot = CreateContainer( m_sExtensionId, m_sName, "0");
+            CDSObject *pRoot = CreateContainer( m_sExtensionId, m_sName, "0", "");
 
             pRoot->SetChildCount( nRootCount );
 
@@ -898,9 +898,10 @@ UPnpCDSExtensionResults *
                                           .arg(pRequest->m_sObjectId)
                                           .arg(nIdx);
 
-                        CDSObject *pItem =
-                            CreateContainer( sId, QObject::tr( pInfo->title ),
-                                             m_sExtensionId );
+                        CDSObject *pItem = CreateContainer( sId,
+                                                     QObject::tr( pInfo->title ), // FIXME: This translate call won't do anything
+                                                     m_sExtensionId,
+                                                     pInfo->containerClass );
 
                         pItem->SetChildCount( GetDistinctCount( pInfo ) );
 
@@ -953,7 +954,8 @@ UPnpCDSExtensionResults *
                 CDSObject *pItem =
                     CreateContainer( pRequest->m_sObjectId,
                                      QObject::tr( pInfo->title ),
-                                     m_sExtensionId );
+                                     m_sExtensionId,
+                                     pInfo->containerClass );
 
                 pItem->SetChildCount( GetDistinctCount( pInfo ) );
 
@@ -1106,7 +1108,8 @@ UPnpCDSExtensionResults *
                         CDSObject *pItem =
                             CreateContainer( pRequest->m_sObjectId,
                                              query.value(1).toString(),
-                                             pRequest->m_sParentId );
+                                             pRequest->m_sParentId,
+                                             pInfo->childClass );
 
                         pItem->SetChildCount( GetDistinctCount( pInfo ));
 
@@ -1163,7 +1166,8 @@ UPnpCDSExtensionResults *
 
             CDSObject *pItem = CreateContainer( pRequest->m_sObjectId,
                                                 QObject::tr( pInfo->title ),
-                                                m_sExtensionId );
+                                                m_sExtensionId,
+                                                pInfo->containerClass );
 
             pItem->SetChildCount( GetDistinctCount( pInfo ));
 
@@ -1208,8 +1212,10 @@ UPnpCDSExtensionResults *
                                          .arg( pRequest->m_sParentId )
                                          .arg( sKey );
 
-                        CDSObject *pRoot =
-                            CreateContainer(sId, sTitle, pRequest->m_sParentId);
+                        CDSObject *pRoot = CreateContainer(sId,
+                                                           sTitle,
+                                                           pRequest->m_sParentId,
+                                                           pInfo->childClass);
 
                         pRoot->SetChildCount( nCount );
 
@@ -1366,4 +1372,45 @@ void UPnpCDSExtension::CreateItems( UPnpCDSRequest          *pRequest,
     }
 }
 
+CDSObject* UPnpCDSExtension::CreateContainer(const QString& sId,
+                                             const QString& sTitle,
+                                             const QString& sParentId,
+                                             const QString& sClass)
+{
+    CDSObject* pContainer = NULL;
+
+    if (sClass == "object.container.person")
+    {
+        pContainer = CDSObject::CreatePerson( sId, sTitle, sParentId );
+    }
+    else if (sClass == "object.container.playlistContainer")
+    {
+        pContainer = CDSObject::CreatePlaylistContainer( sId, sTitle, sParentId );
+    }
+    else if (sClass == "object.container.album")
+    {
+        pContainer = CDSObject::CreateAlbum( sId, sTitle, sParentId );
+    }
+    else if (sClass == "object.container.genre")
+    {
+        pContainer = CDSObject::CreateGenre( sId, sTitle, sParentId );
+    }
+    else if (sClass == "object.container.storageSystem")
+    {
+        pContainer = CDSObject::CreateStorageSystem( sId, sTitle, sParentId );
+    }
+    else if (sClass == "object.container.storageVolume")
+    {
+        pContainer = CDSObject::CreateStorageVolume( sId, sTitle, sParentId );
+    }
+    else if (sClass == "object.container.storageFolder")
+    {
+        pContainer = CDSObject::CreateStorageFolder( sId, sTitle, sParentId );
+    }
+    else
+        pContainer = CDSObject::CreateContainer( sId, sTitle, sParentId );
+
+    return pContainer;
+}
+
 // vim:ts=4:sw=4:ai:et:si:sts=4
diff --git a/mythtv/libs/libmythupnp/upnpcds.h b/mythtv/libs/libmythupnp/upnpcds.h
index 4182cd6..f2b5fcc 100644
--- a/mythtv/libs/libmythupnp/upnpcds.h
+++ b/mythtv/libs/libmythupnp/upnpcds.h
@@ -143,6 +143,8 @@ typedef struct
     const char *sql;
     const char *where;
     const char *orderColumn;
+    const char *containerClass;
+    const char *childClass;
 
 } UPnpCDSRootInfo;
          
@@ -205,11 +207,8 @@ class UPNP_PUBLIC UPnpCDSExtension
 
         virtual CDSObject *CreateContainer( const QString &sId,
                                             const QString &sTitle,
-                                            const QString &sParentId )
-        {
-            return CDSObject::CreateContainer( sId, sTitle, sParentId );
-        }
-
+                                            const QString &sParentId,
+                                            const QString &sClass );
 
     public:
 
diff --git a/mythtv/libs/libmythupnp/upnpcdsobjects.cpp b/mythtv/libs/libmythupnp/upnpcdsobjects.cpp
index ebb4f23..6de106c 100644
--- a/mythtv/libs/libmythupnp/upnpcdsobjects.cpp
+++ b/mythtv/libs/libmythupnp/upnpcdsobjects.cpp
@@ -721,6 +721,13 @@ CDSObject *CDSObject::CreateMusicAlbum( QString sId, QString sTitle, QString sPa
     pObject->AddProperty( new Property( "producer"   , "upnp" ));
     pObject->AddProperty( new Property( "albumArtURI", "upnp" ));
     pObject->AddProperty( new Property( "toc"        , "upnp" ));
+
+    // Artwork
+    pObject->AddProperty( new Property( "albumArtURI", "upnp", false, "", true)); // TN
+    pObject->AddProperty( new Property( "albumArtURI", "upnp", false, "", true)); // SM
+    pObject->AddProperty( new Property( "albumArtURI", "upnp", false, "", true)); // MED
+    pObject->AddProperty( new Property( "albumArtURI", "upnp", false, "", true)); // LRG
+
     return( pObject );
 }
 
diff --git a/mythtv/programs/mythbackend/upnpcdsmusic.cpp b/mythtv/programs/mythbackend/upnpcdsmusic.cpp
index 906993b..d408dda 100644
--- a/mythtv/programs/mythbackend/upnpcdsmusic.cpp
+++ b/mythtv/programs/mythbackend/upnpcdsmusic.cpp
@@ -54,7 +54,10 @@ UPnpCDSRootInfo UPnpCDSMusic::g_RootNodes[] =
             "FROM music_songs song "
             "%1 "
             "ORDER BY name",
-        "", "name" },
+        "",
+        "name",
+        "object.container",
+        "object.item.audioItem.musicTrack" },
 
 #if 0
 // This is currently broken... need to handle list of items with single parent
@@ -80,7 +83,11 @@ UPnpCDSRootInfo UPnpCDSMusic::g_RootNodes[] =
             "%1 "
             "GROUP BY a.album_name "
             "ORDER BY a.album_name",
-        "WHERE song.album_id=:KEY", "album.album_name" },
+        "WHERE song.album_id=:KEY",
+        "album.album_name",
+        "object.container",
+        "object.container.album.musicAlbum" },
+
     {   "By Artist",
         "song.artist_id",
         "SELECT a.artist_id as id, "
@@ -90,9 +97,12 @@ UPnpCDSRootInfo UPnpCDSMusic::g_RootNodes[] =
             "%1 "
             "GROUP BY a.artist_id "
             "ORDER BY a.artist_name",
-        "WHERE song.artist_id=:KEY", "" },
+        "WHERE song.artist_id=:KEY",
+        "",
+        "object.container",
+        "object.container.person.musicArtist" },
 
-{   "By Genre",
+    {   "By Genre",
         "song.genre_id",
         "SELECT g.genre_id as id, "
           "genre as name, "
@@ -101,12 +111,26 @@ UPnpCDSRootInfo UPnpCDSMusic::g_RootNodes[] =
             "%1 "
             "GROUP BY g.genre_id "
             "ORDER BY g.genre",
-        "WHERE song.genre_id=:KEY", "" },
+        "WHERE song.genre_id=:KEY",
+        "",
+        "object.container",
+        "object.container.genre.musicGenre" },
 
 };
 
 int UPnpCDSMusic::g_nRootCount = sizeof( g_RootNodes ) / sizeof( UPnpCDSRootInfo );
 
+UPnpCDSMusic::UPnpCDSMusic()
+             : UPnpCDSExtension( "Music", "Music",
+                                 "object.item.audioItem.musicTrack" )
+{
+    QString sServerIp   = gCoreContext->GetBackendServerIP4();
+    int sPort           = gCoreContext->GetBackendStatusPort();
+    m_URIBase.setScheme("http");
+    m_URIBase.setHost(sServerIp);
+    m_URIBase.setPort(sPort);
+}
+
 /////////////////////////////////////////////////////////////////////////////
 //
 /////////////////////////////////////////////////////////////////////////////
@@ -300,18 +324,10 @@ void UPnpCDSMusic::AddItem( const UPnpCDSRequest    *pRequest,
         m_mapBackendPort[ sHostName ] = gCoreContext->GetSettingOnHost("BackendStatusPort", sHostName);
 #endif
 
-    QString sServerIp   = gCoreContext->GetBackendServerIP4();
-    int sPort           = gCoreContext->GetBackendStatusPort();
-
     // ----------------------------------------------------------------------
     // Build Support Strings
     // ----------------------------------------------------------------------
 
-    QUrl URIBase;
-    URIBase.setScheme("http");
-    URIBase.setHost(sServerIp);
-    URIBase.setPort(sPort);
-
     QString sId        = QString( "Music/1/item?Id=%1")
                             .arg( nId );
 
@@ -344,10 +360,103 @@ void UPnpCDSMusic::AddItem( const UPnpCDSRequest    *pRequest,
     pItem->SetPropValue( "playbackCount"        , QString::number(nPlaybackCount));
     pItem->SetPropValue( "lastPlaybackTime"     , lastPlayedTime.toString(Qt::ISODate));
 
+    // Artwork
+    PopulateArtworkURIS(pItem, nId);
+
+    pResults->Add( pItem );
+
+    // ----------------------------------------------------------------------
+    // Add Music Resource Element based on File extension (HTTP)
+    // ----------------------------------------------------------------------
+
+    QFileInfo fInfo( sFileName );
+
+    QString sMimeType = HTTPRequest::GetMimeType( fInfo.suffix() );
+    QString sProtocol = QString( "http-get:*:%1:DLNA.ORG_OP=01;DLNA.ORG_CI=0;DLNA.ORG_FLAGS=01500000000000000000000000000000" ).arg( sMimeType  );
+    QUrl    resURI    = m_URIBase;
+    resURI.setPath("Content/GetMusic");
+    resURI.addQueryItem("Id", QString::number(nId));
+
+    Resource *pRes = pItem->AddResource( sProtocol, resURI.toEncoded() );
+    int nLengthSecs = nLengthMS / 1000;
+
+    QString sDur;
+    // H:M:S[.MS]
+    sDur.sprintf("%02d:%02d:%02d.%03d",
+                  (nLengthSecs / 3600) % 24,
+                  (nLengthSecs / 60) % 60,
+                  nLengthSecs % 60,
+                  nLengthMS % 1000);
+
+    pRes->AddAttribute( "duration"  , sDur      );
+    if (nFileSize > 0)
+        pRes->AddAttribute( "size"      , QString::number( nFileSize) );
+}
+
+CDSObject* UPnpCDSMusic::CreateContainer(const QString& sId,
+                                         const QString& sTitle,
+                                         const QString& sParentId,
+                                         const QString& sClass )
+{
+    CDSObject *pContainer = NULL;
+    if (sClass == "object.container.person.musicArtist")
+    {
+        pContainer = CDSObject::CreateMusicGenre( sId, sTitle, m_sExtensionId );
+    }
+    else if (sClass == "object.container.album.musicAlbum")
+    {
+        pContainer = CDSObject::CreateMusicAlbum( sId, sTitle, m_sExtensionId );
+
+        PopulateAlbumContainer( pContainer, sId );
+    }
+    else if (sClass == "object.container.genre.musicGenre")
+    {
+        pContainer = CDSObject::CreateMusicGenre( sId, sTitle, m_sExtensionId );
+    }
+    else
+        pContainer = UPnpCDSExtension::CreateContainer(sId, sTitle, sParentId, sClass);
+
+    return pContainer;
+}
+
+void UPnpCDSMusic::PopulateAlbumContainer(CDSObject* pContainer,
+                                          const QString& sId)
+{
+
+    int nAlbumId = sId.section('=',1).toInt();
+    MSqlQuery query(MSqlQuery::InitCon());
+
+    query.prepare("SELECT a.album_name, t.artist_name, a.year, a.compilation, "
+                  "s.song_id, g.genre "
+                  "FROM music_albums a "
+                  "LEFT JOIN music_artists t ON a.artist_id=t.artist_id "
+                  "LEFT JOIN music_songs s ON a.album_id=s.album_id "
+                  "LEFT JOIN music_genres g ON s.genre_id=g.genre_id "
+                  "WHERE a.album_id=:ALBUM_ID LIMIT 1");
+    query.bindValue(":ALBUM_ID", nAlbumId);
+    if (query.exec() && query.next())
+    {
+        QString sAlbumName = query.value(0).toString();
+        QString sArtist = query.value(1).toString();
+        QString sYear = query.value(2).toString();
+        bool bCompilation = query.value(3).toBool();
+        int nSongId = query.value(4).toInt(); // TODO: Allow artwork lookups by album ID
+        QString sGenre = query.value(5).toString();
+
+        pContainer->SetPropValue("artist", sArtist);
+        pContainer->SetPropValue("date", sYear);
+        pContainer->SetPropValue("genre", sGenre);
+
+        // Artwork
+        PopulateArtworkURIS(pContainer, nSongId);
+    }
+}
 
-    QUrl artURI = URIBase;
+void UPnpCDSMusic::PopulateArtworkURIS(CDSObject* pItem, int nAlbumID)
+{
+    QUrl artURI = m_URIBase;
     artURI.setPath("Content/GetAlbumArt");
-    artURI.addQueryItem("Id", QString::number(nId));
+    artURI.addQueryItem("Id", QString::number(nAlbumID));
 
     QList<Property*> propList = pItem->GetProperties("albumArtURI");
     if (propList.size() >= 4)
@@ -412,35 +521,6 @@ void UPnpCDSMusic::AddItem( const UPnpCDSRequest    *pRequest,
             pProp->AddAttribute("xmlns:dlna", "urn:schemas-dlna-org:metadata-1-0");
         }
     }
-
-    pResults->Add( pItem );
-
-    // ----------------------------------------------------------------------
-    // Add Music Resource Element based on File extension (HTTP)
-    // ----------------------------------------------------------------------
-
-    QFileInfo fInfo( sFileName );
-
-    QString sMimeType = HTTPRequest::GetMimeType( fInfo.suffix() );
-    QString sProtocol = QString( "http-get:*:%1:DLNA.ORG_OP=01;DLNA.ORG_CI=0;DLNA.ORG_FLAGS=01500000000000000000000000000000" ).arg( sMimeType  );
-    QUrl    resURI    = URIBase;
-    resURI.setPath("Content/GetMusic");
-    resURI.addQueryItem("Id", QString::number(nId));
-
-    Resource *pRes = pItem->AddResource( sProtocol, resURI.toEncoded() );
-    int nLengthSecs = nLengthMS / 1000;
-
-    QString sDur;
-    // H:M:S[.MS]
-    sDur.sprintf("%02d:%02d:%02d.%03d",
-                  (nLengthSecs / 3600) % 24,
-                  (nLengthSecs / 60) % 60,
-                  nLengthSecs % 60,
-                  nLengthMS % 1000);
-
-    pRes->AddAttribute( "duration"  , sDur      );
-    if (nFileSize > 0)
-        pRes->AddAttribute( "size"      , QString::number( nFileSize) );
 }
 
 // vim:ts=4:sw=4:ai:et:si:sts=4
diff --git a/mythtv/programs/mythbackend/upnpcdsmusic.h b/mythtv/programs/mythbackend/upnpcdsmusic.h
index 5cc28a6..dc68d6b 100644
--- a/mythtv/programs/mythbackend/upnpcdsmusic.h
+++ b/mythtv/programs/mythbackend/upnpcdsmusic.h
@@ -25,6 +25,7 @@ class UPnpCDSMusic : public UPnpCDSExtension
 
         static UPnpCDSRootInfo g_RootNodes[];
         static int             g_nRootCount;
+        QUrl                   m_URIBase;
 
     protected:
 
@@ -44,13 +45,21 @@ class UPnpCDSMusic : public UPnpCDSExtension
                                           UPnpCDSExtensionResults *pResults,
                                           bool                     bAddRef,
                                           MSqlQuery               &query );
-    public:
 
-        UPnpCDSMusic( ) : UPnpCDSExtension( "Music", "Music",
-                                            "object.item.audioItem.musicTrack" )
-        {
-        }
+        virtual CDSObject       *CreateContainer( const QString &sId,
+                                                  const QString &sTitle,
+                                                  const QString &sParentId,
+                                                  const QString &sClass );
+
+        virtual void             PopulateAlbumContainer( CDSObject *pContainer,
+                                                         const QString &sId );
+
+        virtual void             PopulateArtworkURIS( CDSObject *pItem,
+                                                      int albumID );
+
+    public:
 
+        UPnpCDSMusic();
         virtual ~UPnpCDSMusic() {}
 };
 
diff --git a/mythtv/programs/mythbackend/upnpcdstv.cpp b/mythtv/programs/mythbackend/upnpcdstv.cpp
index 9e3d4bc..b41ce28 100644
--- a/mythtv/programs/mythbackend/upnpcdstv.cpp
+++ b/mythtv/programs/mythbackend/upnpcdstv.cpp
@@ -47,7 +47,10 @@ UPnpCDSRootInfo UPnpCDSTv::g_RootNodes[] =
             "FROM recorded r "
             "%1 "
             "ORDER BY r.starttime DESC",
-        "", "r.starttime DESC" },
+        "",
+        "r.starttime DESC",
+        "object.container",
+        "object.item.videoItem" },
 
     {   "By Title",
         "r.title",
@@ -58,7 +61,10 @@ UPnpCDSRootInfo UPnpCDSTv::g_RootNodes[] =
             "%1 "
             "GROUP BY r.title "
             "ORDER BY r.title",
-        "WHERE r.title=:KEY", "r.title" },
+        "WHERE r.title=:KEY",
+        "r.title",
+        "object.container",
+        "object.container" },
 
     {   "By Genre",
         "r.category",
@@ -69,7 +75,10 @@ UPnpCDSRootInfo UPnpCDSTv::g_RootNodes[] =
             "%1 "
             "GROUP BY r.category "
             "ORDER BY r.category",
-        "WHERE r.category=:KEY", "r.category" },
+        "WHERE r.category=:KEY",
+        "r.category",
+        "object.container",
+        "object.container.genre.movieGenre" },
 
     {   "By Date",
         "DATE_FORMAT(r.starttime, '%Y-%m-%d')",
@@ -80,7 +89,11 @@ UPnpCDSRootInfo UPnpCDSTv::g_RootNodes[] =
             "%1 "
             "GROUP BY name "
             "ORDER BY r.starttime DESC",
-        "WHERE DATE_FORMAT(r.starttime, '%Y-%m-%d') =:KEY", "r.starttime DESC" },
+        "WHERE DATE_FORMAT(r.starttime, '%Y-%m-%d') =:KEY",
+        "r.starttime DESC",
+        "object.container",
+        "object.container"
+    },
 
     {   "By Channel",
         "r.chanid",
@@ -92,7 +105,10 @@ UPnpCDSRootInfo UPnpCDSTv::g_RootNodes[] =
             "%1 "
             "GROUP BY name "
             "ORDER BY channel.chanid",
-        "WHERE channel.chanid=:KEY", ""},
+        "WHERE channel.chanid=:KEY",
+        "",
+        "object.container",
+        "object.container"}, // Cannot be .channelGroup because children of channelGroup must be videoBroadcast items
 
     {   "By Group",
         "recgroup",
@@ -102,7 +118,10 @@ UPnpCDSRootInfo UPnpCDSTv::g_RootNodes[] =
             "%1 "
             "GROUP BY recgroup "
             "ORDER BY recgroup",
-        "WHERE recgroup=:KEY", "recgroup" }
+        "WHERE recgroup=:KEY",
+        "recgroup",
+        "object.container",
+        "object.container.album" }
 };
 
 int UPnpCDSTv::g_nRootCount = sizeof( g_RootNodes ) / sizeof( UPnpCDSRootInfo );
diff --git a/mythtv/programs/mythbackend/upnpcdsvideo.cpp b/mythtv/programs/mythbackend/upnpcdsvideo.cpp
index 7f8c59a..1987ce9 100644
--- a/mythtv/programs/mythbackend/upnpcdsvideo.cpp
+++ b/mythtv/programs/mythbackend/upnpcdsvideo.cpp
@@ -31,7 +31,10 @@ UPnpCDSRootInfo UPnpCDSVideo::g_RootNodes[] =
             "FROM videometadata "
             "%1 "
             "ORDER BY title",
-        "", "title" },
+        "",
+        "title",
+        "object.container",
+        "object.item.videoItem" },
 
     {   "By Folder",
         "fldr.folder",
@@ -48,7 +51,10 @@ UPnpCDSRootInfo UPnpCDSVideo::g_RootNodes[] =
           "%1 "
           "GROUP BY fldr.folder "
           "ORDER BY fldr.folder",
-        "WHERE fldr.folder =  :KEY", "title" },
+        "WHERE fldr.folder =  :KEY",
+        "title",
+        "object.container.storageSystem",
+        "object.container.storageFolder" },
 
     {   "By Length (10min int)",
         "ROUND(length+4,-1)",
@@ -60,7 +66,10 @@ UPnpCDSRootInfo UPnpCDSVideo::g_RootNodes[] =
           "%1 "
           "GROUP BY name "
           "ORDER BY ROUND(length+4,-1)",
-        "WHERE ROUND(length+4,-1) = :KEY", "title" },
+        "WHERE ROUND(length+4,-1) = :KEY",
+        "title",
+        "object.container",
+        "object.container" },
 
     {   "By User Rating (rounded)",
         "ROUND(userrating)",
@@ -72,7 +81,10 @@ UPnpCDSRootInfo UPnpCDSVideo::g_RootNodes[] =
           "%1 "
           "GROUP BY ROUND(userrating) "
           "ORDER BY ROUND(userrating)",
-        "WHERE ROUND(userrating)=ROUND(:KEY)", "title" },
+        "WHERE ROUND(userrating)=ROUND(:KEY)",
+        "title",
+        "object.container",
+        "object.container" },
 
     {   "By Maturity Rating",
         "rating",
@@ -84,9 +96,12 @@ UPnpCDSRootInfo UPnpCDSVideo::g_RootNodes[] =
           "%1 "
           "GROUP BY rating "
           "ORDER BY rating",
-        "WHERE rating=:KEY", "title" },
+        "WHERE rating=:KEY",
+        "title",
+        "object.container",
+        "object.container" },
 
-    {   "By Category",
+    {   "By Genre",
         "category",
         "SELECT "
             "videometadata.category          AS id, "
@@ -97,7 +112,10 @@ UPnpCDSRootInfo UPnpCDSVideo::g_RootNodes[] =
           "%1 "
           "GROUP BY videometadata.category "
           "ORDER BY videometadata.category",
-        "WHERE videometadata.category=:KEY", "title" },
+        "WHERE videometadata.category=:KEY",
+        "title",
+        "object.container",
+        "object.container.genre.movieGenre" },
 
     {   "By Director",
         "director",
@@ -109,7 +127,10 @@ UPnpCDSRootInfo UPnpCDSVideo::g_RootNodes[] =
           "%1 "
           "GROUP BY director "
           "ORDER BY director",
-        "WHERE director=:KEY", "title" },
+        "WHERE director=:KEY",
+        "title",
+        "object.container",
+        "object.container.person" },
 
     {   "By Studio",
         "studio",
@@ -121,19 +142,10 @@ UPnpCDSRootInfo UPnpCDSVideo::g_RootNodes[] =
             "%1 "
             "GROUP BY studio "
             "ORDER BY studio",
-        "WHERE studio=:KEY", "title" },
-
-    {   "By Homepage",
-        "homepage",
-        "SELECT "
-            "homepage          AS id, "
-            "homepage          AS name, "
-            "COUNT( homepage ) AS children "
-          "FROM videometadata "
-          "%1 "
-          "GROUP BY homepage "
-          "ORDER BY homepage",
-        "WHERE homepage=:KEY", "title" },
+        "WHERE studio=:KEY",
+        "title",
+        "object.container",
+        "object.container" },
 
     {   "By Year",
         "year",
@@ -145,7 +157,10 @@ UPnpCDSRootInfo UPnpCDSVideo::g_RootNodes[] =
           "%1 "
           "GROUP BY year "
           "ORDER BY year",
-        "WHERE year=:KEY", "title" },
+        "WHERE year=:KEY",
+        "title",
+        "object.container",
+        "object.container" },
 
     {   "By Content Type",
         "contenttype",
@@ -157,7 +172,10 @@ UPnpCDSRootInfo UPnpCDSVideo::g_RootNodes[] =
           "%1 "
           "GROUP BY contenttype "
           "ORDER BY contenttype",
-        "WHERE contenttype=:KEY", "title" },
+        "WHERE contenttype=:KEY",
+        "title",
+        "object.container",
+        "object.container.album" },
 
     {   "By Season",
         "season",
@@ -169,8 +187,10 @@ UPnpCDSRootInfo UPnpCDSVideo::g_RootNodes[] =
           "%1 "
           "GROUP BY season "
           "ORDER BY season",
-        "WHERE season=:KEY", "title" }
-
+        "WHERE season=:KEY",
+        "title",
+        "object.container",
+        "object.container" }
 
 };
 
-- 
1.7.10.2

