From 549fb22e1726c9cb7cde8b9b0bd0e040706ac24f Mon Sep 17 00:00:00 2001
From: Stuart Morgan <smorgan@mythtv.org>
Date: Tue, 1 Oct 2013 15:37:29 +0100
Subject: [PATCH 132/760] Move the Gallery thumb generator thread class to
 libmythmetadata so it can be used by mythbackend
 and mythmediaserver

---
 mythtv/libs/libmythbase/mythversion.h              |    2 +-
 .../libs/libmythmetadata/imagethumbgenthread.cpp   |  360 +++++++++++++++++++
 mythtv/libs/libmythmetadata/imagethumbgenthread.h  |   58 +++
 mythtv/libs/libmythmetadata/libmythmetadata.pro    |    3 +
 mythtv/programs/mythfrontend/galleryconfig.cpp     |    4 +-
 mythtv/programs/mythfrontend/galleryfilehelper.cpp |    4 +-
 .../mythfrontend/gallerythumbgenthread.cpp         |  371 --------------------
 .../programs/mythfrontend/gallerythumbgenthread.h  |   63 ----
 mythtv/programs/mythfrontend/galleryview.cpp       |    5 +-
 mythtv/programs/mythfrontend/galleryviewhelper.cpp |    9 +-
 mythtv/programs/mythfrontend/galleryviewhelper.h   |    6 +-
 mythtv/programs/mythfrontend/gallerywidget.cpp     |    6 +-
 mythtv/programs/mythfrontend/mythfrontend.pro      |    5 +-
 13 files changed, 445 insertions(+), 451 deletions(-)
 create mode 100644 mythtv/libs/libmythmetadata/imagethumbgenthread.cpp
 create mode 100644 mythtv/libs/libmythmetadata/imagethumbgenthread.h
 delete mode 100644 mythtv/programs/mythfrontend/gallerythumbgenthread.cpp
 delete mode 100644 mythtv/programs/mythfrontend/gallerythumbgenthread.h

diff --git a/mythtv/libs/libmythmetadata/imagethumbgenthread.cpp b/mythtv/libs/libmythmetadata/imagethumbgenthread.cpp
new file mode 100644
index 0000000..12f948e
--- /dev/null
+++ b/mythtv/libs/libmythmetadata/imagethumbgenthread.cpp
@@ -0,0 +1,360 @@
+// Qt headers
+#include <QPainter>
+#include <QFile>
+
+// MythTV headers
+#include "mythcontext.h"
+#include "mythdirs.h"
+#include "mythuihelper.h"
+#include "mythsystemlegacy.h"
+#include "exitcodes.h"
+
+#include "imagemetadata.h"
+#include "imageutils.h"
+#include "imagethumbgenthread.h"
+
+// FIXME: This should be on the backend only, not the frontend!
+
+/** \fn     ImageThumbGenThread::ImageThumbGenThread()
+ *  \brief  Constructor
+ *  \return void
+ */
+ImageThumbGenThread::ImageThumbGenThread()
+        :   m_width(0), m_height(0),
+            m_pause(false), m_fileListSize(0)
+{
+    QString sgName = IMAGE_STORAGE_GROUP;
+    m_storageGroup = StorageGroup(sgName, gCoreContext->GetHostName());
+
+    if (!gCoreContext->IsMasterBackend())
+        LOG(VB_GENERAL, LOG_ERR, "ImageThumbGenThread MUST be run on the master backend");
+}
+
+
+
+/** \fn     ImageThumbGenThread::~ImageThumbGenThread()
+ *  \brief  Destructor
+ *  \return void
+ */
+ImageThumbGenThread::~ImageThumbGenThread()
+{
+    cancel();
+    wait();
+}
+
+
+
+/** \fn     ImageThumbGenThread::run()
+ *  \brief  Called when the thread starts. Tries to generate
+ *          thumbnails from the file list until its empty or aborted.
+ *  \return void
+ */
+void ImageThumbGenThread::run()
+{
+    volatile bool exit = false;
+
+    m_mutex.lock();
+    m_fileListSize = m_fileList.size();
+    m_mutex.unlock();
+
+    while (!exit)
+    {
+        ImageMetadata *im = NULL;
+
+        m_mutex.lock();
+        if (!m_fileList.isEmpty())
+            im = m_fileList.takeFirst();
+
+        // Update the progressbar even if the thumbnail will not be created
+        emit UpdateThumbnailProgress(m_fileList.size(), m_fileListSize);
+        m_mutex.unlock();
+
+        if (im)
+        {
+            if (im->m_type == kSubDirectory ||
+                im->m_type == kUpDirectory)
+            {
+                for (int i = 0; i < im->m_thumbFileNameList->size(); ++i)
+                    CreateImageThumbnail(im, i);
+            }
+            else if (im->m_type == kImageFile)
+            {
+                CreateImageThumbnail(im, 0);
+            }
+            else if (im->m_type == kVideoFile)
+            {
+                CreateVideoThumbnail(im);
+            }
+        }
+
+        m_mutex.lock();
+        exit = m_fileList.isEmpty();
+        m_mutex.unlock();
+
+        // Allows the thread to be paused when Pause() was called
+        m_mutex.lock();
+        if (m_pause)
+            m_condition.wait(&m_mutex);
+        m_mutex.unlock();
+    }
+}
+
+
+
+/** \fn     ImageThumbGenThread::CreateImageThumbnail(ImageMetadata *, int)
+ *  \brief  Creates a thumbnail with the correct size and rotation
+ *  \param  im The thumbnail details
+ *  \param  dataid The id of the thumbnail
+ *  \return void
+ */
+void ImageThumbGenThread::CreateImageThumbnail(ImageMetadata *im, int id)
+{
+    if (QFile(im->m_thumbFileNameList->at(id)).exists())
+        return;
+
+    QDir dir;
+    if (!dir.exists(im->m_thumbPath))
+        dir.mkpath(im->m_thumbPath);
+
+    QString imageFileName = m_storageGroup.FindFile(im->m_fileName);
+    LOG(VB_GENERAL, LOG_NOTICE, QString("Creating thumbnail for %1").arg(imageFileName));
+
+    // If a folder thumbnail shall be created we need to get
+    // the real filename from the thumbnail filename by removing
+    // the configuration directory and the MythImage path
+    if (im->m_type == kSubDirectory ||
+        im->m_type == kUpDirectory)
+    {
+        imageFileName = im->m_thumbFileNameList->at(id);
+        imageFileName = imageFileName.mid(GetConfDir().append("/MythImage/").count());
+    }
+
+    QImage image;
+    if (!image.load(imageFileName))
+        return;
+
+    QMatrix matrix;
+    switch (im->GetOrientation())
+    {
+    case 1: // If the image is in its original state
+        break;
+
+    case 2: // The image is horizontally flipped
+        image = image.mirrored(true, false);
+        break;
+
+    case 3: // The image is rotated 180°
+        matrix.rotate(180);
+        image = image.transformed(matrix, Qt::SmoothTransformation);
+        break;
+
+    case 4: // The image is vertically flipped
+        image = image.mirrored(false, true);
+        break;
+
+    case 5: // The image is transposed (rotated 90° CW flipped horizontally)
+        matrix.rotate(90);
+        image = image.transformed(matrix, Qt::SmoothTransformation);
+        image = image.mirrored(true, false);
+        break;
+
+    case 6: // The image is rotated 90° CCW
+        matrix.rotate(270);
+        image = image.transformed(matrix, Qt::SmoothTransformation);
+        break;
+
+    case 7: // The image is transversed  (rotated 90° CW and flipped vertically)
+        matrix.rotate(90);
+        image = image.transformed(matrix, Qt::SmoothTransformation);
+        image = image.mirrored(false, true);
+        break;
+
+    case 8: // The image is rotated 90° CW
+        matrix.rotate(90);
+        image = image.transformed(matrix, Qt::SmoothTransformation);
+        break;
+
+    default:
+        break;
+    }
+
+    Resize(image);
+
+    // save the image in the thumbnail directory
+    if (image.save(im->m_thumbFileNameList->at(id)))
+        emit ThumbnailCreated(im, id);
+}
+
+
+
+/** \fn     ImageThumbGenThread::CreateVideoThumbnail(ImageMetadata *)
+ *  \brief  Creates a video preview image with the correct size
+ *  \param  im The thumbnail details
+ *  \return void
+ */
+void ImageThumbGenThread::CreateVideoThumbnail(ImageMetadata *im)
+{
+    if (QFile(im->m_thumbFileNameList->at(0)).exists())
+        return;
+
+    QDir dir;
+    if (!dir.exists(im->m_thumbPath))
+        dir.mkpath(im->m_thumbPath);
+
+    QString videoFileName = m_storageGroup.FindFile(im->m_fileName);
+
+    QString cmd = "mythpreviewgen";
+    QStringList args;
+    args << logPropagateArgs.split(" ", QString::SkipEmptyParts);
+    args << "--infile"  << '"' + videoFileName + '"';
+    args << "--outfile" << '"' + im->m_thumbFileNameList->at(0) + '"';
+
+    MythSystemLegacy ms(cmd, args, kMSRunShell);
+    ms.SetDirectory(im->m_thumbPath);
+    ms.Run();
+
+    // If the process exited successful
+    // then try to load the thumbnail
+    if (ms.Wait() == GENERIC_EXIT_OK)
+    {
+        QImage image;
+        if (!image.load(im->m_thumbFileNameList->at(0)))
+            return;
+
+        Resize(image);
+
+        // save the default image in the thumbnail directory
+        if (image.save(im->m_thumbFileNameList->at(0)))
+            emit ThumbnailCreated(im, 0);
+    }
+}
+
+
+
+/** \fn     ImageThumbGenThread::Resize(QImage)
+ *  \brief  Resizes the thumbnail to prevent black areas 
+ *          around the image when its shown in a widget.
+ *  \param  The image that shall be resized
+ *  \return void
+ */
+void ImageThumbGenThread::Resize(QImage &image)
+{
+    // If the factor of the width to height of the image is smaller
+    // than of the widget stretch the image horizontally. The image
+    // will be higher then the widgets height, so it needs to be cropped.
+    if ((image.width() / image.height()) < (m_width / m_height))
+    {
+        image = image.scaledToWidth(m_width, Qt::SmoothTransformation);
+
+        // Copy a part of the image so that
+        // the copied area has the size of the widget.
+        if (image.height() > m_height)
+        {
+            int offset = (image.height() - m_height) / 2;
+            image = image.copy(0, offset, m_width, m_height);
+        }
+    }
+    else
+    {
+        image = image.scaledToHeight(m_height, Qt::SmoothTransformation);
+
+        if (image.width() > m_width)
+        {
+            int offset = (image.width() - m_width) / 2;
+            image = image.copy(offset, 0, m_width, m_height);
+        }
+    }
+}
+
+
+
+/** \fn     ImageThumbGenThread::AddToThumbnailList(ImageMetadata *)
+ *  \brief  Adds a file to the thumbnail list
+ *  \param  im The file information
+ *  \return void
+ */
+void ImageThumbGenThread::AddToThumbnailList(ImageMetadata *im)
+{
+    if (!im)
+        return;
+
+    m_mutex.lock();
+    m_fileList.append(im);
+    m_fileListSize = m_fileList.size();
+    m_mutex.unlock();
+}
+
+
+
+/** \fn     ImageThumbGenThread::RecreateThumbnail(ImageMetadata *)
+ *  \brief  Deletes the old thumbnail and creates a new one
+ *  \param  im The thumbnail information
+ *  \return void
+ */
+void ImageThumbGenThread::RecreateThumbnail(ImageMetadata *im)
+{
+    if (!im)
+        return;
+
+    if (QFile::remove(im->m_thumbFileNameList->at(0)))
+    {
+        GetMythUI()->RemoveFromCacheByFile(
+                    im->m_thumbFileNameList->at(0));
+
+        AddToThumbnailList(im);
+    }
+}
+
+
+
+/** \fn     ImageThumbGenThread::cancel()
+ *  \brief  Clears the thumbnail list so that the thread can exit.
+ *  \return void
+ */
+void ImageThumbGenThread::cancel()
+{
+    m_mutex.lock();
+    m_fileList.clear();
+    m_fileListSize = 0;
+    m_mutex.unlock();
+
+    emit UpdateThumbnailProgress(0, 0);
+}
+
+
+
+/** \fn     ImageThumbGenThread::Pause()
+ *  \brief  Pauses the thumbnail generation
+ *  \return void
+ */
+void ImageThumbGenThread::Pause()
+{
+    m_pause = true;
+}
+
+
+
+/** \fn     ImageThumbGenThread::Resume()
+ *  \brief  Resumes the thumbnail generation
+ *  \return void
+ */
+void ImageThumbGenThread::Resume()
+{
+    m_condition.wakeAll();
+    m_pause = false;
+}
+
+
+
+/** \fn     ImageThumbGenThread::SetThumbnailSize(int, int)
+ *  \brief  Saves and specifies the size of the thumbnails.
+ *  \return void
+ */
+void ImageThumbGenThread::SetThumbnailSize(int width, int height)
+{
+    if (width > 0)
+        m_width = width;
+
+    if (height > 0)
+        m_height = height;
+}
diff --git a/mythtv/libs/libmythmetadata/imagethumbgenthread.h b/mythtv/libs/libmythmetadata/imagethumbgenthread.h
new file mode 100644
index 0000000..01bd446
--- /dev/null
+++ b/mythtv/libs/libmythmetadata/imagethumbgenthread.h
@@ -0,0 +1,58 @@
+#ifndef GALLERYTHUMBGENTHREAD_H
+#define GALLERYTHUMBGENTHREAD_H
+
+// Qt headers
+#include <QThread>
+#include <QMutex>
+
+// MythTV headers
+#include "mythuibuttontree.h"
+#include "imagemetadata.h"
+#include "storagegroup.h"
+#include "mythmetaexp.h"
+
+
+class META_PUBLIC ImageThumbGenThread : public QThread
+{
+    Q_OBJECT
+
+public:
+    ImageThumbGenThread();
+    ~ImageThumbGenThread();
+
+    void cancel();
+    void Pause();
+    void Resume();
+    void AddToThumbnailList(ImageMetadata *);
+    void RecreateThumbnail(ImageMetadata *);
+    void SetThumbnailSize(int, int);
+
+signals:
+    void ThumbnailCreated(ImageMetadata *, int);
+    void UpdateThumbnailProgress(int, int);
+
+protected:
+    void run();
+
+private:
+    void CreateImageThumbnail(ImageMetadata *, int);
+    void CreateVideoThumbnail(ImageMetadata *);
+
+    void Resize(QImage &);
+    void Rotate(QImage &);
+    void Combine(QImage &, QImage &, QPoint);
+    void DrawBorder(QImage &);
+
+    QList<ImageMetadata *>    m_fileList;
+    QMutex              m_mutex;
+
+    int m_width;
+    int m_height;
+    bool m_pause;
+    int m_fileListSize;
+
+    QWaitCondition      m_condition;
+    StorageGroup        m_storageGroup;
+};
+
+#endif // GALLERYTHUMBGENTHREAD_H
diff --git a/mythtv/libs/libmythmetadata/libmythmetadata.pro b/mythtv/libs/libmythmetadata/libmythmetadata.pro
index 416a57e..07d32ee 100644
--- a/mythtv/libs/libmythmetadata/libmythmetadata.pro
+++ b/mythtv/libs/libmythmetadata/libmythmetadata.pro
@@ -26,6 +26,7 @@ HEADERS += musicmetadata.h musicutils.h metaio.h metaiotaglib.h
 HEADERS += metaioflacvorbis.h metaioavfcomment.h metaiomp4.h
 HEADERS += metaiowavpack.h metaioid3.h metaiooggvorbis.h
 HEADERS += imagemetadata.h imageutils.h imagescan.h imagescanthread.h
+HEADERS += imagethumbgenthread.h
 
 SOURCES += cleanup.cpp  dbaccess.cpp  dirscan.cpp  globals.cpp
 SOURCES += parentalcontrols.cpp  videoscan.cpp  videoutils.cpp
@@ -37,6 +38,7 @@ SOURCES += musicmetadata.cpp musicutils.cpp metaio.cpp metaiotaglib.cpp
 SOURCES += metaioflacvorbis.cpp metaioavfcomment.cpp metaiomp4.cpp
 SOURCES += metaiowavpack.cpp metaioid3.cpp metaiooggvorbis.cpp
 SOURCES += imagemetadata.cpp imageutils.cpp imagescan.cpp imagescanthread.cpp
+SOURCES += imagethumbgenthread.cpp
 
 INCLUDEPATH += ../libmythbase ../libmythtv
 INCLUDEPATH += ../.. ../ ./ ../libmythupnp ../libmythui
@@ -97,6 +99,7 @@ inc.files += metaio.h metaiotaglib.h
 inc.files += metaioflacvorbis.h metaioavfcomment.h metaiomp4.h
 inc.files += metaiowavpack.h metaioid3.h metaiooggvorbis.h
 inc.files += imagemetadata.h imageutils.h imagescan.h imagescanthread.h
+inc.files += imagethumbgenthread.h
 
 INSTALLS += inc
 
diff --git a/mythtv/programs/mythfrontend/galleryconfig.cpp b/mythtv/programs/mythfrontend/galleryconfig.cpp
index ba1c730..35b1e56 100644
--- a/mythtv/programs/mythfrontend/galleryconfig.cpp
+++ b/mythtv/programs/mythfrontend/galleryconfig.cpp
@@ -1,3 +1,6 @@
+
+#include "galleryconfig.h"
+
 // Qt headers
 
 // MythTV headers
@@ -11,7 +14,6 @@
 #include "mythdialogbox.h"
 #include "mythscreentype.h"
 
-#include "galleryconfig.h"
 #include "gallerydatabasehelper.h"
 #include "gallerytypedefs.h"
 
diff --git a/mythtv/programs/mythfrontend/galleryfilehelper.cpp b/mythtv/programs/mythfrontend/galleryfilehelper.cpp
index 8ce9a7c..8df965f 100644
--- a/mythtv/programs/mythfrontend/galleryfilehelper.cpp
+++ b/mythtv/programs/mythfrontend/galleryfilehelper.cpp
@@ -1,3 +1,6 @@
+
+#include "galleryfilehelper.h"
+
 // Qt headers
 #include <QNetworkAccessManager>
 #include <QXmlStreamReader>
@@ -13,7 +16,6 @@
 #include "storagegroup.h"
 #include "remoteutil.h"
 
-#include "galleryfilehelper.h"
 #include "gallerytypedefs.h"
 
 
diff --git a/mythtv/programs/mythfrontend/gallerythumbgenthread.cpp b/mythtv/programs/mythfrontend/gallerythumbgenthread.cpp
deleted file mode 100644
index 74e6c84..0000000
--- a/mythtv/programs/mythfrontend/gallerythumbgenthread.cpp
+++ /dev/null
@@ -1,371 +0,0 @@
-// Qt headers
-#include <QPainter>
-#include <QFile>
-
-// MythTV headers
-#include "mythcontext.h"
-#include "mythdirs.h"
-#include "mythuihelper.h"
-#include "mythsystemlegacy.h"
-#include "exitcodes.h"
-
-#include "imagemetadata.h"
-#include "imageutils.h"
-#include "gallerythumbgenthread.h"
-
-// FIXME: This should be on the backend only, not the frontend!
-
-/** \fn     GalleryThumbGenThread::GalleryThumbGenThread()
- *  \brief  Constructor
- *  \return void
- */
-GalleryThumbGenThread::GalleryThumbGenThread()
-        :   m_fileHelper(new GalleryFileHelper()),
-            m_dbHelper(new GalleryDatabaseHelper()),
-            m_width(0), m_height(0),
-            m_pause(false), m_fileListSize(0)
-{
-    QString sgName = IMAGE_STORAGE_GROUP;
-    m_storageGroup = StorageGroup(sgName, gCoreContext->GetHostName());
-}
-
-
-
-/** \fn     GalleryThumbGenThread::~GalleryThumbGenThread()
- *  \brief  Destructor
- *  \return void
- */
-GalleryThumbGenThread::~GalleryThumbGenThread()
-{
-    cancel();
-    wait();
-
-    if (m_fileHelper)
-    {
-        delete m_fileHelper;
-        m_fileHelper = NULL;
-    }
-
-    if (m_dbHelper)
-    {
-        delete m_dbHelper;
-        m_dbHelper = NULL;
-    }
-}
-
-
-
-/** \fn     GalleryThumbGenThread::run()
- *  \brief  Called when the thread starts. Tries to generate
- *          thumbnails from the file list until its empty or aborted.
- *  \return void
- */
-void GalleryThumbGenThread::run()
-{
-    volatile bool exit = false;
-
-    m_mutex.lock();
-    m_fileListSize = m_fileList.size();
-    m_mutex.unlock();
-
-    while (!exit)
-    {
-        ImageMetadata *im = NULL;
-
-        m_mutex.lock();
-        if (!m_fileList.isEmpty())
-            im = m_fileList.takeFirst();
-
-        // Update the progressbar even if the thumbnail will not be created
-        emit UpdateThumbnailProgress(m_fileList.size(), m_fileListSize);
-        m_mutex.unlock();
-
-        if (im)
-        {
-            if (im->m_type == kSubDirectory ||
-                im->m_type == kUpDirectory)
-            {
-                for (int i = 0; i < im->m_thumbFileNameList->size(); ++i)
-                    CreateImageThumbnail(im, i);
-            }
-            else if (im->m_type == kImageFile)
-            {
-                CreateImageThumbnail(im, 0);
-            }
-            else if (im->m_type == kVideoFile)
-            {
-                CreateVideoThumbnail(im);
-            }
-        }
-
-        m_mutex.lock();
-        exit = m_fileList.isEmpty();
-        m_mutex.unlock();
-
-        // Allows the thread to be paused when Pause() was called
-        m_mutex.lock();
-        if (m_pause)
-            m_condition.wait(&m_mutex);
-        m_mutex.unlock();
-    }
-}
-
-
-
-/** \fn     GalleryThumbGenThread::CreateImageThumbnail(ImageMetadata *, int)
- *  \brief  Creates a thumbnail with the correct size and rotation
- *  \param  im The thumbnail details
- *  \param  dataid The id of the thumbnail
- *  \return void
- */
-void GalleryThumbGenThread::CreateImageThumbnail(ImageMetadata *im, int id)
-{
-    if (QFile(im->m_thumbFileNameList->at(id)).exists())
-        return;
-
-    QDir dir;
-    if (!dir.exists(im->m_thumbPath))
-        dir.mkpath(im->m_thumbPath);
-
-    QString imageFileName = m_storageGroup.FindFile(im->m_fileName);
-    LOG(VB_GENERAL, LOG_NOTICE, QString("Creating thumbnail for %1").arg(imageFileName));
-
-    // If a folder thumbnail shall be created we need to get
-    // the real filename from the thumbnail filename by removing
-    // the configuration directory and the MythImage path
-    if (im->m_type == kSubDirectory ||
-        im->m_type == kUpDirectory)
-    {
-        imageFileName = im->m_thumbFileNameList->at(id);
-        imageFileName = imageFileName.mid(GetConfDir().append("/MythImage/").count());
-    }
-
-    QImage image;
-    if (!image.load(imageFileName))
-        return;
-
-    QMatrix matrix;
-    switch (im->GetOrientation())
-    {
-    case 1: // If the image is in its original state
-        break;
-
-    case 2: // The image is horizontally flipped
-        image = image.mirrored(true, false);
-        break;
-
-    case 3: // The image is rotated 180°
-        matrix.rotate(180);
-        image = image.transformed(matrix, Qt::SmoothTransformation);
-        break;
-
-    case 4: // The image is vertically flipped
-        image = image.mirrored(false, true);
-        break;
-
-    case 5: // The image is transposed (rotated 90° CW flipped horizontally)
-        matrix.rotate(90);
-        image = image.transformed(matrix, Qt::SmoothTransformation);
-        image = image.mirrored(true, false);
-        break;
-
-    case 6: // The image is rotated 90° CCW
-        matrix.rotate(270);
-        image = image.transformed(matrix, Qt::SmoothTransformation);
-        break;
-
-    case 7: // The image is transversed  (rotated 90° CW and flipped vertically)
-        matrix.rotate(90);
-        image = image.transformed(matrix, Qt::SmoothTransformation);
-        image = image.mirrored(false, true);
-        break;
-
-    case 8: // The image is rotated 90° CW
-        matrix.rotate(90);
-        image = image.transformed(matrix, Qt::SmoothTransformation);
-        break;
-
-    default:
-        break;
-    }
-
-    Resize(image);
-
-    // save the image in the thumbnail directory
-    if (image.save(im->m_thumbFileNameList->at(id)))
-        emit ThumbnailCreated(im, id);
-}
-
-
-
-/** \fn     GalleryThumbGenThread::CreateVideoThumbnail(ImageMetadata *)
- *  \brief  Creates a video preview image with the correct size
- *  \param  im The thumbnail details
- *  \return void
- */
-void GalleryThumbGenThread::CreateVideoThumbnail(ImageMetadata *im)
-{
-    if (QFile(im->m_thumbFileNameList->at(0)).exists())
-        return;
-
-    QDir dir;
-    if (!dir.exists(im->m_thumbPath))
-        dir.mkpath(im->m_thumbPath);
-
-    QString videoFileName = m_storageGroup.FindFile(im->m_fileName);
-
-    QString cmd = "mythpreviewgen";
-    QStringList args;
-    args << logPropagateArgs.split(" ", QString::SkipEmptyParts);
-    args << "--infile"  << '"' + videoFileName + '"';
-    args << "--outfile" << '"' + im->m_thumbFileNameList->at(0) + '"';
-
-    MythSystemLegacy ms(cmd, args, kMSRunShell);
-    ms.SetDirectory(im->m_thumbPath);
-    ms.Run();
-
-    // If the process exited successful
-    // then try to load the thumbnail
-    if (ms.Wait() == GENERIC_EXIT_OK)
-    {
-        QImage image;
-        if (!image.load(im->m_thumbFileNameList->at(0)))
-            return;
-
-        Resize(image);
-
-        // save the default image in the thumbnail directory
-        if (image.save(im->m_thumbFileNameList->at(0)))
-            emit ThumbnailCreated(im, 0);
-    }
-}
-
-
-
-/** \fn     GalleryThumbGenThread::Resize(QImage)
- *  \brief  Resizes the thumbnail to prevent black areas 
- *          around the image when its shown in a widget.
- *  \param  The image that shall be resized
- *  \return void
- */
-void GalleryThumbGenThread::Resize(QImage &image)
-{
-    // If the factor of the width to height of the image is smaller
-    // than of the widget stretch the image horizontally. The image
-    // will be higher then the widgets height, so it needs to be cropped.
-    if ((image.width() / image.height()) < (m_width / m_height))
-    {
-        image = image.scaledToWidth(m_width, Qt::SmoothTransformation);
-
-        // Copy a part of the image so that
-        // the copied area has the size of the widget.
-        if (image.height() > m_height)
-        {
-            int offset = (image.height() - m_height) / 2;
-            image = image.copy(0, offset, m_width, m_height);
-        }
-    }
-    else
-    {
-        image = image.scaledToHeight(m_height, Qt::SmoothTransformation);
-
-        if (image.width() > m_width)
-        {
-            int offset = (image.width() - m_width) / 2;
-            image = image.copy(offset, 0, m_width, m_height);
-        }
-    }
-}
-
-
-
-/** \fn     GalleryThumbGenThread::AddToThumbnailList(ImageMetadata *)
- *  \brief  Adds a file to the thumbnail list
- *  \param  im The file information
- *  \return void
- */
-void GalleryThumbGenThread::AddToThumbnailList(ImageMetadata *im)
-{
-    if (!im)
-        return;
-
-    m_mutex.lock();
-    m_fileList.append(im);
-    m_fileListSize = m_fileList.size();
-    m_mutex.unlock();
-}
-
-
-
-/** \fn     GalleryThumbGenThread::RecreateThumbnail(ImageMetadata *)
- *  \brief  Deletes the old thumbnail and creates a new one
- *  \param  im The thumbnail information
- *  \return void
- */
-void GalleryThumbGenThread::RecreateThumbnail(ImageMetadata *im)
-{
-    if (!im)
-        return;
-
-    if (QFile::remove(im->m_thumbFileNameList->at(0)))
-    {
-        GetMythUI()->RemoveFromCacheByFile(
-                    im->m_thumbFileNameList->at(0));
-
-        AddToThumbnailList(im);
-    }
-}
-
-
-
-/** \fn     GalleryThumbGenThread::cancel()
- *  \brief  Clears the thumbnail list so that the thread can exit.
- *  \return void
- */
-void GalleryThumbGenThread::cancel()
-{
-    m_mutex.lock();
-    m_fileList.clear();
-    m_fileListSize = 0;
-    m_mutex.unlock();
-
-    emit UpdateThumbnailProgress(0, 0);
-}
-
-
-
-/** \fn     GalleryThumbGenThread::Pause()
- *  \brief  Pauses the thumbnail generation
- *  \return void
- */
-void GalleryThumbGenThread::Pause()
-{
-    m_pause = true;
-}
-
-
-
-/** \fn     GalleryThumbGenThread::Resume()
- *  \brief  Resumes the thumbnail generation
- *  \return void
- */
-void GalleryThumbGenThread::Resume()
-{
-    m_condition.wakeAll();
-    m_pause = false;
-}
-
-
-
-/** \fn     GalleryThumbGenThread::SetThumbnailSize(int, int)
- *  \brief  Saves and specifies the size of the thumbnails.
- *  \return void
- */
-void GalleryThumbGenThread::SetThumbnailSize(int width, int height)
-{
-    if (width > 0)
-        m_width = width;
-
-    if (height > 0)
-        m_height = height;
-}
diff --git a/mythtv/programs/mythfrontend/gallerythumbgenthread.h b/mythtv/programs/mythfrontend/gallerythumbgenthread.h
deleted file mode 100644
index 1a0417e..0000000
--- a/mythtv/programs/mythfrontend/gallerythumbgenthread.h
+++ /dev/null
@@ -1,63 +0,0 @@
-#ifndef GALLERYTHUMBGENTHREAD_H
-#define GALLERYTHUMBGENTHREAD_H
-
-// Qt headers
-#include <QThread>
-#include <QMutex>
-
-// MythTV headers
-#include "mythuibuttontree.h"
-#include "imagemetadata.h"
-#include "storagegroup.h"
-
-#include "galleryfilehelper.h"
-#include "gallerydatabasehelper.h"
-
-
-
-class GalleryThumbGenThread : public QThread
-{
-    Q_OBJECT
-
-public:
-    GalleryThumbGenThread();
-    ~GalleryThumbGenThread();
-
-    void cancel();
-    void Pause();
-    void Resume();
-    void AddToThumbnailList(ImageMetadata *);
-    void RecreateThumbnail(ImageMetadata *);
-    void SetThumbnailSize(int, int);
-
-signals:
-    void ThumbnailCreated(ImageMetadata *, int);
-    void UpdateThumbnailProgress(int, int);
-
-protected:
-    void run();
-
-private:
-    void CreateImageThumbnail(ImageMetadata *, int);
-    void CreateVideoThumbnail(ImageMetadata *);
-
-    void Resize(QImage &);
-    void Rotate(QImage &);
-    void Combine(QImage &, QImage &, QPoint);
-    void DrawBorder(QImage &);
-
-    QList<ImageMetadata *>    m_fileList;
-    QMutex              m_mutex;
-    GalleryFileHelper         *m_fileHelper;
-    GalleryDatabaseHelper     *m_dbHelper;
-
-    int m_width;
-    int m_height;
-    bool m_pause;
-    int m_fileListSize;
-
-    QWaitCondition      m_condition;
-    StorageGroup        m_storageGroup;
-};
-
-#endif // GALLERYTHUMBGENTHREAD_H
diff --git a/mythtv/programs/mythfrontend/galleryview.cpp b/mythtv/programs/mythfrontend/galleryview.cpp
index eeb5c68..53ff75c 100644
--- a/mythtv/programs/mythfrontend/galleryview.cpp
+++ b/mythtv/programs/mythfrontend/galleryview.cpp
@@ -1,10 +1,13 @@
+
+#include "galleryview.h"
+
 // Qt headers
 
 // MythTV headers
 #include "mythcontext.h"
 
-#include "galleryview.h"
 #include "galleryconfig.h"
+#include "gallerytypedefs.h"
 #include "imagescan.h"
 
 
diff --git a/mythtv/programs/mythfrontend/galleryviewhelper.cpp b/mythtv/programs/mythfrontend/galleryviewhelper.cpp
index 3ebc4b3..ae490b3 100644
--- a/mythtv/programs/mythfrontend/galleryviewhelper.cpp
+++ b/mythtv/programs/mythfrontend/galleryviewhelper.cpp
@@ -1,3 +1,6 @@
+
+#include "galleryviewhelper.h"
+
 // Qt headers
 #include <QFile>
 
@@ -6,10 +9,6 @@
 #include "storagegroup.h"
 #include "imageutils.h"
 
-#include "galleryviewhelper.h"
-
-
-
 /** \fn     GalleryViewHelper::GalleryViewHelper(MythScreenType *)
  *  \brief  Constructor
  *  \param  parent The screen parent
@@ -22,7 +21,7 @@ GalleryViewHelper::GalleryViewHelper(MythScreenType *parent)
     m_sgDirList = StorageGroup::getGroupDirs(m_sgName, "");
 
     m_dbHelper = new GalleryDatabaseHelper();
-    m_thumbGenThread = new GalleryThumbGenThread();
+    m_thumbGenThread = new ImageThumbGenThread();
     m_fileHelper  = new GalleryFileHelper();
 
     connect(m_thumbGenThread,  SIGNAL(ThumbnailCreated(ImageMetadata *, int)),
diff --git a/mythtv/programs/mythfrontend/galleryviewhelper.h b/mythtv/programs/mythfrontend/galleryviewhelper.h
index 564e1cc..4956176 100644
--- a/mythtv/programs/mythfrontend/galleryviewhelper.h
+++ b/mythtv/programs/mythfrontend/galleryviewhelper.h
@@ -9,10 +9,10 @@
 // MythTV headers
 #include "mythgenerictree.h"
 #include "imagemetadata.h"
+#include "imagethumbgenthread.h"
 
-#include "gallerythumbgenthread.h"
 #include "galleryfilehelper.h"
-
+#include "gallerydatabasehelper.h"
 
 
 class GalleryViewHelper : public QObject
@@ -24,7 +24,7 @@ public:
     ~GalleryViewHelper();
 
     MythGenericTree         *m_currentNode;
-    GalleryThumbGenThread   *m_thumbGenThread;
+    ImageThumbGenThread   *m_thumbGenThread;
 
     QStringList m_sgDirList;
     QString     m_sgName;
diff --git a/mythtv/programs/mythfrontend/gallerywidget.cpp b/mythtv/programs/mythfrontend/gallerywidget.cpp
index de59000..a2efc41 100644
--- a/mythtv/programs/mythfrontend/gallerywidget.cpp
+++ b/mythtv/programs/mythfrontend/gallerywidget.cpp
@@ -1,3 +1,6 @@
+
+#include "gallerywidget.h"
+
 // Qt headers
 #include <QByteArray>
 #include <QXmlStreamReader>
@@ -6,8 +9,7 @@
 #include "mythcontext.h"
 #include "mythmainwindow.h"
 
-#include "gallerywidget.h"
-
+#include "imagethumbgenthread.h"
 
 
 ImageLoadingThread::ImageLoadingThread() :
diff --git a/mythtv/programs/mythfrontend/mythfrontend.pro b/mythtv/programs/mythfrontend/mythfrontend.pro
index 945a04c..c216ca2 100644
--- a/mythtv/programs/mythfrontend/mythfrontend.pro
+++ b/mythtv/programs/mythfrontend/mythfrontend.pro
@@ -50,7 +50,7 @@ HEADERS += commandlineparser.h          idlescreen.h
 HEADERS += galleryview.h                galleryviewhelper.h
 HEADERS += galleryconfig.h              galleryfilehelper.h
 HEADERS += gallerydatabasehelper.h      gallerywidget.h
-HEADERS += gallerythumbgenthread.h      gallerytypedefs.h
+HEADERS += gallerytypedefs.h
 
 SOURCES += main.cpp playbackbox.cpp viewscheduled.cpp audiogeneralsettings.cpp
 SOURCES += globalsettings.cpp manualschedule.cpp programrecpriority.cpp
@@ -74,8 +74,7 @@ SOURCES += videoglobalsettings.cpp      upnpscanner.cpp
 SOURCES += commandlineparser.cpp        idlescreen.cpp
 SOURCES += galleryview.cpp              gallerywidget.cpp
 SOURCES += galleryviewhelper.cpp        galleryconfig.cpp
-SOURCES += gallerydatabasehelper.cpp    gallerythumbgenthread.cpp
-SOURCES += galleryfilehelper.cpp
+SOURCES += gallerydatabasehelper.cpp    galleryfilehelper.cpp
 
 HEADERS += serviceHosts/frontendServiceHost.h
 HEADERS += services/frontend.h
-- 
1.7.10.2

