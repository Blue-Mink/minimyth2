From de990998c84b5d0d064a5f9b052249bd9e41d372 Mon Sep 17 00:00:00 2001
From: Robert Siebert <rsiebert@miroku.no-ip.com>
Date: Wed, 20 Mar 2013 11:19:13 +0100
Subject: [PATCH 049/760] Added the required service contracts for the image
 service API.

Signed-off-by: Stuart Morgan <smorgan@mythtv.org>
---
 .../datacontracts/imageMetadataInfo.h              |   73 ++++++++++++++++
 .../datacontracts/imageMetadataInfoList.h          |   91 ++++++++++++++++++++
 .../datacontracts/imageSyncInfo.h                  |   63 ++++++++++++++
 .../libmythservicecontracts.pro                    |    6 ++
 .../services/imageServices.h                       |   61 +++++++++++++
 5 files changed, 294 insertions(+)
 create mode 100644 mythtv/libs/libmythservicecontracts/datacontracts/imageMetadataInfo.h
 create mode 100644 mythtv/libs/libmythservicecontracts/datacontracts/imageMetadataInfoList.h
 create mode 100644 mythtv/libs/libmythservicecontracts/datacontracts/imageSyncInfo.h
 create mode 100644 mythtv/libs/libmythservicecontracts/services/imageServices.h

diff --git a/mythtv/libs/libmythservicecontracts/datacontracts/imageMetadataInfo.h b/mythtv/libs/libmythservicecontracts/datacontracts/imageMetadataInfo.h
new file mode 100644
index 0000000..09041a9
--- /dev/null
+++ b/mythtv/libs/libmythservicecontracts/datacontracts/imageMetadataInfo.h
@@ -0,0 +1,73 @@
+#ifndef IMAGEMETADATAINFO_H
+#define IMAGEMETADATAINFO_H
+
+#include <QString>
+
+#include "serviceexp.h"
+#include "datacontracthelper.h"
+
+
+
+namespace DTC
+{
+
+class SERVICE_PUBLIC ImageMetadataInfo : public QObject
+{
+    Q_OBJECT
+    Q_CLASSINFO( "version"    , "1.00" )
+
+    Q_PROPERTY( int             Number      READ Number         WRITE setNumber     )
+    Q_PROPERTY( QString         Family      READ Family         WRITE setFamily     )
+    Q_PROPERTY( QString         Group       READ Group          WRITE setGroup      )
+    Q_PROPERTY( QString         Tag         READ Tag            WRITE setTag        )
+    Q_PROPERTY( QString         Key         READ Key            WRITE setKey        )
+    Q_PROPERTY( QString         Label       READ Label          WRITE setLabel      )
+    Q_PROPERTY( QString         Value       READ Value          WRITE setValue      )
+
+    PROPERTYIMP    ( int        , Number       )
+    PROPERTYIMP    ( QString    , Family       )
+    PROPERTYIMP    ( QString    , Group        )
+    PROPERTYIMP    ( QString    , Tag          )
+    PROPERTYIMP    ( QString    , Key          )
+    PROPERTYIMP    ( QString    , Label        )
+    PROPERTYIMP    ( QString    , Value        )
+
+    public:
+
+        static void InitializeCustomTypes()
+        {
+            qRegisterMetaType< ImageMetadataInfo  >();
+            qRegisterMetaType< ImageMetadataInfo* >();
+        }
+
+    public:
+
+        ImageMetadataInfo(QObject *parent = 0)
+                        : QObject         ( parent ),
+                          m_Number        ( 0      )
+        {
+        }
+
+        ImageMetadataInfo( const ImageMetadataInfo &src )
+        {
+            Copy( src );
+        }
+
+        void Copy( const ImageMetadataInfo &src )
+        {
+            m_Number    = src.m_Number;
+            m_Family    = src.m_Family;
+            m_Group     = src.m_Group;
+            m_Tag       = src.m_Tag;
+            m_Key       = src.m_Key;
+            m_Label     = src.m_Label;
+            m_Value     = src.m_Value;
+        }
+};
+
+} // namespace DTC
+
+Q_DECLARE_METATYPE( DTC::ImageMetadataInfo  )
+Q_DECLARE_METATYPE( DTC::ImageMetadataInfo* )
+
+#endif // IMAGEMETADATAINFO_H
diff --git a/mythtv/libs/libmythservicecontracts/datacontracts/imageMetadataInfoList.h b/mythtv/libs/libmythservicecontracts/datacontracts/imageMetadataInfoList.h
new file mode 100644
index 0000000..d1cb063
--- /dev/null
+++ b/mythtv/libs/libmythservicecontracts/datacontracts/imageMetadataInfoList.h
@@ -0,0 +1,91 @@
+#ifndef IMAGEMETADATAINFOLIST_H
+#define IMAGEMETADATAINFOLIST_H
+
+#include <QVariantList>
+
+#include "serviceexp.h"
+#include "datacontracthelper.h"
+#include "imageMetadataInfo.h"
+
+
+
+namespace DTC
+{
+
+class SERVICE_PUBLIC ImageMetadataInfoList : public QObject
+{
+    Q_OBJECT
+    Q_CLASSINFO( "version", "1.0" )
+
+    // Q_CLASSINFO Used to augment Metadata for properties.
+    // See datacontracthelper.h for details
+
+    Q_CLASSINFO( "ImageMetadataInfos", "type=DTC::ImageMetadataInfo")
+
+    Q_PROPERTY( int          Count              READ Count              WRITE setCount          )
+    Q_PROPERTY( QString      File               READ File               WRITE setFile           )
+    Q_PROPERTY( QString      Path               READ Path               WRITE setPath           )
+    Q_PROPERTY( int          Size               READ Size               WRITE setSize           )
+    Q_PROPERTY( QString      Extension          READ Extension          WRITE setExtension      )
+    Q_PROPERTY( QVariantList ImageMetadataInfos READ ImageMetadataInfos DESIGNABLE true )
+
+    PROPERTYIMP       ( int         , Count           )
+    PROPERTYIMP       ( QString     , File            )
+    PROPERTYIMP       ( QString     , Path            )
+    PROPERTYIMP       ( int         , Size            )
+    PROPERTYIMP       ( QString     , Extension       )
+    PROPERTYIMP_RO_REF( QVariantList, ImageMetadataInfos )
+
+    public:
+
+        static void InitializeCustomTypes()
+        {
+            qRegisterMetaType< ImageMetadataInfoList  >();
+            qRegisterMetaType< ImageMetadataInfoList* >();
+
+            ImageMetadataInfo::InitializeCustomTypes();
+        }
+
+    public:
+
+        ImageMetadataInfoList(QObject *parent = 0)
+            : QObject( parent ),
+              m_Count         ( 0      ),
+              m_Size          ( 0      )
+        {
+        }
+
+        ImageMetadataInfoList( const ImageMetadataInfoList &src )
+        {
+            Copy( src );
+        }
+
+        void Copy( const ImageMetadataInfoList &src )
+        {
+            m_Count         = src.m_Count;
+            m_File          = src.m_File;
+            m_Path          = src.m_Path;
+            m_Size          = src.m_Size;
+            m_Extension     = src.m_Extension;
+
+            CopyListContents< ImageMetadataInfo >( this, m_ImageMetadataInfos, src.m_ImageMetadataInfos );
+        }
+
+        ImageMetadataInfo *AddNewImageMetadataInfo()
+        {
+            // We must make sure the object added to the
+            // QVariantList has a parent of 'this'
+            ImageMetadataInfo *pObject = new ImageMetadataInfo( this );
+            m_ImageMetadataInfos.append( QVariant::fromValue<QObject *>( pObject ));
+
+            return pObject;
+        }
+
+};
+
+} // namespace DTC
+
+Q_DECLARE_METATYPE( DTC::ImageMetadataInfoList  )
+Q_DECLARE_METATYPE( DTC::ImageMetadataInfoList* )
+
+#endif // IMAGEMETADATAINFOLIST_H
diff --git a/mythtv/libs/libmythservicecontracts/datacontracts/imageSyncInfo.h b/mythtv/libs/libmythservicecontracts/datacontracts/imageSyncInfo.h
new file mode 100644
index 0000000..04584a0
--- /dev/null
+++ b/mythtv/libs/libmythservicecontracts/datacontracts/imageSyncInfo.h
@@ -0,0 +1,63 @@
+#ifndef IMAGESYNCINFO_H
+#define IMAGESYNCINFO_H
+
+#include <QString>
+
+#include "serviceexp.h"
+#include "datacontracthelper.h"
+
+
+
+namespace DTC
+{
+
+class SERVICE_PUBLIC ImageSyncInfo : public QObject
+{
+    Q_OBJECT
+    Q_CLASSINFO( "version"    , "1.00" )
+
+    Q_PROPERTY( bool            Running     READ Running        WRITE setRunning    )
+    Q_PROPERTY( int             Current     READ Current        WRITE setCurrent    )
+    Q_PROPERTY( int             Total       READ Total          WRITE setTotal      )
+
+    PROPERTYIMP    ( bool       , Running      )
+    PROPERTYIMP    ( int        , Current      )
+    PROPERTYIMP    ( int        , Total        )
+
+    public:
+
+        static void InitializeCustomTypes()
+        {
+            qRegisterMetaType< ImageSyncInfo  >();
+            qRegisterMetaType< ImageSyncInfo* >();
+        }
+
+    public:
+
+        ImageSyncInfo(QObject *parent = 0)
+                        : QObject         ( parent ),
+                          m_Running       ( false  ),
+                          m_Current       ( 0 ),
+                          m_Total         ( 0 )
+        {
+        }
+
+        ImageSyncInfo( const ImageSyncInfo &src )
+        {
+            Copy( src );
+        }
+
+        void Copy( const ImageSyncInfo &src )
+        {
+            m_Running       = src.m_Running;
+            m_Current       = src.m_Current;
+            m_Total         = src.m_Total;
+        }
+};
+
+} // namespace DTC
+
+Q_DECLARE_METATYPE( DTC::ImageSyncInfo  )
+Q_DECLARE_METATYPE( DTC::ImageSyncInfo* )
+
+#endif // IMAGESYNCINFO_H
diff --git a/mythtv/libs/libmythservicecontracts/libmythservicecontracts.pro b/mythtv/libs/libmythservicecontracts/libmythservicecontracts.pro
index d972515..f61a19e 100644
--- a/mythtv/libs/libmythservicecontracts/libmythservicecontracts.pro
+++ b/mythtv/libs/libmythservicecontracts/libmythservicecontracts.pro
@@ -21,6 +21,7 @@ HEADERS += services/contentServices.h services/dvrServices.h
 HEADERS += services/channelServices.h services/videoServices.h
 HEADERS += services/captureServices.h
 HEADERS += services/frontendServices.h
+HEADERS += services/imageServices.h
 
 HEADERS += datacontracts/connectionInfo.h        datacontracts/databaseInfo.h
 HEADERS += datacontracts/programAndChannel.h     datacontracts/programGuide.h
@@ -43,6 +44,8 @@ HEADERS += datacontracts/liveStreamInfo.h        datacontracts/liveStreamInfoLis
 HEADERS += datacontracts/titleInfo.h             datacontracts/titleInfoList.h
 HEADERS += datacontracts/labelValue.h
 HEADERS += datacontracts/logMessage.h            datacontracts/logMessageList.h
+HEADERS += datacontracts/imageMetadataInfoList.h datacontracts/imageMetadataInfo.h
+HEADERS += datacontracts/imageSyncInfo.h
 
 SOURCES += service.cpp
 
@@ -64,6 +67,7 @@ incServices.files += services/contentServices.h services/dvrServices.h
 incServices.files += services/channelServices.h services/videoServices.h
 incServices.files += services/captureServices.h
 incServices.files += services/frontendServices.h
+incServices.files += services/imageServices.h
 
 incDatacontracts.path = $${PREFIX}/include/mythtv/libmythservicecontracts/datacontracts/
 incDatacontracts.files  = datacontracts/connectionInfo.h      datacontracts/databaseInfo.h
@@ -84,6 +88,8 @@ incDatacontracts.files += datacontracts/liveStreamInfo.h      datacontracts/live
 incDatacontracts.files += datacontracts/titleInfo.h           datacontracts/titleInfoList.h
 incDatacontracts.files += datacontracts/labelValue.h
 incDatacontracts.files += datacontracts/logMessage.h          datacontracts/logMessageList.h
+incDatacontracts.files += datacontracts/imageMetadataInfoList.h datacontracts/imageMetadataInfo.h
+incDatacontracts.files += datacontracts/imageSyncInfo.h
 
 INSTALLS += inc incServices incDatacontracts
 
diff --git a/mythtv/libs/libmythservicecontracts/services/imageServices.h b/mythtv/libs/libmythservicecontracts/services/imageServices.h
new file mode 100644
index 0000000..d6dadf6
--- /dev/null
+++ b/mythtv/libs/libmythservicecontracts/services/imageServices.h
@@ -0,0 +1,61 @@
+#ifndef IMAGESERVICES_H_
+#define IMAGESERVICES_H_
+
+#include <QFileInfo>
+#include <QStringList>
+
+#include "service.h"
+#include "datacontracts/imageMetadataInfoList.h"
+#include "datacontracts/imageSyncInfo.h"
+
+
+
+class SERVICE_PUBLIC ImageServices : public Service
+{
+    Q_OBJECT
+    Q_CLASSINFO( "version"    , "1.0" )
+    Q_CLASSINFO( "SetImageInfo_Method",         "POST" )
+    Q_CLASSINFO( "StartSync_Method",            "POST" )
+    Q_CLASSINFO( "StopSync_Method",             "POST" )
+
+    public:
+
+        // Must call InitializeCustomTypes for each unique
+        // Custom Type used in public slots below.
+        ImageServices( QObject *parent = 0 ) : Service( parent )
+        {
+            // Must call InitializeCustomTypes for each
+            // unique Custom Type used in public slots below.
+            DTC::ImageMetadataInfoList::InitializeCustomTypes();
+            DTC::ImageSyncInfo::InitializeCustomTypes();
+        }
+
+    public slots:
+
+        virtual bool                        SetImageInfo                ( int   Id,
+                                                                          const QString &Tag,
+                                                                          const QString &Value ) = 0;
+
+        virtual bool                        SetImageInfoByFileName      ( const QString &FileName,
+                                                                          const QString &Tag,
+                                                                          const QString &Value ) = 0;
+
+        virtual QString                     GetImageInfo                ( int   Id,
+                                                                          const QString &Tag ) = 0;
+
+        virtual QString                     GetImageInfoByFileName      ( const QString &FileName,
+                                                                          const QString &Tag ) = 0;
+
+        virtual DTC::ImageMetadataInfoList* GetImageInfoList            ( int   Id ) = 0;
+
+        virtual DTC::ImageMetadataInfoList* GetImageInfoListByFileName  ( const QString &FileName ) = 0;
+
+        virtual bool                        RemoveImageFromDB  ( int   Id ) = 0;
+        virtual bool                        RemoveImage        ( int   Id ) = 0;
+
+        virtual bool                        StartSync          ( void ) = 0;
+        virtual bool                        StopSync           ( void ) = 0;
+        virtual DTC::ImageSyncInfo*         GetSyncStatus      ( void ) = 0;
+};
+
+#endif
-- 
1.7.10.2

