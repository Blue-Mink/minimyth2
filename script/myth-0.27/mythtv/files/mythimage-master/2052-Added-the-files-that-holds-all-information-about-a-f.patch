From 3209e187e1b0e516d4b3d7f8a09ec103dbd4fd03 Mon Sep 17 00:00:00 2001
From: Robert Siebert <rsiebert@miroku.no-ip.com>
Date: Wed, 20 Mar 2013 11:23:48 +0100
Subject: [PATCH 052/760] Added the files that holds all information about a
 file. This metadata class is used throughout the
 application.

Signed-off-by: Stuart Morgan <smorgan@mythtv.org>
---
 mythtv/libs/libmythmetadata/imagemetadata.cpp |  210 +++++++++++++++++++++++++
 mythtv/libs/libmythmetadata/imagemetadata.h   |   94 +++++++++++
 2 files changed, 304 insertions(+)
 create mode 100644 mythtv/libs/libmythmetadata/imagemetadata.cpp
 create mode 100644 mythtv/libs/libmythmetadata/imagemetadata.h

diff --git a/mythtv/libs/libmythmetadata/imagemetadata.cpp b/mythtv/libs/libmythmetadata/imagemetadata.cpp
new file mode 100644
index 0000000..b3b94e6
--- /dev/null
+++ b/mythtv/libs/libmythmetadata/imagemetadata.cpp
@@ -0,0 +1,210 @@
+#include "mythcontext.h"
+
+#include "imagemetadata.h"
+
+
+
+/** \fn     ImageMetadata::ImageMetadata()
+ *  \brief  Constructor
+ *  \return void
+ */
+ImageMetadata::ImageMetadata()
+{
+    m_id = 0;
+    m_fileName = "";
+    m_name = "";
+    m_path = "";
+    m_parentId = 0;
+    m_dirCount = 0;
+    m_fileCount = 0;
+    m_type = 0;
+    m_modTime = 0;
+    m_size = 0;
+    m_extension = "";
+    m_angle = 0;
+    m_orientation = 0;
+    m_date = 0;
+    m_zoom = 0;
+    m_isHidden = false;
+
+    m_selected = false;
+
+    m_thumbPath = "";
+    m_thumbFileNameList = new QList<QString>();
+
+    // Initialize the lists to avoid assertions.
+    for (int i = 0; i < kMaxFolderThumbnails; ++i)
+        m_thumbFileNameList->append(QString(""));
+}
+
+
+
+/** \fn     DataMap::~DataMap()
+ *  \brief  Destructor
+ *  \return void
+ */
+ImageMetadata::~ImageMetadata()
+{
+    if (m_thumbFileNameList)
+        delete m_thumbFileNameList;
+}
+
+
+
+/** \fn     ImageMetadata::SetAngle(int)
+ *  \brief  Sets the angle within the allowed range
+ *  \param  angle The angle that shall be saved
+ *  \return void
+ */
+void ImageMetadata::SetAngle(int angle)
+{
+    m_angle += angle;
+
+    if (m_angle >= 360)
+        m_angle -= 360;
+
+    if (m_angle < 0)
+        m_angle += 360;
+}
+
+
+
+/** \fn     ImageMetadata::SetZoom(int)
+ *  \brief  Sets the zoom within the allowed range
+ *  \param  zoom The zoom value that shall be saved
+ *  \return void
+ */
+void ImageMetadata::SetZoom(int zoom)
+{
+    m_zoom += zoom;
+
+    if (m_zoom > 300)
+        m_zoom = 300;
+
+    if (m_zoom < 0)
+        m_zoom = 0;
+}
+
+
+
+/** \fn     ImageMetadata::GetOrientation()
+ *  \brief  Gets the orientation of the image (rotated, vertically and/or
+ *          horizontally flipped) depending on the old state.
+ *  \return The new orientation
+ */
+int ImageMetadata::GetOrientation()
+{
+    return m_orientation;
+}
+
+
+
+/** \fn     ImageMetadata::SetOrientation(int)
+ *  \brief  Sets the orientation of the image (rotated, vertically and/or
+ *          horizontally flipped) depending on the old state.
+ *  \param  orientation The orientation value that shall be set
+ *  \return void
+ */
+void ImageMetadata::SetOrientation(int orientation, bool replace = false)
+{
+    if (replace)
+    {
+        m_orientation = orientation;
+        return;
+    }
+
+    switch (m_orientation)
+    {
+    case 0: // The image has no orientation saved
+    case 1: // If the image is in its original state
+        if (orientation == kFileRotateCW)
+            m_orientation = 8;
+        else if (orientation == kFileRotateCCW)
+            m_orientation = 6;
+        else if (orientation == kFileFlipHorizontal)
+            m_orientation = 2;
+        else if (orientation == kFileFlipVertical)
+            m_orientation = 4;
+        break;
+
+    case 2: // The image is horizontally flipped
+        if (orientation == kFileRotateCW)
+            m_orientation = 7;
+        else if (orientation == kFileRotateCCW)
+            m_orientation = 5;
+        else if (orientation == kFileFlipHorizontal)
+            m_orientation = 1;
+        else if (orientation == kFileFlipVertical)
+            m_orientation = 3;
+        break;
+
+    case 3: // The image is rotated 180°
+        if (orientation == kFileRotateCW)
+            m_orientation = 6;
+        else if (orientation == kFileRotateCCW)
+            m_orientation = 8;
+        else if (orientation == kFileFlipHorizontal)
+            m_orientation = 4;
+        else if (orientation == kFileFlipVertical)
+            m_orientation = 2;
+        break;
+
+    case 4: // The image is vertically flipped
+        if (orientation == kFileRotateCW)
+            m_orientation = 5;
+        else if (orientation == kFileRotateCCW)
+            m_orientation = 7;
+        else if (orientation == kFileFlipHorizontal)
+            m_orientation = 3;
+        else if (orientation == kFileFlipVertical)
+            m_orientation = 1;
+        break;
+
+    case 5: // The image is transposed (rotated 90° CW flipped horizontally)
+        if (orientation == kFileRotateCW)
+            m_orientation = 2;
+        else if (orientation == kFileRotateCCW)
+            m_orientation = 4;
+        else if (orientation == kFileFlipHorizontal)
+            m_orientation = 8;
+        else if (orientation == kFileFlipVertical)
+            m_orientation = 6;
+        break;
+
+    case 6: // The image is rotated 90° CCW
+        if (orientation == kFileRotateCW)
+            m_orientation = 1;
+        else if (orientation == kFileRotateCCW)
+            m_orientation = 3;
+        else if (orientation == kFileFlipHorizontal)
+            m_orientation = 7;
+        else if (orientation == kFileFlipVertical)
+            m_orientation = 5;
+        break;
+
+    case 7: // The image is transversed  (rotated 90° CW and flipped vertically)
+        if (orientation == kFileRotateCW)
+            m_orientation = 4;
+        else if (orientation == kFileRotateCCW)
+            m_orientation = 2;
+        else if (orientation == kFileFlipHorizontal)
+            m_orientation = 6;
+        else if (orientation == kFileFlipVertical)
+            m_orientation = 8;
+        break;
+
+    case 8: // The image is rotated 90° CW
+        if (orientation == kFileRotateCW)
+            m_orientation = 3;
+        else if (orientation == kFileRotateCCW)
+            m_orientation = 1;
+        else if (orientation == kFileFlipHorizontal)
+            m_orientation = 5;
+        else if (orientation == kFileFlipVertical)
+            m_orientation = 7;
+        break;
+
+    default:
+        break;
+    }
+}
diff --git a/mythtv/libs/libmythmetadata/imagemetadata.h b/mythtv/libs/libmythmetadata/imagemetadata.h
new file mode 100644
index 0000000..1e21bf2
--- /dev/null
+++ b/mythtv/libs/libmythmetadata/imagemetadata.h
@@ -0,0 +1,94 @@
+#ifndef IMAGEMETADATA_H
+#define IMAGEMETADATA_H
+
+// Qt headers
+#include <QFileInfo>
+#include <QString>
+#include <QImage>
+#include <QList>
+
+// MythTV headers
+#include "mythmetaexp.h"
+
+
+
+// We need to use other names to avoid
+// getting coflicts with the videolist.h file
+enum ImageTreeNodeType {
+    kUnknown        = 0,
+    kBaseDirectory  = 1,
+    kSubDirectory   = 2,
+    kUpDirectory    = 3,
+    kImageFile      = 4,
+    kVideoFile      = 5
+};
+
+enum ImageFileOrientationState {
+    kFileRotateCW       = 0,
+    kFileRotateCCW      = 1,
+    kFileFlipHorizontal = 2,
+    kFileFlipVertical   = 3,
+    kFileZoomIn         = 4,
+    kFileZoomOut        = 5
+};
+
+enum ImageFileSortOrder {
+    kSortByNameAsc     = 0,
+    kSortByNameDesc    = 1,
+    kSortByModTimeAsc  = 2,
+    kSortByModTimeDesc = 3,
+    kSortByExtAsc      = 4,
+    kSortByExtDesc     = 5,
+    kSortBySizeAsc     = 6,
+    kSortBySizeDesc    = 7,
+    kSortByDateAsc     = 8,
+    kSortByDateDesc    = 9
+};
+
+const static int kMaxFolderThumbnails = 4;
+
+
+class META_PUBLIC ImageMetadata
+{
+public:
+    ImageMetadata();
+    ~ImageMetadata();
+
+    // Database fields
+    int         m_id;
+    QString     m_fileName;
+    QString     m_name;
+    QString     m_path;
+    int         m_parentId;
+    int         m_dirCount;
+    int         m_fileCount;
+    int         m_type;
+    int         m_modTime;
+    int         m_size;
+    QString     m_extension;
+    double      m_date;
+    int         m_isHidden;
+
+    // Internal information
+    bool        m_selected;
+
+    int         GetAngle()  const   { return m_angle; }
+    int         GetZoom()   const   { return m_zoom; }
+    int         GetOrientation();
+    void        SetAngle(int);
+    void        SetZoom(int);
+    void        SetOrientation(int, bool);
+
+    // Internal thumbnail information
+    QString         m_thumbPath;
+    QList<QString> *m_thumbFileNameList;
+
+private:
+    int         m_zoom;
+    int         m_angle;
+    int         m_orientation;
+};
+
+Q_DECLARE_METATYPE(ImageMetadata*)
+
+#endif // IMAGEMETADATA_H
-- 
1.7.10.2

