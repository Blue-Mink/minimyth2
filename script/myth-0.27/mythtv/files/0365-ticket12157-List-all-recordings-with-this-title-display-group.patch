From d9d31924adae8882124e7290488ae33804979809 Mon Sep 17 00:00:00 2001
From: angelaschmid <angela.schmid@wolke7.net>
Date: Mon, 2 Jun 2014 22:40:16 +0200
Subject: [PATCH] List recorded episodes

Pressing the LISTRECORDEDEPISODES (TV Frontend) key for a selected
recording in the view recordings list, lists the episodes based
on the recordings title. Pressing LISTRECORDEDEPISODES again will
show all the recordings of the recording group.

The NEXTVIEW and PREVVIEW (Global) keys scroll through the display
groups, focus remains in the recordings list or in the group list (then
behaving the same as UP/DOWN).
---
 mythtv/libs/libmythtv/tv_actions.h           |  2 +
 mythtv/libs/libmythtv/tv_play.cpp            |  2 +
 mythtv/programs/mythfrontend/playbackbox.cpp | 58 ++++++++++++++++++++++++++++
 mythtv/programs/mythfrontend/playbackbox.h   |  3 ++
 4 files changed, 65 insertions(+)

diff --git a/mythtv/libs/libmythtv/tv_actions.h b/mythtv/libs/libmythtv/tv_actions.h
index 061c174..995d221 100644
--- a/mythtv/libs/libmythtv/tv_actions.h
+++ b/mythtv/libs/libmythtv/tv_actions.h
@@ -22,6 +22,8 @@
 #define ACTION_TOGGLERECCONTROLS  "TOGGLERECCONTROLS"
 #define ACTION_TOGGLEINPUTS       "TOGGLEINPUTS"
 
+#define ACTION_LISTRECORDEDEPISODES "LISTRECORDEDEPISODES"
+
 #define ACTION_GUIDE             "GUIDE"
 #define ACTION_FINDER            "FINDER"
 #define ACTION_TOGGLESLEEP       QString("TOGGLESLEEP")
diff --git a/mythtv/libs/libmythtv/tv_play.cpp b/mythtv/libs/libmythtv/tv_play.cpp
index 41e5241..3d33363
--- a/mythtv/libs/libmythtv/tv_play.cpp
+++ b/mythtv/libs/libmythtv/tv_play.cpp
@@ -577,6 +577,8 @@ void TV::InitKeys(void)
             "Change Recording Group"), "");
     REG_KEY("TV Frontend", "CHANGEGROUPVIEW", QT_TRANSLATE_NOOP("MythControls",
             "Change Group View"), "");
+    REG_KEY("TV Frontend", ACTION_LISTRECORDEDEPISODES, QT_TRANSLATE_NOOP("MythControls",
+            "List recorded episodes"), "");
 
     REG_KEY("TV Playback", "BACK", QT_TRANSLATE_NOOP("MythControls",
             "Exit or return to DVD menu"), "Esc");
diff --git a/mythtv/programs/mythfrontend/playbackbox.cpp b/mythtv/programs/mythfrontend/playbackbox.cpp
index 95b083e..9d24255
--- a/mythtv/programs/mythfrontend/playbackbox.cpp
+++ b/mythtv/programs/mythfrontend/playbackbox.cpp
@@ -3157,6 +3157,11 @@ void PlaybackBox::ShowActionPopup(const ProgramInfo &pginfo)
 
         m_popupMenu->AddItem(tr("Recording Options"), NULL, createRecordingMenu());
 
+        if (m_groupList->GetItemPos(m_groupList->GetItemCurrent()) == 0)
+            m_popupMenu->AddItem(tr("List Recorded Episodes"), SLOT(ShowRecordedEpisodes()));
+        else
+            m_popupMenu->AddItem(tr("List All Recordings"), SLOT(ShowAllRecordings()));
+
         m_popupMenu->AddItem(tr("Delete"), SLOT(askDelete()));
 
         DisplayPopupMenu();
@@ -3210,6 +3215,11 @@ void PlaybackBox::ShowActionPopup(const ProgramInfo &pginfo)
     m_popupMenu->AddItem(tr("Recording Options"), NULL, createRecordingMenu());
     m_popupMenu->AddItem(tr("Job Options"), NULL, createJobMenu());
 
+    if (m_groupList->GetItemPos(m_groupList->GetItemCurrent()) == 0)
+        m_popupMenu->AddItem(tr("List Recorded Episodes"), SLOT(ShowRecordedEpisodes()));
+    else
+        m_popupMenu->AddItem(tr("List All Recordings"), SLOT(ShowAllRecordings()));
+
     if (!sameProgram)
     {
         if (pginfo.GetRecordingGroup() == "Deleted")
@@ -3510,6 +3520,33 @@ void PlaybackBox::Delete(DeleteFlags flags)
     }
 }
 
+void PlaybackBox::ShowRecordedEpisodes(void)
+{
+    ProgramInfo *pginfo = CurrentItem();
+    if (pginfo) {
+        QString title = pginfo->GetTitle().toLower();
+        MythUIButtonListItem* group = m_groupList->GetItemByData(qVariantFromValue(title));
+        if (group)
+        {
+            m_groupList->SetItemCurrent(group);
+            // set focus back to previous item
+            MythUIButtonListItem *previousitem = m_recordingList->GetItemByData(qVariantFromValue(pginfo));
+            m_recordingList->SetItemCurrent(previousitem);
+        }
+    }
+}
+
+void PlaybackBox::ShowAllRecordings(void)
+{
+    ProgramInfo *pginfo = CurrentItem();
+    m_groupList->SetItemCurrent(0);
+    if (pginfo) {
+        // set focus back to previous item
+        MythUIButtonListItem *previousitem = m_recordingList->GetItemByData(qVariantFromValue(pginfo));
+        m_recordingList->SetItemCurrent(previousitem);
+    }
+}
+
 ProgramInfo *PlaybackBox::FindProgramInUILists(const ProgramInfo &pginfo)
 {
     return FindProgramInUILists(
@@ -3878,6 +3915,27 @@ bool PlaybackBox::keyPressEvent(QKeyEvent *event)
             if (!nextGroup.isEmpty())
                 displayRecGroup(nextGroup);
         }
+        else if (action == "NEXTVIEW")
+        {
+            int curpos = m_groupList->GetItemPos(m_groupList->GetItemCurrent());
+            if(++curpos >= m_groupList->GetCount())
+                curpos = 0;
+            m_groupList->SetItemCurrent(curpos);
+        }
+        else if (action == "PREVVIEW")
+        {
+            int curpos = m_groupList->GetItemPos(m_groupList->GetItemCurrent());
+            if(--curpos < 0)
+                curpos = m_groupList->GetCount() - 1;
+            m_groupList->SetItemCurrent(curpos);
+        }
+        else if (action == ACTION_LISTRECORDEDEPISODES)
+        {
+            if (m_groupList->GetItemPos(m_groupList->GetItemCurrent()) == 0)
+                ShowRecordedEpisodes();
+            else
+                ShowAllRecordings();
+        }
         else if (action == "CHANGERECGROUP")
             showGroupFilter();
         else if (action == "CHANGEGROUPVIEW")
diff --git a/mythtv/programs/mythfrontend/playbackbox.h b/mythtv/programs/mythfrontend/playbackbox.h
index 0da39a4..aa3dab6
--- a/mythtv/programs/mythfrontend/playbackbox.h
+++ b/mythtv/programs/mythfrontend/playbackbox.h
@@ -190,6 +190,9 @@ class PlaybackBox : public ScheduleCommon
     void DeleteIgnoreAllRemaining(void)
         { Delete((DeleteFlags)((int)kIgnore|(int)kAllRemaining)); }
 
+    void ShowRecordedEpisodes(void);
+    void ShowAllRecordings(void);
+
     void toggleWatched();
     void toggleAutoExpire();
     void togglePreserveEpisode();
-- 
1.9.1

