diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/programs/mythutil/commandlineparser.cpp mythtv-0.27-20140504-ge2acf0d-new/mythtv/programs/mythutil/commandlineparser.cpp
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/programs/mythutil/commandlineparser.cpp	2014-05-05 11:49:28.335203195 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/programs/mythutil/commandlineparser.cpp	2014-05-05 11:49:43.215116353 +0200
@@ -83,6 +83,11 @@
                 ->SetGroup("Recording Markup")
                 ->SetParentOf(ChanidStartimeVideo)
 
+        // recordingutils.cpp
+        << add("--checkrecordings", "checkrecordings", false,
+                "Check all recordings exist and have a seektable etc.", "")
+                ->SetGroup("Recording Utils")
+
         // backendutils.cpp
         << add("--resched", "resched", false,
                 "Trigger a run of the recording scheduler on the existing "
@@ -188,11 +193,15 @@
     add("--fullscreen", "fullscreen", false, "(optional) display notification in full screen mode", "")
         ->SetChildOf("notification");
     add("--error", "error", false, "(optional) set notification to be displayed as an error", "")
-    ->SetChildOf("notification");
+        ->SetChildOf("notification");
     add("--visibility", "visibility", 0, "(optional) bitmask indicating where to show the notification", "")
-    ->SetChildOf("notification");
+        ->SetChildOf("notification");
     add("--type", "type", "type", "(optional) type of notification (normal, error, warning, check, busy", "")
-    ->SetChildOf("notification");
+        ->SetChildOf("notification");
+
+    // recordingutils.cpp
+    add("--fixseektable", "fixseektable", false, "(optional) fix the seektable if missing for a recording", "")
+        ->SetChildOf("checkrecordings");
 
     // Generic Options used by more than one utility
     addRecording();
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/programs/mythutil/main.cpp mythtv-0.27-20140504-ge2acf0d-new/mythtv/programs/mythutil/main.cpp
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/programs/mythutil/main.cpp	2014-05-05 11:49:28.335203195 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/programs/mythutil/main.cpp	2014-05-05 11:49:43.215116353 +0200
@@ -21,6 +21,7 @@
 #include "jobutils.h"
 #include "markuputils.h"
 #include "messageutils.h"
+#include "recordingutils.h"
 #include "signalhandling.h"
 
 
@@ -105,6 +106,7 @@
     registerJobUtils(utilMap);
     registerMarkupUtils(utilMap);
     registerMessageUtils(utilMap);
+    registerRecordingUtils(utilMap);
 
     bool cmdFound = false;
     int cmdResult = GENERIC_EXIT_OK;
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/programs/mythutil/mythutil.pro mythtv-0.27-20140504-ge2acf0d-new/mythtv/programs/mythutil/mythutil.pro
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/programs/mythutil/mythutil.pro	2014-05-05 11:49:28.335203195 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/programs/mythutil/mythutil.pro	2014-05-05 11:49:43.215116353 +0200
@@ -21,9 +21,9 @@
 # Input
 HEADERS += mythutil.h commandlineparser.h
 HEADERS += backendutils.h fileutils.h jobutils.h markuputils.h
-HEADERS += messageutils.h mpegutils.h
+HEADERS += messageutils.h mpegutils.h recordingutils.h
 SOURCES += main.cpp mythutil.cpp commandlineparser.cpp
 SOURCES += backendutils.cpp fileutils.cpp jobutils.cpp markuputils.cpp
-SOURCES += messageutils.cpp mpegutils.cpp
+SOURCES += messageutils.cpp mpegutils.cpp recordingutils.cpp
 
 mingw: LIBS += -lwinmm -lws2_32
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/programs/mythutil/recordingutils.cpp mythtv-0.27-20140504-ge2acf0d-new/mythtv/programs/mythutil/recordingutils.cpp
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/programs/mythutil/recordingutils.cpp	1970-01-01 01:00:00.000000000 +0100
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/programs/mythutil/recordingutils.cpp	2014-05-05 11:49:43.215116353 +0200
@@ -0,0 +1,157 @@
+// C++ includes
+#include <iostream>
+#include <sys/stat.h>
+
+// Qt
+#include <QFileInfo>
+#include <QScopedPointer>
+
+// libmyth* includes
+#include "exitcodes.h"
+#include "mythlogging.h"
+#include "remoteutil.h"
+#include "remotefile.h"
+#include "mythsystem.h"
+
+// Local includes
+#include "recordingutils.h"
+
+static QString CreateProgramInfoString(const ProgramInfo &pginfo)
+{
+    QDateTime recstartts = pginfo.GetRecordingStartTime();
+    QDateTime recendts   = pginfo.GetRecordingEndTime();
+
+    QString timedate = QString("%1 - %2")
+        .arg(MythDate::toString(
+                 recstartts, MythDate::kDateTimeFull | MythDate::kSimplify))
+        .arg(MythDate::toString(recendts, MythDate::kTime));
+
+    QString title = pginfo.GetTitle();
+
+    QString extra;
+
+    if (!pginfo.GetSubtitle().isEmpty())
+    {
+        extra = QString(" ~ ") + pginfo.GetSubtitle();
+        int maxll = max(title.length(), 20);
+        if (extra.length() > maxll)
+            extra = extra.left(maxll - 3) + "...";
+    }
+
+    return QString("%1%2 - %3").arg(title).arg(extra).arg(timedate);
+}
+
+static int CheckRecordings(const MythUtilCommandLineParser &cmdline)
+{
+    cout << "Checking Recordings" << endl;
+
+    ProgramInfo *p;
+    std::vector<ProgramInfo *>  *recordingList = RemoteGetRecordedList(-1);
+    int recordingCount = 0;
+    int missingFileCount = 0;
+    int zeroByteCount = 0;
+    int missingSeetableCount = 0;
+    bool foundFile = false;
+    bool fixSeektable = cmdline.toBool("fixseektable");
+
+    if (recordingList && !recordingList->empty())
+    {
+        vector<ProgramInfo *>::iterator i = recordingList->begin();
+        for ( ; i != recordingList->end(); ++i)
+        {
+            p = *i;
+            // ignore live tv and deleted recordings
+            if (p->GetRecordingGroup() == "LiveTV" ||
+                p->GetRecordingGroup() == "Deleted")
+            {
+                i = recordingList->erase(i);
+                --i;
+                continue;
+            }
+
+            cout << "Checking: " << qPrintable(CreateProgramInfoString(*p)) << endl;
+            recordingCount++;
+            foundFile = true;
+
+            QString url = p->GetPlaybackURL();
+
+            if (url.startsWith('/'))
+            {
+                QFileInfo fi(url);
+                if (!fi.exists())
+                {
+                    cout << "File not found" << endl;
+                    missingFileCount++;
+                    foundFile = false;
+                }
+                else
+                {
+                    if (fi.size() == 0)
+                    {
+                        cout << "File was found but has zero length" << endl;
+                        zeroByteCount++;
+                    }
+                }
+            }
+            else if (url.startsWith("myth:"))
+            {
+                if (!RemoteFile::Exists(url))
+                {
+                    cout << "File not found" << endl;
+                    missingFileCount++;
+                    foundFile = false;
+                }
+                else
+                {
+                    RemoteFile rf(url);
+                    if (rf.GetFileSize() == 0)
+                    {
+                        cout << "File was found but has zero length" << endl;
+                        zeroByteCount++;
+                    }
+                }
+            }
+
+            frm_pos_map_t posMap;
+            p->QueryPositionMap(posMap, MARK_GOP_BYFRAME);
+            if (posMap.isEmpty())
+                p->QueryPositionMap(posMap, MARK_GOP_START);
+                if (posMap.isEmpty())
+                    p->QueryPositionMap(posMap, MARK_KEYFRAME);
+
+            if (posMap.isEmpty())
+            {
+                cout << "No seektable found" << endl;
+
+                missingSeetableCount++;
+
+                if (foundFile && fixSeektable)
+                {
+                    QString command = QString("mythcommflag --rebuild --chanid %1 --starttime %2")
+                                              .arg(p->GetChanID())
+                                              .arg(p->GetRecordingStartTime(MythDate::ISODate));
+                    cout << "Running - " << qPrintable(command) << endl;
+                    QScopedPointer<MythSystem> cmd(MythSystem::Create(command));
+                    cmd->Wait(0);
+                }
+            }
+
+            cout << "-------------------------------------------------------------------" << endl;
+        }
+    }
+
+    cout << endl << endl << "SUMMARY" << endl;
+    cout << "Recordings           : " << recordingCount << endl;
+    cout << "Missing Recordings   : " << missingFileCount << endl;
+    cout << "Zero byte Recordings : " << zeroByteCount << endl;
+    cout << "Missing Seektables   : " << missingSeetableCount << endl;
+
+    return GENERIC_EXIT_OK;
+}
+
+void registerRecordingUtils(UtilMap &utilMap)
+{
+    utilMap["checkrecordings"]         = &CheckRecordings;
+}
+
+/* vim: set expandtab tabstop=4 shiftwidth=4: */
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/programs/mythutil/recordingutils.h mythtv-0.27-20140504-ge2acf0d-new/mythtv/programs/mythutil/recordingutils.h
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/programs/mythutil/recordingutils.h	1970-01-01 01:00:00.000000000 +0100
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/programs/mythutil/recordingutils.h	2014-05-05 11:49:43.218449667 +0200
@@ -0,0 +1,4 @@
+#include "mythutil.h"
+
+void registerRecordingUtils(UtilMap &utilMap);
+
