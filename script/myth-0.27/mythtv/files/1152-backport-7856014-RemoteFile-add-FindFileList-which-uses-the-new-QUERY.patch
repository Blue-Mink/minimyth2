diff -Naur mythtv-0.27-build-old/mythtv/libs/libmythbase/remotefile.cpp mythtv-0.27-build-new/mythtv/libs/libmythbase/remotefile.cpp
--- mythtv-0.27-build-old/mythtv/libs/libmythbase/remotefile.cpp	2014-07-22 21:29:47.000000000 +0200
+++ mythtv-0.27-build-new/mythtv/libs/libmythbase/remotefile.cpp	2014-07-22 21:31:44.334395713 +0200
@@ -1114,20 +1114,47 @@
     return result;
 }
 
-/** \fn RemoteFile::FindFile(const QString& filename, const QString& host, const QString& storageGroup)
+/** \fn RemoteFile::FindFile(const QString& filename, const QString& host, const QString& storageGroup, bool useRegex, bool allowFallback)
  *  \brief Search all BE's for a file in the give storage group
  *  \param filename the partial path and filename to look for
  *  \param host search this host first if given or default to the master BE if empty
  *  \param storageGroup the name of the storage group to search
- *  \return a myth URL pointing to the file or empty string if not found
+ *  \param useRegex if true filename is assumed to be a regex expression of files to find
+ *  \param allowFallback if false only 'host' will be searched otherwise all host will be searched until a match is found
+ *  \return a QString containing the myth URL pointing to the first file found or empty list if not found
  */
-QString RemoteFile::FindFile(const QString& filename, const QString& host, const QString& storageGroup)
+QString RemoteFile::FindFile(const QString& filename, const QString& host,
+                             const QString& storageGroup, bool useRegex,
+                             bool allowFallback)
 {
-    LOG(VB_FILE, LOG_INFO, QString("RemoteFile::FindFile(): looking for '%1' on '%2' in group '%3'")
-                                   .arg(filename).arg(host).arg(storageGroup));
+    QStringList files = RemoteFile::FindFileList(filename, host, storageGroup, useRegex, allowFallback);
+
+    if (!files.isEmpty())
+        return files[0];
+
+    return QString();
+}
+
+/** \fn RemoteFile::FindFileList(const QString& filename, const QString& host, const QString& storageGroup, bool useRegex, bool allowFallback)
+ *  \brief Search all BE's for files in the give storage group
+ *  \param filename the partial path and filename to look for or regex
+ *  \param host search this host first if given or default to the master BE if empty
+ *  \param storageGroup the name of the storage group to search
+ *  \param useRegex if true filename is assumed to be a regex expression of files to find
+ *  \param allowFallback if false only 'host' will be searched otherwise all host will be searched until a match is found
+ *  \return a QStringList list containing the myth URL's pointing to the file or empty list if not found
+ */
+QStringList RemoteFile::FindFileList(const QString& filename, const QString& host,
+                             const QString& storageGroup, bool useRegex,
+                             bool allowFallback)
+{
+    LOG(VB_FILE, LOG_INFO, QString("RemoteFile::FindFile(): looking for '%1' on '%2' in group '%3' "
+                                   "(useregex: %4, allowfallback: %5)")
+                                   .arg(filename).arg(host).arg(storageGroup)
+                                   .arg(useRegex).arg(allowFallback));
 
     if (filename.isEmpty() || storageGroup.isEmpty())
-        return QString();
+        return QStringList();
 
     QStringList strList;
     QString hostName = host;
@@ -1135,67 +1162,62 @@
     if (hostName.isEmpty())
         hostName = gCoreContext->GetMasterHostName();
 
+    // if we are looking for the file on this host just search the local storage group first
     if (gCoreContext->IsThisBackend(hostName))
     {
-        StorageGroup sGroup(storageGroup, hostName);
-        if (!sGroup.FindFile(filename).isEmpty())
-            return gCoreContext->GenMythURL(hostName, 0, filename, storageGroup);
-    }
-    else
-    {
-        // first check the given host
-        strList << "QUERY_SG_FILEQUERY" << hostName << storageGroup << filename << 0;
-        if (gCoreContext->SendReceiveStringList(strList))
-        {
-            if (strList.size() > 0 && strList[0] != "EMPTY LIST" && !strList[0].startsWith("SLAVE UNREACHABLE"))
-                return gCoreContext->GenMythURL(hostName, 0, filename, storageGroup);
-        }
-    }
+        StorageGroup sgroup(storageGroup, hostName);
 
-    // not found so search all hosts that has a directory defined for the give storage group
+        if (useRegex)
+        {
+            QFileInfo fi(filename);
+            QStringList files = sgroup.GetFileList('/' + fi.path());
 
-    // get a list of hosts
-    MSqlQuery query(MSqlQuery::InitCon());
+            LOG(VB_FILE, LOG_INFO, QString("RemoteFile::FindFileList: Looking in dir '%1' for '%2'")
+                                           .arg(fi.path()).arg(fi.fileName()));
 
-    QString sql = "SELECT DISTINCT hostname "
-                  "FROM storagegroup "
-                  "WHERE groupname = :GROUP "
-                  "AND hostname != :HOSTNAME";
-    query.prepare(sql);
-    query.bindValue(":GROUP", storageGroup);
-    query.bindValue(":HOSTNAME", hostName);
+            for (int x = 0; x < files.size(); x++)
+            {
+                LOG(VB_FILE, LOG_INFO, QString("RemoteFile::FindFileList: Found '%1 - %2'")
+                                               .arg(x).arg(files[x]));
+            }
+
+            QStringList filteredFiles = files.filter(QRegExp(fi.fileName()));
+            for (int x = 0; x < filteredFiles.size(); x++)
+            {
+                strList << gCoreContext->GenMythURL(gCoreContext->GetBackendServerIP(),
+                                                     gCoreContext->GetBackendServerPort(),
+                                                     fi.path() + '/' + filteredFiles[x],
+                                                     storageGroup);
+            }
+        }
+        else
+        {
+            if (!sgroup.FindFile(filename).isEmpty())
+                strList << gCoreContext->GenMythURL(gCoreContext->GetBackendServerIP(hostName),
+                                                gCoreContext->GetBackendServerPort(hostName),
+                                                filename, storageGroup);
+        }
 
-    if (!query.exec() || !query.isActive())
-    {
-        MythDB::DBError("RemoteFile::FindFile() get host list", query);
-        return QString();
+        if (!strList.isEmpty() || !allowFallback)
+            return strList;
     }
 
-    while(query.next())
+    // if we didn't find any files ask the master BE to find it
+    if (strList.isEmpty())
     {
-        hostName = query.value(0).toString();
-
-        if (gCoreContext->IsMasterBackend() &&
-            hostName == gCoreContext->GetMasterHostName())
-        {
-            StorageGroup sGroup(storageGroup, hostName);
-            if (!sGroup.FindFile(filename).isEmpty())
-                return gCoreContext->GenMythURL(hostName, 0, filename, storageGroup);
-            else
-                continue;
-        }
-
-        strList.clear();
-        strList << "QUERY_SG_FILEQUERY" << hostName << storageGroup << filename << 0;
+        strList << "QUERY_FINDFILE" << hostName << storageGroup << filename
+                << (useRegex ? "1" : "0")
+                << "1";
 
         if (gCoreContext->SendReceiveStringList(strList))
         {
-            if (strList.size() > 0 && strList[0] != "EMPTY LIST" && !strList[0].startsWith("SLAVE UNREACHABLE"))
-                return gCoreContext->GenMythURL(hostName, 0, filename, storageGroup);
+            if (strList.size() > 0 && !strList[0].isEmpty() &&
+                strList[0] != "NOT FOUND" && !strList[0].startsWith("ERROR: "))
+                return strList;
         }
     }
 
-    return QString();
+    return QStringList();
 }
 
 /** \fn RemoteFile::SetBlocking(void)
diff -Naur mythtv-0.27-build-old/mythtv/libs/libmythbase/remotefile.h mythtv-0.27-build-new/mythtv/libs/libmythbase/remotefile.h
--- mythtv-0.27-build-old/mythtv/libs/libmythbase/remotefile.h	2014-07-22 21:29:47.000000000 +0200
+++ mythtv-0.27-build-new/mythtv/libs/libmythbase/remotefile.h	2014-07-22 21:34:21.747326100 +0200
@@ -33,7 +33,13 @@
     static bool Exists(const QString &url);
     static QString GetFileHash(const QString &url);
     static QDateTime LastModified(const QString &url);
-    static QString FindFile(const QString &filename, const QString &host, const QString &storageGroup);
+    static QString FindFile(const QString &filename, const QString &host,
+                            const QString &storageGroup, bool useRegex = false,
+                            bool allowFallback = false);
+
+    static QStringList FindFileList(const QString &filename, const QString &host,
+                                    const QString &storageGroup, bool useRegex = false,
+                                    bool allowFallback = false);
     static bool CopyFile(const QString &src, const QString &dest);
 
     int Write(const void *data, int size);
