diff -Naur mythtv-0.27-20140708-gf4825ca-old/mythtv/libs/libmythmetadata/libmythmetadata.pro mythtv-0.27-20140708-gf4825ca-new/mythtv/libs/libmythmetadata/libmythmetadata.pro
--- mythtv-0.27-20140708-gf4825ca-old/mythtv/libs/libmythmetadata/libmythmetadata.pro	2014-07-08 13:47:37.000000000 +0200
+++ mythtv-0.27-20140708-gf4825ca-new/mythtv/libs/libmythmetadata/libmythmetadata.pro	2014-07-12 13:10:46.709797213 +0200
@@ -17,6 +17,7 @@
 
 # Input
 
+HEADERS += metadatagrabber.h
 HEADERS += cleanup.h  dbaccess.h  dirscan.h  globals.h  parentalcontrols.h
 HEADERS += videoscan.h  videoutils.h  videometadata.h  videometadatalistmanager.h
 HEADERS += quicksp.h metadatacommon.h metadatadownload.h metadataimagedownload.h
@@ -26,6 +27,7 @@
 HEADERS += metaioflacvorbis.h metaioavfcomment.h metaiomp4.h
 HEADERS += metaiowavpack.h metaioid3.h metaiooggvorbis.h
 
+SOURCES += metadatagrabber.cpp
 SOURCES += cleanup.cpp  dbaccess.cpp  dirscan.cpp  globals.cpp
 SOURCES += parentalcontrols.cpp  videoscan.cpp  videoutils.cpp
 SOURCES += videometadata.cpp  videometadatalistmanager.cpp
@@ -81,7 +83,7 @@
 inc.files += videoscan.h  videoutils.h  videometadata.h  videometadatalistmanager.h
 inc.files += quicksp.h metadatacommon.h metadatadownload.h metadataimagedownload.h
 inc.files += bluraymetadata.h mythmetaexp.h metadatafactory.h mythuimetadataresults.h
-inc.files += mythuiimageresults.h metadataimagehelper.h
+inc.files += mythuiimageresults.h metadataimagehelper.h metadatagrabber.h
 inc.files += musicmetadata.h musicutils.h
 inc.files += metaio.h metaiotaglib.h
 inc.files += metaioflacvorbis.h metaioavfcomment.h metaiomp4.h
diff -Naur mythtv-0.27-20140708-gf4825ca-old/mythtv/libs/libmythmetadata/metadatacommon.cpp mythtv-0.27-20140708-gf4825ca-new/mythtv/libs/libmythmetadata/metadatacommon.cpp
--- mythtv-0.27-20140708-gf4825ca-old/mythtv/libs/libmythmetadata/metadatacommon.cpp	2014-07-08 13:47:37.000000000 +0200
+++ mythtv-0.27-20140708-gf4825ca-new/mythtv/libs/libmythmetadata/metadatacommon.cpp	2014-07-12 13:10:09.966563806 +0200
@@ -1496,68 +1496,4 @@
     return result;
 }
 
-MetaGrabberScript::MetaGrabberScript(
-    const QString &name,
-    const QString &author,
-    const QString &thumbnail,
-    const QString &command,
-    const GrabberType type,
-    const QString &typestring,
-    const QString &description,
-    const float version
-    ) :
-    m_name(name),
-    m_author(author),
-    m_thumbnail(thumbnail),
-    m_command(command),
-    m_type(type),
-    m_typestring(typestring),
-    m_description(description),
-    m_version(version)
-{
-}
-
-MetaGrabberScript::~MetaGrabberScript()
-{
-}
-
-MetaGrabberScript* ParseGrabberVersion(const QDomElement& item)
-{
-    QString name, author, thumbnail, command, description, typestring;
-    float version = 0;
-    GrabberType type = kGrabberMovie;
-
-    name = item.firstChildElement("name").text();
-    author = item.firstChildElement("author").text();
-    thumbnail = item.firstChildElement("thumbnail").text();
-    command = item.firstChildElement("command").text();
-    description = item.firstChildElement("description").text();
-    version = item.firstChildElement("version").text().toFloat();
-    typestring = item.firstChildElement("type").text();
 
-    if (!typestring.isEmpty())
-    {
-        if (typestring.toLower() == "movie")
-            type = kGrabberMovie;
-        else if (typestring.toLower() == "television")
-            type = kGrabberTelevision;
-        else if (typestring.toLower() == "game")
-            type = kGrabberGame;
-        else if (typestring.toLower() == "music")
-            type = kGrabberMusic;
-    }
-
-    return new MetaGrabberScript(name, author, thumbnail, command,
-                             type, typestring, description, version);
-}
-
-void MetaGrabberScript::toMap(InfoMap &metadataMap)
-{
-    metadataMap["name"] = m_name;
-    metadataMap["author"] = m_author;
-    metadataMap["thumbnailfilename"] = m_thumbnail;
-    metadataMap["command"] = m_command;
-    metadataMap["description"] = m_description;
-    metadataMap["version"] = QString::number(m_version);
-    metadataMap["type"] = m_typestring;
-}
diff -Naur mythtv-0.27-20140708-gf4825ca-old/mythtv/libs/libmythmetadata/metadatacommon.h mythtv-0.27-20140708-gf4825ca-new/mythtv/libs/libmythmetadata/metadatacommon.h
--- mythtv-0.27-20140708-gf4825ca-old/mythtv/libs/libmythmetadata/metadatacommon.h	2014-07-08 13:47:37.000000000 +0200
+++ mythtv-0.27-20140708-gf4825ca-new/mythtv/libs/libmythmetadata/metadatacommon.h	2014-07-12 13:10:09.966563806 +0200
@@ -15,6 +15,7 @@
 #include "mythmetaexp.h"
 #include "metadataimagehelper.h"
 #include "referencecounterlist.h"
+#include "metadatagrabber.h"
 
 class ProgramInfo;
 
@@ -482,54 +483,6 @@
 
 META_PUBLIC QDateTime RFC822TimeToQDateTime(const QString &t);
 
-enum GrabberType {
-    kGrabberMovie = 0,
-    kGrabberTelevision = 1,
-    kGrabberMusic = 2,
-    kGrabberGame = 3
-};
-
-class META_PUBLIC MetaGrabberScript : public QObject
-{
-  public:
-    MetaGrabberScript();
-    ~MetaGrabberScript();
-
-    MetaGrabberScript(
-        const QString &name,
-        const QString &author,
-        const QString &thumbnail,
-        const QString &command,
-        const GrabberType type,
-        const QString &typestring,
-        const QString &description,
-        const float version);
-
-    QString GetName(void) const { return m_name; };
-    QString GetAuthor(void) const { return m_author; };
-    QString GetThumbnail(void) const { return m_thumbnail; };
-    QString GetCommand(void) const { return m_command; };
-    GrabberType GetType(void) const { return m_type; };
-    QString GetTypeString(void) const { return m_typestring; };
-    QString GetDescription(void) const { return m_description; };
-    float GetVersion(void) const { return m_version; };
-
-    void toMap(InfoMap &metadataMap);
-
-  private:
-    QString m_name;
-    QString m_author;
-    QString m_thumbnail;
-    QString m_command;
-    GrabberType m_type;
-    QString m_typestring;
-    QString m_description;
-    float m_version;
-};
-
-META_PUBLIC MetaGrabberScript *ParseGrabberVersion(const QDomElement &item);
-
-Q_DECLARE_METATYPE(MetaGrabberScript*)
 Q_DECLARE_METATYPE(MetadataLookup*)
 Q_DECLARE_METATYPE(RefCountHandler<MetadataLookup>)
 
diff -Naur mythtv-0.27-20140708-gf4825ca-old/mythtv/libs/libmythmetadata/metadatadownload.cpp mythtv-0.27-20140708-gf4825ca-new/mythtv/libs/libmythmetadata/metadatadownload.cpp
--- mythtv-0.27-20140708-gf4825ca-old/mythtv/libs/libmythmetadata/metadatadownload.cpp	2014-07-08 13:47:37.000000000 +0200
+++ mythtv-0.27-20140708-gf4825ca-new/mythtv/libs/libmythmetadata/metadatadownload.cpp	2014-07-12 13:10:09.966563806 +0200
@@ -304,48 +304,22 @@
 
 QString MetadataDownload::GetMovieGrabber()
 {
-    QString def_cmd = "metadata/Movie/tmdb3.py";
-    QString db_cmd = gCoreContext->GetSetting("MovieGrabber", def_cmd);
-
-    return QDir::cleanPath(QString("%1/%2")
-            .arg(GetShareDir())
-            .arg(db_cmd));
+    return MetaGrabberScript::GetType(kGrabberMovie).GetPath();
 }
 
 QString MetadataDownload::GetTelevisionGrabber()
 {
-    QString def_cmd = "metadata/Television/ttvdb.py";
-    QString db_cmd = gCoreContext->GetSetting("TelevisionGrabber", def_cmd);
-
-    return QDir::cleanPath(QString("%1/%2")
-            .arg(GetShareDir())
-            .arg(db_cmd));
+    return MetaGrabberScript::GetType(kGrabberTelevision).GetPath();
 }
 
 QString MetadataDownload::GetGameGrabber()
 {
-    QString def_cmd = "metadata/Game/giantbomb.py";
-    QString db_cmd = gCoreContext->GetSetting("mythgame.MetadataGrabber", def_cmd);
-
-    return QDir::cleanPath(QString("%1/%2")
-            .arg(GetShareDir())
-            .arg(db_cmd));
+    return MetaGrabberScript::GetType(kGrabberGame).GetPath();
 }
 
 bool MetadataDownload::runGrabberTest(const QString &grabberpath)
 {
-    QStringList args;
-    args.append("-t");
-
-    MythSystemLegacy grabber(grabberpath, args, kMSStdOut);
-
-    grabber.Run();
-    uint exitcode = grabber.Wait();
-
-    if (exitcode != 0)
-        return false;
-
-    return true;
+    return MetaGrabberScript(grabberpath).Test();
 }
 
 bool MetadataDownload::MovieGrabberWorks()
@@ -476,14 +450,6 @@
 {
     MetadataLookupList list;
 
-    QString cmd = GetGameGrabber();
-
-    QStringList args;
-    args.append(QString("-l")); // Language Flag
-    args.append(gCoreContext->GetLanguage()); // UI Language
-    args.append(QString("-a"));
-    args.append(gCoreContext->GetLocale()->GetCountryCode());
-
     // If the inetref is populated, even in kLookupSearch mode,
     // become a kLookupData grab and use that.
     if (lookup->GetStep() == kLookupSearch &&
@@ -491,18 +457,22 @@
          lookup->GetInetref() != "00000000"))
         lookup->SetStep(kLookupData);
 
-    if (lookup->GetStep() == kLookupSearch)
-    {
-        args.append(QString("-M"));
-        QString title = lookup->GetTitle();
-        args.append(title);
-    }
-    else if (lookup->GetStep() == kLookupData)
-    {
-        args.append(QString("-D"));
-        args.append(lookup->GetInetref());
-    }
-    list = runGrabber(cmd, args, lookup);
+    MetaGrabberScript grabber;
+
+    if (lookup->GetStep() == kLookupData)
+        // inetref is defined, see if we have a pre-defined grabber
+        grabber = MetaGrabberScript::FromInetref(lookup->GetInetref());
+
+    if (!grabber.IsValid())
+        // matching grabber was not found, just use the default
+        grabber = MetaGrabberScript::GetType(kGrabberGame);
+
+    if (lookup->GetStep() == kLookupData)
+        // we're just grabbing data
+        list = grabber.LookupData(lookup->GetInetref(), lookup);
+    else if (lookup->GetStep() == kLookupSearch)
+        // we're searching
+        list = grabber.Search(lookup->GetTitle(), lookup);
 
     return list;
 }
@@ -527,15 +497,6 @@
 
     if (list.isEmpty())
     {
-        QString cmd = GetMovieGrabber();
-
-        QStringList args;
-        args.append(QString("-l")); // Language Flag
-        args.append(gCoreContext->GetLanguage()); // UI Language
-
-        args.append(QString("-a"));
-        args.append(gCoreContext->GetLocale()->GetCountryCode());
-
         // If the inetref is populated, even in kLookupSearch mode,
         // become a kLookupData grab and use that.
         if (lookup->GetStep() == kLookupSearch &&
@@ -543,18 +504,21 @@
              lookup->GetInetref() != "00000000"))
             lookup->SetStep(kLookupData);
 
-        if (lookup->GetStep() == kLookupSearch)
-        {
-            args.append(QString("-M"));
-            QString title = lookup->GetTitle();
-            args.append(title);
-        }
-        else if (lookup->GetStep() == kLookupData)
-        {
-            args.append(QString("-D"));
-            args.append(lookup->GetInetref());
-        }
-        list = runGrabber(cmd, args, lookup);
+        MetaGrabberScript grabber;
+
+        if (lookup->GetStep() == kLookupData)
+            // inetref is defined, see if we have a pre-defined grabber
+            grabber = MetaGrabberScript::FromInetref(lookup->GetInetref());
+
+        if (!grabber.IsValid())
+            // matching grabber was not found, just use the default
+            grabber = MetaGrabberScript::GetType(kGrabberMovie);
+
+        if (lookup->GetStep() == kLookupData)
+            // we're just grabbing data
+            list = grabber.LookupData(lookup->GetInetref(), lookup);
+        else if (lookup->GetStep() == kLookupSearch)
+            list = grabber.Search(lookup->GetTitle(), lookup);
     }
 
     return list;
@@ -564,49 +528,34 @@
 {
     MetadataLookupList list;
 
-    QString cmd = GetTelevisionGrabber();
-
-    QStringList args;
-    args.append(QString("-l")); // Language Flag
-    args.append(gCoreContext->GetLanguage()); // UI Language
-    args.append(QString("-a"));
-    args.append(gCoreContext->GetLocale()->GetCountryCode());
-
-    // If the inetref is populated, even in kLookupSearch mode,
-    // become a kLookupData grab and use that.
-    if (lookup->GetStep() == kLookupSearch &&
-        (!lookup->GetInetref().isEmpty() &&
-         lookup->GetInetref() != "00000000"))
-        lookup->SetStep(kLookupData);
+    // for some reason, we can perform a search even when an inetref is defined
+    // so we'll try to pull the pre-defined grabber first
+    MetaGrabberScript grabber;
+    if (!lookup->GetInetref().isEmpty() &&
+        lookup->GetInetref() != "00000000")
+            grabber = MetaGrabberScript::FromInetref(lookup->GetInetref());
+
+    if (!grabber.IsValid())
+        // matching grabber was not found, just use the default
+        grabber = MetaGrabberScript::GetType(kGrabberTelevision);
 
+    // there's some special logic going on with searches
     if (lookup->GetStep() == kLookupSearch)
     {
-        args.append(QString("-M"));
-        if (lookup->GetInetref().isEmpty() ||
+        // initial search mode
+        if (lookup->GetInetref().isEmpty() || 
             lookup->GetInetref() == "00000000")
-        {
-            QString title = lookup->GetTitle();
-            args.append(title);
-        }
+                // no inetref given, use the title
+                list = grabber.Search(lookup->GetTitle(), lookup);
         else
-        {
-            QString inetref = lookup->GetInetref();
-            args.append(inetref);
-        }
+            list = grabber.LookupData(lookup->GetInetref(), lookup);
     }
     else if (lookup->GetStep() == kLookupData)
-    {
-        args.append(QString("-D"));
-        args.append(lookup->GetInetref());
-        args.append(QString::number(lookup->GetSeason()));
-        args.append(QString::number(lookup->GetEpisode()));
-    }
+        // we have an inetref, pull data
+        list = grabber.LookupData(lookup->GetInetref(), lookup->GetSeason(),
+                                  lookup->GetEpisode(), lookup);
     else if (lookup->GetStep() == kLookupCollection)
-    {
-        args.append(QString("-C"));
-        args.append(lookup->GetCollectionref());
-    }
-    list = runGrabber(cmd, args, lookup);
+        list = grabber.LookupCollection(lookup->GetCollectionref(), lookup);
 
     // Collection Fallback
     // If the lookup allows generic metadata, and the specific
@@ -614,10 +563,7 @@
     if (list.isEmpty() &&
         lookup->GetAllowGeneric() &&
         lookup->GetStep() == kLookupData)
-    {
-        lookup->SetStep(kLookupCollection);
-        list = handleTelevision(lookup);
-    }
+            list = grabber.LookupCollection(lookup->GetCollectionref(), lookup);
 
     return list;
 }
@@ -626,33 +572,21 @@
 {
     MetadataLookupList list;
 
-    QString cmd = GetTelevisionGrabber();
-
-    // Can't trust the inetref with so little information.
-
-    QStringList args;
-    args.append(QString("-l")); // Language Flag
-    args.append(gCoreContext->GetLanguage()); // UI Language
-
-    args.append(QString("-a"));
-    args.append(gCoreContext->GetLocale()->GetCountryCode());
-
-    args.append(QString("-N"));
-    if (!lookup->GetInetref().isEmpty())
-    {
-        QString inetref = lookup->GetInetref();
-        args.append(inetref);
-    }
+    MetaGrabberScript grabber;
+    if (!lookup->GetInetref().isEmpty() &&
+        lookup->GetInetref() != "00000000")
+            grabber = MetaGrabberScript::FromInetref(lookup->GetInetref());
+
+    if (!grabber.IsValid())
+        // matching grabber was not found, just use the default
+        grabber = MetaGrabberScript::GetType(kGrabberTelevision);
+
+    if (lookup->GetInetref().isEmpty())
+        list = grabber.SearchSubtitle(lookup->GetTitle(),
+                                      lookup->GetSubtitle(), lookup, false);
     else
-    {
-        QString title = lookup->GetTitle();
-        args.append(title);
-    }
-    QString subtitle = lookup->GetSubtitle();
-    args.append(subtitle);
-
-    // Try to do a title/subtitle lookup
-    list = runGrabber(cmd, args, lookup, false);
+        list = grabber.SearchSubtitle(lookup->GetInetref(),
+                                      lookup->GetSubtitle(), lookup, false);
 
     if (list.count() == 1)
         list[0]->SetStep(kLookupData);
@@ -669,36 +603,25 @@
 
     MetadataLookupList list;
 
-    QString cmd = GetTelevisionGrabber();
-
-    QStringList args;
-
-    args.append(QString("-l")); // Language Flag
-    args.append(gCoreContext->GetLanguage()); // UI Language
+    // no inetref known, just pull the default grabber
+    MetaGrabberScript grabber = MetaGrabberScript::GetType(kGrabberTelevision);
 
-    args.append(QString("-a"));
-    args.append(gCoreContext->GetLocale()->GetCountryCode());
-
-
-    args.append("-M");
-    QString title = lookup->GetTitle();
-    args.append(title);
+    // cache some initial values so we can change them in the lookup later
     LookupType origtype = lookup->GetSubtype();
     int origseason = lookup->GetSeason();
     int origepisode = lookup->GetEpisode();
 
-    lookup->SetSubtype(kProbableGenericTelevision);
-
     if (origseason == 0 && origepisode == 0)
     {
         lookup->SetSeason(1);
         lookup->SetEpisode(1);
     }
 
-    list = runGrabber(cmd, args, lookup, true);
+    list = grabber.Search(lookup->GetTitle(), lookup);
 
     if (list.count() == 1)
     {
+        // search was successful, rerun as normal television mode
         lookup->SetInetref(list[0]->GetInetref());
         lookup->SetCollectionref(list[0]->GetCollectionref());
         list = handleTelevision(lookup);
diff -Naur mythtv-0.27-20140708-gf4825ca-old/mythtv/libs/libmythmetadata/metadatagrabber.cpp mythtv-0.27-20140708-gf4825ca-new/mythtv/libs/libmythmetadata/metadatagrabber.cpp
--- mythtv-0.27-20140708-gf4825ca-old/mythtv/libs/libmythmetadata/metadatagrabber.cpp	1970-01-01 01:00:00.000000000 +0100
+++ mythtv-0.27-20140708-gf4825ca-new/mythtv/libs/libmythmetadata/metadatagrabber.cpp	2014-07-12 13:10:09.966563806 +0200
@@ -0,0 +1,539 @@
+// Qt headers
+#include <QMap>
+#include <QDir>
+#include <QMutex>
+#include <QRegExp>
+#include <QDateTime>
+#include <QMutexLocker>
+
+// MythTV headers
+#include "metadatagrabber.h"
+#include "metadatacommon.h"
+#include "mythsystemlegacy.h"
+#include "exitcodes.h"
+#include "mythdate.h"
+#include "mythdirs.h"
+
+#define LOC QString("Metadata Grabber: ")
+#define kGrabberRefresh 60
+
+GrabberList     grabberList;
+QMutex          grabberLock;
+QDateTime       grabberAge = MythDate::current().addSecs(-kGrabberRefresh);
+
+typedef struct GrabberOpts {
+    QString     path;
+    QString     setting;
+    QString     def;
+} GrabberOpts;
+
+// TODO
+// it would be nice to statically compile these, but I can't manage to get it
+// to compile.  apparently initializer lists are supported in QT5/CPP11 that
+// will make this work.  for now, use a lock and initialize on first access.
+// https://bugreports.qt-project.org/browse/QTBUG-25679
+QMap<GrabberType, GrabberOpts> grabberTypes;
+QMap<QString, GrabberType> grabberTypeStrings;
+bool initialized = false;
+static QMutex typeLock;
+
+void InitializeStaticMaps(void)
+{
+    if (!initialized)
+    {
+        QMutexLocker lock(&typeLock);
+
+        // double check now that we have the lock
+        if (initialized)
+            return;
+
+        grabberTypes[kGrabberMovie] =
+                (GrabberOpts) { "%1metadata/Movie/",
+                                "MovieGrabber",
+                                "metadata/Movie/tmdb3.py"};
+        grabberTypes[kGrabberTelevision] =
+                (GrabberOpts) { "%1metadata/Television/",
+                                "TelevisionGrabber",
+                                "metadata/Television/ttvdb.py" };
+        grabberTypes[kGrabberGame]       =
+                (GrabberOpts) { "%1metadata/Game/",
+                                "mythgame.MetadataGrabber",
+                                "metadata/Game/giantbomb.py" };
+        grabberTypes[kGrabberMusic]      =
+                (GrabberOpts) { "%1metadata/Music",
+                                "",
+                                "" };
+
+        grabberTypeStrings["movie"]      = kGrabberMovie;
+        grabberTypeStrings["television"] = kGrabberTelevision;
+        grabberTypeStrings["game"]       = kGrabberGame;
+        grabberTypeStrings["music"]      = kGrabberMusic;
+
+
+        initialized = true;
+    }
+}
+
+static QRegExp retagref("^([a-zA-Z0-9_\\-\\.]+\\.[a-zA-Z0-9]{1,3}):(.*)");
+static QMutex reLock;
+
+
+GrabberList MetaGrabberScript::GetList(bool refresh)
+{
+    return MetaGrabberScript::GetList(kGrabberAll, refresh);
+}
+
+GrabberList MetaGrabberScript::GetList(const QString &type, bool refresh)
+{
+    QString tmptype = type.toLower();
+    if (!grabberTypeStrings.contains(tmptype))
+        // unknown type, return empty list
+        return GrabberList();
+
+    return MetaGrabberScript::GetList(grabberTypeStrings[tmptype], refresh);
+}
+
+GrabberList MetaGrabberScript::GetList(GrabberType type,
+                                       bool refresh)
+{
+    InitializeStaticMaps();
+
+    GrabberList tmpGrabberList, retGrabberList;
+    {
+        QMutexLocker listLock(&grabberLock);
+        QDateTime now = MythDate::current();
+
+        // refresh grabber scripts every 60 seconds
+        // this might have to be revised, or made more intelligent if
+        // the delay during refreshes is too great
+        if (refresh || (grabberAge.secsTo(now) > kGrabberRefresh))
+        {
+            grabberList.clear();
+            LOG(VB_GENERAL, LOG_DEBUG, LOC + "Clearing grabber cache");
+
+            // loop through different types of grabber scripts and the 
+            // directories they are stored in
+            QMap<GrabberType, GrabberOpts>::const_iterator it;
+            for (it = grabberTypes.begin(); it != grabberTypes.end(); ++it)
+            {
+                QString path = (it->path).arg(GetShareDir());
+                QStringList scripts = QDir(path).entryList(QDir::Files);
+                if (scripts.count() == 0)
+                    // no scripts found
+                    continue;
+
+                // loop through discovered scripts
+                QStringList::const_iterator it2 = scripts.begin();
+                for (; it2 != scripts.end(); ++it2)
+                {
+                    QString cmd = QString("%1%2").arg(path).arg(*it2);
+                    MetaGrabberScript script(cmd);
+
+                    if (script.IsValid())
+                    {
+                        LOG(VB_GENERAL, LOG_DEBUG, LOC + "Adding " + script.m_command);
+                        grabberList.append(script);
+                    }
+                 }
+            }
+
+            grabberAge = now;
+        }
+
+        tmpGrabberList = grabberList;
+    }
+
+    GrabberList::const_iterator it = tmpGrabberList.begin();
+    for (; it != tmpGrabberList.end(); ++it)
+    {
+        if ((type == kGrabberAll) || (it->GetType() == type))
+            retGrabberList.append(*it);
+    }
+
+    return retGrabberList;
+}
+
+MetaGrabberScript MetaGrabberScript::GetType(const QString &type)
+{
+    QString tmptype = type.toLower();
+    if (!grabberTypeStrings.contains(tmptype))
+        // unknown type, return empty grabber
+        return MetaGrabberScript();
+
+    return MetaGrabberScript::GetType(grabberTypeStrings[tmptype]);
+}
+
+MetaGrabberScript MetaGrabberScript::GetType(const GrabberType type)
+{
+    InitializeStaticMaps();
+
+    QString cmd = gCoreContext->GetSetting(grabberTypes[type].setting,
+                                           grabberTypes[type].def);
+
+    if (grabberAge.secsTo(MythDate::current()) > kGrabberRefresh)
+    {
+        // polling the cache will cause a refresh, so lets just grab and
+        // process the script directly
+        QString fullcmd = QString("%1%2").arg(GetShareDir()).arg(cmd);
+        MetaGrabberScript script(fullcmd);
+        if (script.IsValid())
+            return script;
+    }
+    else
+    {
+        // just pull it from the cache
+        GrabberList list = GetList();
+        GrabberList::const_iterator it = list.begin();
+        QString cmd = gCoreContext->GetSetting(grabberTypes[type].setting,
+                                               grabberTypes[type].def);
+        for (; it != list.end(); ++it)
+            if (it->GetPath().endsWith(cmd))
+                return *it;
+    }
+
+    return MetaGrabberScript();
+}
+
+MetaGrabberScript MetaGrabberScript::FromTag(const QString &tag,
+                                                    bool absolute)
+{
+    GrabberList list = GetList();
+    GrabberList::const_iterator it = list.begin();
+
+    // search for direct match on tag
+    for (; it != list.end(); ++it)
+    {
+        if (it->GetCommand() == tag)
+        {
+            return *it;
+        }
+    }
+
+    // no direct match. do we require a direct match? search for one that works
+    if (!absolute)
+    {
+        for (it = list.begin(); it != list.end(); ++it)
+        {
+            if (it->Accepts(tag))
+            {
+                return *it;
+            }
+        }
+    }
+
+    // no working match. return a blank
+    return MetaGrabberScript();
+}
+
+MetaGrabberScript MetaGrabberScript::FromInetref(const QString &inetref,
+                                                        bool absolute)
+{
+    QMutexLocker lock(&reLock);
+
+    if (retagref.indexIn(inetref) > -1)
+    {
+        // match found, pull out the grabber
+        MetaGrabberScript script = MetaGrabberScript::FromTag(retagref.cap(1),
+                                                              absolute);
+        if (script.IsValid())
+            return script;
+    }
+
+    // no working match, return a blank
+    return MetaGrabberScript();
+}
+
+MetaGrabberScript::MetaGrabberScript(void) :
+    m_name(""), m_author(""), m_thumbnail(""), m_fullcommand(""), m_command(""),
+    m_type(kGrabberInvalid), m_typestring(""), m_description(""), m_accepts(),
+    m_version(0.0), m_valid(false)
+{
+}
+
+MetaGrabberScript::MetaGrabberScript(const QString &path,
+                                     const QDomElement &dom) :
+    m_valid(false)
+{
+    m_fullcommand = path;
+    ParseGrabberVersion(dom);
+}
+
+MetaGrabberScript::MetaGrabberScript(const QDomElement &dom) :
+    m_valid(false)
+{
+    ParseGrabberVersion(dom);
+    
+}
+
+MetaGrabberScript::MetaGrabberScript(const QString &path) :
+    m_valid(false)
+{
+    m_fullcommand = path;
+    if (path[0] != '/')
+        m_fullcommand.prepend(QString("%1metadata").arg(GetShareDir()));
+
+    MythSystemLegacy grabber(path, QStringList() << "-v",
+                             kMSRunShell | kMSStdOut);
+    grabber.Run();
+    if (grabber.Wait() != GENERIC_EXIT_OK)
+        // script failed
+        return;
+
+    QByteArray result = grabber.ReadAll();
+    if (result.isEmpty())
+        // no output
+        return;
+
+    QDomDocument doc;
+    doc.setContent(result, true);
+    QDomElement root = doc.documentElement();
+    if (root.isNull())
+        // no valid XML
+        return;
+
+    ParseGrabberVersion(root);
+    if (m_name.isEmpty())
+        // XML not processed correctly
+        return;
+
+    m_valid = true;
+}
+
+MetaGrabberScript::MetaGrabberScript(const MetaGrabberScript &other) :
+    m_name(other.m_name), m_author(other.m_author),
+    m_thumbnail(other.m_thumbnail), m_fullcommand(other.m_fullcommand),
+    m_command(other.m_command), m_type(other.m_type),
+    m_typestring(other.m_typestring), m_description(other.m_description),
+    m_accepts(other.m_accepts), m_version(other.m_version),
+    m_valid(other.m_valid)
+{
+}
+
+
+MetaGrabberScript& MetaGrabberScript::operator=(const MetaGrabberScript &other)
+{
+    if (this != &other)
+    {
+        m_name = other.m_name;
+        m_author = other.m_author;
+        m_thumbnail = other.m_thumbnail;
+        m_command = other.m_command;
+        m_fullcommand = other.m_fullcommand;
+        m_type = other.m_type;
+        m_typestring = other.m_typestring;
+        m_description = other.m_description;
+        m_accepts = other.m_accepts;
+        m_version = other.m_version;
+        m_valid = other.m_valid;
+    }
+
+    return *this;
+}
+
+
+void MetaGrabberScript::ParseGrabberVersion(const QDomElement &item)
+{
+    m_name          = item.firstChildElement("name").text();
+    m_author        = item.firstChildElement("author").text();
+    m_thumbnail     = item.firstChildElement("thumbnail").text();
+    m_command       = item.firstChildElement("command").text();
+    m_description   = item.firstChildElement("description").text();
+    m_version       = item.firstChildElement("version").text().toFloat();
+    m_typestring    = item.firstChildElement("type").text().toLower();
+
+    if (!m_typestring.isEmpty() && grabberTypeStrings.contains(m_typestring))
+        m_type = grabberTypeStrings[m_typestring];
+    else
+        m_type = kGrabberMovie;
+
+    QDomElement accepts = item.firstChildElement("accepts");
+    if (!accepts.isNull())
+    {
+        while (!accepts.isNull())
+        {
+            m_accepts.append(accepts.text());
+            accepts = accepts.nextSiblingElement("accepts");
+        }
+    }
+}
+
+bool MetaGrabberScript::Test(void)
+{
+    if (!m_valid || m_fullcommand.isEmpty())
+        return false;
+
+    QStringList args; args << "-t";
+    MythSystemLegacy grabber(m_fullcommand, args, kMSStdOut);
+
+    grabber.Run();
+    if (grabber.Wait() != GENERIC_EXIT_OK)
+        return false;
+
+    return true;
+}
+
+// TODO
+// using the MetadataLookup object as both argument input, and parsed output,
+// is clumsy. break the inputs out into a separate object, and spawn a new
+// MetadataLookup object in ParseMetadataItem, rather than requiring an
+// existing one to reuse.
+MetadataLookupList MetaGrabberScript::RunGrabber(const QStringList &args,
+                        MetadataLookup *lookup, bool passseas)
+{
+    MythSystemLegacy grabber(m_fullcommand, args, kMSStdOut);
+    MetadataLookupList list;
+
+    LOG(VB_GENERAL, LOG_INFO, QString("Running Grabber: %1 %2")
+        .arg(m_fullcommand).arg(args.join(" ")));
+
+    grabber.Run();
+    if (grabber.Wait() != GENERIC_EXIT_OK)
+        return list;
+
+    QByteArray result = grabber.ReadAll();
+    if (!result.isEmpty())
+    {
+        QDomDocument doc;
+        doc.setContent(result, true);
+        QDomElement root = doc.documentElement();
+        QDomElement item = root.firstChildElement("item");
+
+        while (!item.isNull())
+        {
+            MetadataLookup *tmp = ParseMetadataItem(item, lookup, passseas);
+            tmp->SetInetref(QString("%1:%2").arg(m_command)
+                                            .arg(tmp->GetInetref()));
+            list.append(tmp);
+            // MetadataLookup is to be owned by the list
+            tmp->DecrRef();
+            item = item.nextSiblingElement("item");
+        }
+    }
+    return list;
+}
+
+QString MetaGrabberScript::GetRelPath(void) const
+{
+    QString share = GetShareDir();
+    if (m_fullcommand.startsWith(share))
+        return m_fullcommand.right(m_fullcommand.size() - share.size());
+
+    return QString();
+}
+
+void MetaGrabberScript::toMap(InfoMap &metadataMap) const
+{
+    metadataMap["name"] = m_name;
+    metadataMap["author"] = m_author;
+    metadataMap["thumbnailfilename"] = m_thumbnail;
+    metadataMap["command"] = m_command;
+    metadataMap["description"] = m_description;
+    metadataMap["version"] = QString::number(m_version);
+    metadataMap["type"] = m_typestring;
+}
+
+void MetaGrabberScript::SetDefaultArgs(QStringList &args)
+{
+    args << "-l"
+         << gCoreContext->GetLanguage()
+         << "-a"
+         << gCoreContext->GetLocale()->GetCountryCode();
+}
+
+MetadataLookupList MetaGrabberScript::Search(const QString &title,
+                        MetadataLookup *lookup, bool passseas)
+{
+    QStringList args;
+    SetDefaultArgs(args);
+
+    QString tmptitle = title;
+    {
+        // television grabber may search using inetref for some reason, so test
+        // it for a grabber tag
+        QMutexLocker lock(&reLock);
+        if (retagref.indexIn(title) > -1)
+            tmptitle = retagref.cap(2);
+    }
+
+    args << "-M"
+         << tmptitle;
+
+    return RunGrabber(args, lookup, passseas);
+}
+
+MetadataLookupList MetaGrabberScript::SearchSubtitle(const QString &title,
+                        const QString &subtitle, MetadataLookup *lookup,
+                        bool passseas)
+{
+    QStringList args;
+    SetDefaultArgs(args);
+
+    QString tmptitle = title;
+    {
+        QMutexLocker lock(&reLock);
+        if (retagref.indexIn(title) > -1)
+            tmptitle = retagref.cap(2);
+    }
+
+    args << "-N"
+         << tmptitle
+         << subtitle;
+
+    return RunGrabber(args, lookup, passseas);
+}
+
+MetadataLookupList MetaGrabberScript::LookupData(const QString &inetref,
+                        MetadataLookup *lookup, bool passseas)
+{
+    QStringList args;
+    SetDefaultArgs(args);
+
+    QString tmpref = inetref;
+    {
+        // try to strip grabber tag from inetref
+        QMutexLocker lock(&reLock);
+        if (retagref.indexIn(inetref) > -1)
+            tmpref = retagref.cap(2);
+    }
+
+    args << "-D"
+         << tmpref;
+
+    return RunGrabber(args, lookup, passseas);
+}
+
+MetadataLookupList MetaGrabberScript::LookupData(const QString &inetref,
+                        int season, int episode, MetadataLookup *lookup,
+                        bool passseas)
+{
+    QStringList args;
+    SetDefaultArgs(args);
+
+    QString tmpref = inetref;
+    {
+        // try to strip grabber tag from inetref
+        QMutexLocker lock(&reLock);
+        if (retagref.indexIn(inetref) > -1)
+            tmpref = retagref.cap(2);
+    }
+
+    args << "-D"
+         << tmpref
+         << QString::number(season)
+         << QString::number(episode);
+
+    return RunGrabber(args, lookup, passseas);
+}
+
+MetadataLookupList MetaGrabberScript::LookupCollection(
+                        const QString &collectionref, MetadataLookup *lookup,
+                        bool passseas)
+{
+    QStringList args;
+    SetDefaultArgs(args);
+
+    args << "-C"
+         << collectionref;
+
+    return RunGrabber(args, lookup, passseas);
+}
diff -Naur mythtv-0.27-20140708-gf4825ca-old/mythtv/libs/libmythmetadata/metadatagrabber.h mythtv-0.27-20140708-gf4825ca-new/mythtv/libs/libmythmetadata/metadatagrabber.h
--- mythtv-0.27-20140708-gf4825ca-old/mythtv/libs/libmythmetadata/metadatagrabber.h	1970-01-01 01:00:00.000000000 +0100
+++ mythtv-0.27-20140708-gf4825ca-new/mythtv/libs/libmythmetadata/metadatagrabber.h	2014-07-12 13:10:09.966563806 +0200
@@ -0,0 +1,96 @@
+#ifndef METADATAGRABBER_H_
+#define METADATAGRABBER_H_
+
+#include <QList>
+#include <QString>
+#include <QVariant>
+#include <QStringList>
+#include <QDomDocument>
+
+#include "mythtypes.h"
+#include "mythmetaexp.h"
+//#include "metadatacommon.h"
+#include "referencecounterlist.h"
+class MetadataLookup;
+typedef RefCountedList<MetadataLookup> MetadataLookupList;
+
+class MetaGrabberScript;
+typedef QList<MetaGrabberScript> GrabberList;
+
+enum GrabberType {
+    kGrabberAll,
+    kGrabberMovie,
+    kGrabberTelevision,
+    kGrabberMusic,
+    kGrabberGame,
+    kGrabberInvalid
+};
+
+class META_PUBLIC MetaGrabberScript : public QObject
+{
+  public:
+    MetaGrabberScript();
+    MetaGrabberScript(const QDomElement &dom);
+    MetaGrabberScript(const QString &path);
+    MetaGrabberScript(const QString &path, const QDomElement &dom);
+    MetaGrabberScript(const MetaGrabberScript &other);
+
+    MetaGrabberScript& operator=(const MetaGrabberScript &other);
+
+    static GrabberList          GetList(bool refresh=false);
+    static GrabberList          GetList(const QString &type, bool refresh=false);
+    static GrabberList          GetList(GrabberType type,
+                                        bool refresh=false);
+
+    static MetaGrabberScript    GetType(const QString &type);
+    static MetaGrabberScript    GetType(GrabberType type);
+    static MetaGrabberScript    FromTag(const QString &tag,
+                                        bool absolute=false);
+    static MetaGrabberScript    FromInetref(const QString &inetref,
+                                            bool absolute=false);
+
+    bool          IsValid(void) const         { return m_valid; }
+
+    QString       GetCommand(void) const      { return m_command; }
+    QString       GetRelPath(void) const;
+    QString       GetPath(void) const         { return m_fullcommand; }
+
+    QString       GetName(void) const         { return m_name; }
+    QString       GetAuthor(void) const       { return m_author; }
+    QString       GetThumbnail(void) const    { return m_thumbnail; }
+    GrabberType   GetType(void) const         { return m_type; }
+    QString       GetTypeString(void) const   { return m_typestring; }
+    QString       GetDescription(void) const  { return m_description; }
+
+    bool Accepts(const QString &tag) const { return m_accepts.contains(tag); }
+
+    void          toMap(InfoMap &metadataMap) const;
+
+    bool                Test(void);
+    MetadataLookupList  Search(const QString &title, MetadataLookup *lookup, bool passseas=true);
+    MetadataLookupList  SearchSubtitle(const QString &title, const QString &subtitle, MetadataLookup *lookup, bool passseas=true);
+    MetadataLookupList  LookupData(const QString &inetref, MetadataLookup *lookup, bool passseas=true);
+    MetadataLookupList  LookupData(const QString &inetref, int season, int episode, MetadataLookup *lookup, bool passseas=true);
+    MetadataLookupList  LookupCollection(const QString &collectionref, MetadataLookup *lookup, bool passseas=true);
+
+  private:
+    QString m_name;
+    QString m_author;
+    QString m_thumbnail;
+    QString m_fullcommand;
+    QString m_command;
+    GrabberType m_type;
+    QString m_typestring;
+    QString m_description;
+    QStringList m_accepts;
+    float m_version;
+    bool m_valid;
+
+    void ParseGrabberVersion(const QDomElement &item);
+    MetadataLookupList RunGrabber(const QStringList &args, MetadataLookup *lookup, bool passseas);
+    void SetDefaultArgs(QStringList &args);
+};
+
+Q_DECLARE_METATYPE(MetaGrabberScript*)
+
+#endif // METADATAGRABBER_H_
diff -Naur mythtv-0.27-20140708-gf4825ca-old/mythtv/programs/mythfrontend/grabbersettings.cpp mythtv-0.27-20140708-gf4825ca-new/mythtv/programs/mythfrontend/grabbersettings.cpp
--- mythtv-0.27-20140708-gf4825ca-old/mythtv/programs/mythfrontend/grabbersettings.cpp	2014-07-08 13:47:42.000000000 +0200
+++ mythtv-0.27-20140708-gf4825ca-new/mythtv/programs/mythfrontend/grabbersettings.cpp	2014-07-12 13:10:09.966563806 +0200
@@ -85,145 +85,54 @@
 
 void GrabberSettings::Load(void)
 {
-    QDir TVScriptPath = QString("%1metadata/Television/").arg(GetShareDir());
-    QStringList TVScripts = TVScriptPath.entryList(QDir::Files);
-    QDir MovieScriptPath = QString("%1metadata/Movie/").arg(GetShareDir());
-    QStringList MovieScripts = MovieScriptPath.entryList(QDir::Files);
-    QDir GameScriptPath = QString("%1metadata/Game/").arg(GetShareDir());
-    QStringList GameScripts = GameScriptPath.entryList(QDir::Files);
-
-    if (MovieScripts.count())
-    {
-        for (QStringList::const_iterator i = MovieScripts.begin();
-             i != MovieScripts.end(); ++i)
-        {
-            QString commandline = QString("%1/%2")
-                                      .arg(MovieScriptPath.path()).arg(*i);
-            MythSystemLegacy grabber(commandline, QStringList() << "-v", kMSRunShell | kMSStdOut);
-            grabber.Run();
-            grabber.Wait();
-            QByteArray result = grabber.ReadAll();
-
-            if (!result.isEmpty())
-            {
-                QDomDocument doc;
-                doc.setContent(result, true);
-                QDomElement root = doc.documentElement();
-                if (!root.isNull())
-                {
-                    MetaGrabberScript *script = ParseGrabberVersion(root);
-                    if (!script->GetName().isEmpty())
-                        m_movieGrabberList.append(script);
-                }
-            }
-        }
-    }
-
-    if (TVScripts.count())
-    {
-        for (QStringList::const_iterator i = TVScripts.end() - 1;
-                i != TVScripts.begin() - 1; --i)
-        {
-            QString commandline = QString("%1/%2")
-                                      .arg(TVScriptPath.path()).arg(*i);
-            MythSystemLegacy grabber(commandline, QStringList() << "-v", kMSRunShell | kMSStdOut);
-            grabber.Run();
-            grabber.Wait();
-            QByteArray result = grabber.ReadAll();
-
-            if (!result.isEmpty())
-            {
-                QDomDocument doc;
-                doc.setContent(result, true);
-                QDomElement root = doc.documentElement();
-                if (!root.isNull())
-                {
-                    MetaGrabberScript *script = ParseGrabberVersion(root);
-                    if (!script->GetName().isEmpty())
-                        m_tvGrabberList.append(script);
-
-                }
-            }
-        }
-    }
-
-    if (GameScripts.count())
-    {
-        for (QStringList::const_iterator i = GameScripts.end() - 1;
-                i != GameScripts.begin() - 1; --i)
-        {
-            QString commandline = QString("%1/%2")
-                                      .arg(GameScriptPath.path()).arg(*i);
-            MythSystemLegacy grabber(commandline, QStringList() << "-v", kMSRunShell | kMSStdOut);
-            grabber.Run();
-            grabber.Wait();
-            QByteArray result = grabber.ReadAll();
-
-            if (!result.isEmpty())
-            {
-                QDomDocument doc;
-                doc.setContent(result, true);
-                QDomElement root = doc.documentElement();
-                if (!root.isNull())
-                {
-                    MetaGrabberScript *script = ParseGrabberVersion(root);
-                    if (!script->GetName().isEmpty())
-                        m_gameGrabberList.append(script);
-                }
-            }
-        }
-    }
+    m_movieGrabberList = MetaGrabberScript::GetList(kGrabberMovie, true);
+    m_tvGrabberList = MetaGrabberScript::GetList(kGrabberTelevision);
+    m_gameGrabberList = MetaGrabberScript::GetList(kGrabberGame);
 }
 
 void GrabberSettings::Init(void)
 {
-    for (QList<MetaGrabberScript*>::const_iterator it =
-             m_movieGrabberList.begin();
+    for (GrabberList::const_iterator it = m_movieGrabberList.begin();
          it != m_movieGrabberList.end(); ++it)
     {
-        QString commandline = QString("metadata/Movie/%1")
-                    .arg((*it)->GetCommand());
         InfoMap map;
-        (*it)->toMap(map);
+        it->toMap(map);
         MythUIButtonListItem *item =
-                    new MythUIButtonListItem(m_movieGrabberButtonList, (*it)->GetName());
-        item->SetData(commandline);
+                    new MythUIButtonListItem(m_movieGrabberButtonList, it->GetName());
+        item->SetData(it->GetRelPath());
         item->SetTextFromMap(map);
     }
 
     m_movieGrabberList.clear();
 
-    for (QList<MetaGrabberScript*>::const_iterator it = m_tvGrabberList.begin();
+    for (GrabberList::const_iterator it = m_tvGrabberList.begin();
          it != m_tvGrabberList.end(); ++it)
     {
-        QString commandline = QString("metadata/Television/%1")
-                    .arg((*it)->GetCommand());
         InfoMap map;
-        (*it)->toMap(map);
+        it->toMap(map);
         MythUIButtonListItem *item =
-                    new MythUIButtonListItem(m_tvGrabberButtonList, (*it)->GetName());
-        item->SetData(commandline);
+                    new MythUIButtonListItem(m_tvGrabberButtonList, it->GetName());
+        item->SetData(it->GetRelPath());
         item->SetTextFromMap(map);
     }
 
     m_tvGrabberList.clear();
 
-    for (QList<MetaGrabberScript*>::const_iterator it =
-             m_gameGrabberList.begin();
+    for (GrabberList::const_iterator it = m_gameGrabberList.begin();
          it != m_gameGrabberList.end(); ++it)
     {
-        QString commandline = QString("metadata/Game/%1")
-                    .arg((*it)->GetCommand());
         InfoMap map;
-        (*it)->toMap(map);
+        it->toMap(map);
         MythUIButtonListItem *item =
-                    new MythUIButtonListItem(m_gameGrabberButtonList, (*it)->GetName());
-        item->SetData(commandline);
+                    new MythUIButtonListItem(m_gameGrabberButtonList, it->GetName());
+        item->SetData(it->GetRelPath());
         item->SetTextFromMap(map);
     }
 
     m_gameGrabberList.clear();
 
+    // TODO
+    // pull these values from MetaGrabberScript so we're not defining them in multiple locations
     QString currentTVGrabber = gCoreContext->GetSetting("TelevisionGrabber",
                                          "metadata/Television/ttvdb.py");
     QString currentMovieGrabber = gCoreContext->GetSetting("MovieGrabber",
diff -Naur mythtv-0.27-20140708-gf4825ca-old/mythtv/programs/mythfrontend/grabbersettings.h mythtv-0.27-20140708-gf4825ca-new/mythtv/programs/mythfrontend/grabbersettings.h
--- mythtv-0.27-20140708-gf4825ca-old/mythtv/programs/mythfrontend/grabbersettings.h	2014-07-08 13:47:42.000000000 +0200
+++ mythtv-0.27-20140708-gf4825ca-new/mythtv/programs/mythfrontend/grabbersettings.h	2014-07-12 13:10:09.966563806 +0200
@@ -11,6 +11,7 @@
 #include "mythuicheckbox.h"
 #include "mythscreentype.h"
 #include "mythdialogbox.h"
+#include "metadatagrabber.h"
 
 class MetaGrabberScript;
 class GrabberSettings : public MythScreenType
@@ -29,9 +30,9 @@
     virtual void Load(void);
     virtual void Init(void);
 
-    QList<MetaGrabberScript*> m_movieGrabberList;
-    QList<MetaGrabberScript*> m_tvGrabberList;
-    QList<MetaGrabberScript*> m_gameGrabberList;
+    GrabberList m_movieGrabberList;
+    GrabberList m_tvGrabberList;
+    GrabberList m_gameGrabberList;
 
     MythUIButtonList   *m_movieGrabberButtonList;
     MythUIButtonList   *m_tvGrabberButtonList;
