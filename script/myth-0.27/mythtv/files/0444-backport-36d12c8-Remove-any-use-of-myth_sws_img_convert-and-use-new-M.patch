From 36d12c8fa280d8d002657b34e72621288afc9042 Mon Sep 17 00:00:00 2001
From: Jean-Yves Avenard <jyavenard@mythtv.org>
Date: Mon, 30 Jun 2014 12:37:26 -0700
Subject: [PATCH 07/12] Remove any use of myth_sws_img_convert and use new
 MythAVCopy API

Remove myth_sws_img_convert API.

Most visible benefit is the reduction of stutter occurring in main video when one PiP is paused
---
 .../mytharchive/mytharchive/mytharchive.pro        |    1 +
 .../mytharchive/mytharchive/thumbfinder.cpp        |   33 +----------
 mythplugins/mytharchive/mytharchive/thumbfinder.h  |    1 +
 mythplugins/mytharchive/mytharchivehelper/main.cpp |   35 ++----------
 .../mytharchivehelper/mytharchivehelper.pro        |    1 +
 mythtv/libs/libmythtv/decoderbase.h                |    2 +
 mythtv/libs/libmythtv/libmythtv.pro                |    2 -
 mythtv/libs/libmythtv/mhi.cpp                      |   16 ++++--
 mythtv/libs/libmythtv/mhi.h                        |   11 ++--
 mythtv/libs/libmythtv/myth_imgconvert.cpp          |   59 --------------------
 mythtv/libs/libmythtv/myth_imgconvert.h            |   44 ---------------
 mythtv/libs/libmythtv/mythplayer.cpp               |    4 +-
 mythtv/libs/libmythtv/nuppeldecoder.cpp            |    3 +-
 mythtv/libs/libmythtv/openglvideo.cpp              |    3 +-
 mythtv/libs/libmythtv/openglvideo.h                |    2 +
 mythtv/libs/libmythtv/privatedecoder.h             |    4 ++
 mythtv/libs/libmythtv/privatedecoder_crystalhd.cpp |    7 +--
 mythtv/libs/libmythtv/privatedecoder_vda.cpp       |    7 +--
 mythtv/libs/libmythtv/videoout_d3d.cpp             |    3 +-
 mythtv/libs/libmythtv/videoout_xv.cpp              |   14 ++---
 mythtv/programs/mythcommflag/PGMConverter.cpp      |   10 +++-
 mythtv/programs/mythcommflag/PGMConverter.h        |    2 +
 mythtv/programs/mythcommflag/pgm.cpp               |   30 ----------
 mythtv/programs/mythcommflag/pgm.h                 |    1 -
 24 files changed, 59 insertions(+), 236 deletions(-)
 delete mode 100644 mythtv/libs/libmythtv/myth_imgconvert.cpp
 delete mode 100644 mythtv/libs/libmythtv/myth_imgconvert.h

diff --git a/mythplugins/mytharchive/mytharchive/mytharchive.pro b/mythplugins/mytharchive/mytharchive/mytharchive.pro
index 57a50c9..9b77814 100644
--- a/mythplugins/mytharchive/mytharchive/mytharchive.pro
+++ b/mythplugins/mytharchive/mytharchive/mytharchive.pro
@@ -14,6 +14,7 @@ LIBS += -lmythavformat
 LIBS += -lmythavcodec
 LIBS += -lmythavutil
 LIBS += -lmythmetadata-$$LIBVERSION
+LIBS += -lmythtv-$$LIBVERSION
 
 TEMPLATE = lib opengl
 CONFIG += plugin thread
diff --git a/mythplugins/mytharchive/mytharchive/thumbfinder.cpp b/mythplugins/mytharchive/mytharchive/thumbfinder.cpp
index 0e12344..7fa12fa 100644
--- a/mythplugins/mytharchive/mytharchive/thumbfinder.cpp
+++ b/mythplugins/mytharchive/mytharchive/thumbfinder.cpp
@@ -55,9 +55,6 @@
 #include <mythuibuttonlist.h>
 #include <mythimage.h>
 #include <mythconfig.h>
-extern "C" {
-#include <swscale.h>
-}
 
 #ifndef INT64_C    // Used in FFmpeg headers to define some constants
 #define INT64_C(v)   (v ## LL)
@@ -778,32 +775,6 @@ bool ThumbFinder::seekBackward()
     return true;
 }
 
-// Note: copied this function from myth_imgconvert.cpp -- dtk 2009-08-17
-static int myth_sws_img_convert(
-    AVPicture *dst, PixelFormat dst_pix_fmt, AVPicture *src,
-    PixelFormat pix_fmt, int width, int height)
-{
-    static QMutex lock;
-    QMutexLocker locker(&lock);
-
-    static struct SwsContext *convert_ctx;
-
-    convert_ctx = sws_getCachedContext(convert_ctx, width, height, pix_fmt,
-                                       width, height, dst_pix_fmt,
-                                       SWS_FAST_BILINEAR, NULL, NULL, NULL);
-    if (!convert_ctx)
-    {
-        LOG(VB_GENERAL, LOG_ERR, "myth_sws_img_convert: Cannot initialize "
-                                 "the image conversion context");
-        return -1;
-    }
-
-    sws_scale(convert_ctx, src->data, src->linesize,
-              0, height, dst->data, dst->linesize);
-
-    return 0;
-}
-
 bool ThumbFinder::getFrameImage(bool needKeyFrame, int64_t requiredPTS)
 {
     AVPacket pkt;
@@ -865,8 +836,8 @@ bool ThumbFinder::getFrameImage(bool needKeyFrame, int64_t requiredPTS)
         avpicture_deinterlace(tmp, tmp, m_codecCtx->pix_fmt,
                               m_frameWidth, m_frameHeight);
 
-        myth_sws_img_convert(&retbuf, PIX_FMT_RGB32, tmp, m_codecCtx->pix_fmt,
-                             m_frameWidth, m_frameHeight);
+        m_copy.Copy(&retbuf, PIX_FMT_RGB32, tmp, m_codecCtx->pix_fmt,
+                    m_frameWidth, m_frameHeight);
 
         QImage img(m_outputbuf, m_frameWidth, m_frameHeight,
                    QImage::Format_RGB32);
diff --git a/mythplugins/mytharchive/mytharchive/thumbfinder.h b/mythplugins/mytharchive/mytharchive/thumbfinder.h
index d8e0f01..4269f2a 100644
--- a/mythplugins/mytharchive/mytharchive/thumbfinder.h
+++ b/mythplugins/mytharchive/mytharchive/thumbfinder.h
@@ -81,6 +81,7 @@ class ThumbFinder : public MythScreenType
     AVCodecContext  *m_codecCtx;
     AVCodec         *m_codec;
     MythAVFrame      m_frame;
+    MythAVCopy       m_copy;
 
     float            m_fps;
     unsigned char   *m_outputbuf;
diff --git a/mythplugins/mytharchive/mytharchivehelper/main.cpp b/mythplugins/mytharchive/mytharchivehelper/main.cpp
index 6dcbb2d..22b8d55 100644
--- a/mythplugins/mytharchive/mytharchivehelper/main.cpp
+++ b/mythplugins/mytharchive/mytharchivehelper/main.cpp
@@ -70,7 +70,6 @@ using namespace std;
 extern "C" {
 #include <libavcodec/avcodec.h>
 #include <libavformat/avformat.h>
-#include <libswscale/swscale.h>
 #include "pxsup2dast.h"
 }
 
@@ -1582,32 +1581,6 @@ static int doImportArchive(const QString &inFile, int chanID)
     return na.doImportArchive(inFile, chanID);
 }
 
-// Note: copied this function from myth_imgconvert.cpp -- dtk 2009-08-17
-static int myth_sws_img_convert(
-    AVPicture *dst, PixelFormat dst_pix_fmt, AVPicture *src,
-    PixelFormat pix_fmt, int width, int height)
-{
-    static QMutex lock;
-    QMutexLocker locker(&lock);
-
-    static struct SwsContext *convert_ctx;
-
-    convert_ctx = sws_getCachedContext(convert_ctx, width, height, pix_fmt,
-                                       width, height, dst_pix_fmt,
-                                       SWS_FAST_BILINEAR, NULL, NULL, NULL);
-    if (!convert_ctx)
-    {
-        LOG(VB_GENERAL, LOG_ERR, "myth_sws_img_convert: Cannot initialize "
-                                 "the image conversion context");
-        return -1;
-    }
-
-    sws_scale(convert_ctx, src->data, src->linesize,
-              0, height, dst->data, dst->linesize);
-
-    return 0;
-}
-
 static int grabThumbnail(QString inFile, QString thumbList, QString outFile, int frameCount)
 {
     av_register_all();
@@ -1690,6 +1663,7 @@ static int grabThumbnail(QString inFile, QString thumbList, QString outFile, int
     AVPicture retbuf;
     memset(&orig, 0, sizeof(AVPicture));
     memset(&retbuf, 0, sizeof(AVPicture));
+    MythAVCopy copyframe;
 
     int bufflen = width * height * 4;
     unsigned char *outputbuf = new unsigned char[bufflen];
@@ -1751,10 +1725,9 @@ static int grabThumbnail(QString inFile, QString thumbList, QString outFile, int
                                               (AVPicture*)tmp,
                                               codecCtx->pix_fmt, width, height);
 
-                        myth_sws_img_convert(
-                                    &retbuf, PIX_FMT_RGB32,
-                                    (AVPicture*) tmp,
-                                    codecCtx->pix_fmt, width, height);
+                        copyframe.Copy(&retbuf, PIX_FMT_RGB32,
+                                       (AVPicture*) tmp,
+                                       codecCtx->pix_fmt, width, height);
 
                         QImage img(outputbuf, width, height,
                                    QImage::Format_RGB32);
diff --git a/mythplugins/mytharchive/mytharchivehelper/mytharchivehelper.pro b/mythplugins/mytharchive/mytharchivehelper/mytharchivehelper.pro
index f194b1a..a871d7b 100644
--- a/mythplugins/mytharchive/mytharchivehelper/mytharchivehelper.pro
+++ b/mythplugins/mytharchive/mytharchivehelper/mytharchivehelper.pro
@@ -18,6 +18,7 @@ QMAKE_CLEAN += $(TARGET)
 HEADERS += ../mytharchive/archiveutil.h ../mytharchive/remoteavformatcontext.h pxsup2dast.h
 SOURCES += main.cpp ../mytharchive/archiveutil.cpp pxsup2dast.c
 
+LIBS += -lmythtv-$$LIBVERSION
 LIBS += -lmythswscale
 LIBS += -lmythavformat
 LIBS += -lmythavcodec
diff --git a/mythtv/libs/libmythtv/decoderbase.h b/mythtv/libs/libmythtv/decoderbase.h
index e869734..abe2799 100644
--- a/mythtv/libs/libmythtv/decoderbase.h
+++ b/mythtv/libs/libmythtv/decoderbase.h
@@ -12,6 +12,7 @@ using namespace std;
 #include "mythdbcon.h"
 #include "programinfo.h"
 #include "mythcodecid.h"
+#include "mythavutil.h"
 
 class RingBuffer;
 class TeletextViewer;
@@ -307,6 +308,7 @@ class DecoderBase
     long long lastKey;
     int keyframedist;
     long long indexOffset;
+    MythAVCopy copyFrame;
 
     // The totalDuration field is only valid when the video is played
     // from start to finish without any jumping.  trackTotalDuration
diff --git a/mythtv/libs/libmythtv/libmythtv.pro b/mythtv/libs/libmythtv/libmythtv.pro
index 91ddae1..3ece72d 100644
--- a/mythtv/libs/libmythtv/libmythtv.pro
+++ b/mythtv/libs/libmythtv/libmythtv.pro
@@ -129,7 +129,6 @@ HEADERS += livetvchain.h            playgroup.h
 HEADERS += channelsettings.h
 HEADERS += previewgenerator.h       previewgeneratorqueue.h
 HEADERS += transporteditor.h        listingsources.h
-HEADERS += myth_imgconvert.h
 HEADERS += channelgroup.h           channelgroupsettings.h
 HEADERS += recordingrule.h
 HEADERS += mythsystemevent.h
@@ -159,7 +158,6 @@ SOURCES += channelsettings.cpp
 SOURCES += previewgenerator.cpp     previewgeneratorqueue.cpp
 SOURCES += transporteditor.cpp
 SOURCES += channelgroup.cpp         channelgroupsettings.cpp
-SOURCES += myth_imgconvert.cpp
 SOURCES += recordingrule.cpp
 SOURCES += mythsystemevent.cpp
 SOURCES += avfringbuffer.cpp
diff --git a/mythtv/libs/libmythtv/mhi.cpp b/mythtv/libs/libmythtv/mhi.cpp
index 0418277..90f1557 100644
--- a/mythtv/libs/libmythtv/mhi.cpp
+++ b/mythtv/libs/libmythtv/mhi.cpp
@@ -13,7 +13,6 @@
 #include "mythuiimage.h"
 #include "osd.h"
 #include "mythdirs.h"
-#include "myth_imgconvert.h"
 #include "mythlogging.h"
 #include "mythmainwindow.h"
 #include "mythavutil.h"
@@ -1737,6 +1736,16 @@ void MHIDLA::DrawPoly(bool isFilled, int nPoints, const int *xArray, const int *
     }
 }
 
+MHIBitmap::MHIBitmap(MHIContext *parent, bool tiled)
+    : m_parent(parent), m_tiled(tiled), m_opaque(false),
+      m_copyCtx(new MythAVCopy(false))
+{
+}
+
+MHIBitmap::~MHIBitmap()
+{
+    delete m_copyCtx;
+}
 
 void MHIBitmap::Draw(int x, int y, QRect rect, bool tiled, bool bUnder)
 {
@@ -1864,9 +1873,8 @@ void MHIBitmap::CreateFromMPEG(const unsigned char *data, int length)
                        nContentWidth, nContentHeight);
 
         AVFrame *tmp = picture;
-        myth_sws_img_convert(
-            &retbuf, PIX_FMT_RGB24, (AVPicture*)tmp, c->pix_fmt,
-                    nContentWidth, nContentHeight);
+        m_copyCtx->Copy(&retbuf, PIX_FMT_RGB24, (AVPicture*)tmp, c->pix_fmt,
+                     nContentWidth, nContentHeight);
 
         uint8_t * buf = outputbuf;
 
diff --git a/mythtv/libs/libmythtv/mhi.h b/mythtv/libs/libmythtv/mhi.h
index 614947f..fe79914 100644
--- a/mythtv/libs/libmythtv/mhi.h
+++ b/mythtv/libs/libmythtv/mhi.h
@@ -32,15 +32,12 @@ using namespace std;
 #include "mythdeque.h"
 #include "mthread.h"
 
-extern "C" {
-#include "libavcodec/avcodec.h" // to decode single MPEG I-frames
-}
-
 class MythPainter;
 class InteractiveScreen;
 class DSMCCPacket;
 class MHIImageData;
 class MHIContext;
+class MythAVCopy;
 
 /** \class MHIContext
  *  \brief Contains various utility functions for interactive television.
@@ -258,9 +255,8 @@ class MHIText : public MHTextDisplay
 class MHIBitmap : public MHBitmapDisplay
 {
   public:
-    MHIBitmap(MHIContext *parent, bool tiled)
-        : m_parent(parent), m_tiled(tiled), m_opaque(false) {}
-    virtual ~MHIBitmap() {}
+    MHIBitmap(MHIContext *parent, bool tiled);
+    virtual ~MHIBitmap();
 
     /// Create bitmap from PNG
     virtual void CreateFromPNG(const unsigned char *data, int length);
@@ -292,6 +288,7 @@ class MHIBitmap : public MHBitmapDisplay
     bool        m_tiled;
     QImage      m_image;
     bool        m_opaque;
+    MythAVCopy *m_copyCtx;
 };
 
 /** \class MHIDLA
diff --git a/mythtv/libs/libmythtv/myth_imgconvert.cpp b/mythtv/libs/libmythtv/myth_imgconvert.cpp
deleted file mode 100644
index c3893e3..0000000
--- a/mythtv/libs/libmythtv/myth_imgconvert.cpp
+++ /dev/null
@@ -1,59 +0,0 @@
-/* -*- Mode: c++ -*-
- * vim: set expandtab tabstop=4 shiftwidth=4:
- *
- * Original Project
- *      MythTV      http://www.mythtv.org
- *
- * Copyright (c) 2004, 2005 John Pullan <john@pullan.org>
- * Copyright (c) 2009, Janne Grunau <janne-mythtv@grunau.be>
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
- * Or, point your browser to http://www.gnu.org/copyleft/gpl.html
- *
- */
-
-extern "C" {
-#include "libswscale/swscale.h"
-}
-
-#include <QMutex>
-#include <QMutexLocker>
-
-#include "mythlogging.h"
-#include "myth_imgconvert.h"
-
-int myth_sws_img_convert(AVPicture *dst, PixelFormat dst_pix_fmt,
-                         const AVPicture *src, PixelFormat pix_fmt,
-                         int width, int height)
-{
-    static QMutex ctx_lock;
-    static struct SwsContext *convert_ctx = NULL;
-
-    QMutexLocker locker(&ctx_lock);
-    convert_ctx = sws_getCachedContext(convert_ctx, width, height, pix_fmt,
-                                       width, height, dst_pix_fmt,
-                                       SWS_FAST_BILINEAR, NULL, NULL, NULL);
-    if (convert_ctx == NULL)
-    {
-        LOG(VB_GENERAL, LOG_ERR, "myth_sws_img_convert: Cannot initialize "
-                                 "the image conversion context");
-        return -1;
-    }
-
-    sws_scale(convert_ctx, src->data, src->linesize,
-              0, height, dst->data, dst->linesize);
-
-    return 0;
-}
diff --git a/mythtv/libs/libmythtv/myth_imgconvert.h b/mythtv/libs/libmythtv/myth_imgconvert.h
deleted file mode 100644
index a41aba0..0000000
--- a/mythtv/libs/libmythtv/myth_imgconvert.h
+++ /dev/null
@@ -1,44 +0,0 @@
-/* -*- Mode: c++ -*-
- * vim: set expandtab tabstop=4 shiftwidth=4:
- *
- * Original Project
- *      MythTV      http://www.mythtv.org
- *
- * Copyright (c) 2004, 2005 John Pullan <john@pullan.org>
- * Copyright (c) 2009, Janne Grunau <janne-mythtv@grunau.be>
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
- * Or, point your browser to http://www.gnu.org/copyleft/gpl.html
- *
- */
-#ifndef MYTH_IMGCONVERT_H
-#define MYTH_IMGCONVERT_H
-
-#include "mythtvexp.h"
-
-extern "C" {
-#include "libavcodec/avcodec.h"
-}
-
-/**
- * convert among pixel formats
- * utility function to replace deprecated img_convert with
- * the software scaler (swscale).
- */
-MTV_PUBLIC int myth_sws_img_convert(AVPicture *dst, PixelFormat dst_pix_fmt,
-                                    const AVPicture *src, PixelFormat pix_fmt,
-                                    int width, int height);
-
-#endif /* MYTH_IMGCONVERT_H */
diff --git a/mythtv/libs/libmythtv/mythplayer.cpp b/mythtv/libs/libmythtv/mythplayer.cpp
index 96f3227..0fd52d5 100644
--- a/mythtv/libs/libmythtv/mythplayer.cpp
+++ b/mythtv/libs/libmythtv/mythplayer.cpp
@@ -54,7 +54,6 @@ using namespace std;
 #include "NuppelVideoRecorder.h"
 #include "tv_play.h"
 #include "interactivetv.h"
-#include "myth_imgconvert.h"
 #include "mythsystemevent.h"
 #include "mythpainter.h"
 #include "mythimage.h"
@@ -4374,6 +4373,7 @@ char *MythPlayer::GetScreenGrabAtFrame(uint64_t frameNum, bool absolute,
     VideoFrame    *frame     = NULL;
     AVPicture      orig;
     AVPicture      retbuf;
+    MythAVCopy     copyCtx;
     memset(&orig,   0, sizeof(AVPicture));
     memset(&retbuf, 0, sizeof(AVPicture));
 
@@ -4444,7 +4444,7 @@ char *MythPlayer::GetScreenGrabAtFrame(uint64_t frameNum, bool absolute,
 
     bufflen = video_dim.width() * video_dim.height() * 4;
     outputbuf = new unsigned char[bufflen];
-    AVPictureCopy(&retbuf, frame, outputbuf, AV_PIX_FMT_RGB32);
+    copyCtx.Copy(&retbuf, frame, outputbuf, AV_PIX_FMT_RGB32);
 
     vw = video_disp_dim.width();
     vh = video_disp_dim.height();
diff --git a/mythtv/libs/libmythtv/nuppeldecoder.cpp b/mythtv/libs/libmythtv/nuppeldecoder.cpp
index 8eeb2ed..11b4e8b 100644
--- a/mythtv/libs/libmythtv/nuppeldecoder.cpp
+++ b/mythtv/libs/libmythtv/nuppeldecoder.cpp
@@ -20,7 +20,6 @@ using namespace std;
 #include "mythplayer.h"
 #include "remoteencoder.h"
 #include "mythlogging.h"
-#include "myth_imgconvert.h"
 #include "programinfo.h"
 #include "audiooutpututil.h"
 #include "mythavutil.h"
@@ -958,7 +957,7 @@ bool NuppelDecoder::DecodeFrame(struct rtframeheader *frameheader,
             return true;
 
         AVFrame *tmp = mpa_pic;
-        AVPictureCopy(frame, (AVPicture*)tmp, mpa_vidctx->pix_fmt);
+        copyFrame.Copy(frame, (AVPicture*)tmp, mpa_vidctx->pix_fmt);
     }
 
     return true;
diff --git a/mythtv/libs/libmythtv/openglvideo.cpp b/mythtv/libs/libmythtv/openglvideo.cpp
index 6501d1c..02bd0dd 100644
--- a/mythtv/libs/libmythtv/openglvideo.cpp
+++ b/mythtv/libs/libmythtv/openglvideo.cpp
@@ -2,7 +2,6 @@
 #include "mythcontext.h"
 #include "tv.h"
 #include "openglvideo.h"
-#include "myth_imgconvert.h"
 #include "mythrender_opengl.h"
 #include "mythavutil.h"
 
@@ -817,7 +816,7 @@ void OpenGLVideo::UpdateInputFrame(const VideoFrame *frame, bool soft_bob)
         {
             out_fmt = PIX_FMT_UYVY422;
         }
-        AVPictureCopy(&img_out, frame, (unsigned char*)buf, out_fmt);
+        m_copyCtx.Copy(&img_out, frame, (unsigned char*)buf, out_fmt);
     }
     else if (frame->interlaced_frame && !soft_bob)
     {
diff --git a/mythtv/libs/libmythtv/openglvideo.h b/mythtv/libs/libmythtv/openglvideo.h
index 4182d4e..66366c5 100644
--- a/mythtv/libs/libmythtv/openglvideo.h
+++ b/mythtv/libs/libmythtv/openglvideo.h
@@ -10,6 +10,7 @@ using namespace std;
 #include "videooutbase.h"
 #include "videoouttypes.h"
 #include "mythrender_opengl.h"
+#include "mythavutil.h"
 
 enum OpenGLFilterType
 {
@@ -132,5 +133,6 @@ class OpenGLVideo
     uint           gl_features;
     uint           videoTextureType;
     bool           preferYCBCR;
+    MythAVCopy     m_copyCtx;
 };
 #endif // _OPENGL_VIDEO_H__
diff --git a/mythtv/libs/libmythtv/privatedecoder.h b/mythtv/libs/libmythtv/privatedecoder.h
index 583dc77..8174233 100644
--- a/mythtv/libs/libmythtv/privatedecoder.h
+++ b/mythtv/libs/libmythtv/privatedecoder.h
@@ -13,6 +13,7 @@ extern "C" {
 #include "videodisplayprofile.h"
 #include "mythcodecid.h"
 #include "mythplayer.h"
+#include "mythavutil.h"
 
 class PrivateDecoder
 {
@@ -34,6 +35,9 @@ class PrivateDecoder
                           AVPacket *pkt) = 0;
     virtual bool HasBufferedFrames(void) { return false; }
     virtual bool NeedsReorderedPTS(void) { return false; }
+
+protected:
+    MythAVCopy m_copyCtx;
 };
 
 #endif // PRIVATEDECODER_H
diff --git a/mythtv/libs/libmythtv/privatedecoder_crystalhd.cpp b/mythtv/libs/libmythtv/privatedecoder_crystalhd.cpp
index f3662c4..ffb3ab1 100644
--- a/mythtv/libs/libmythtv/privatedecoder_crystalhd.cpp
+++ b/mythtv/libs/libmythtv/privatedecoder_crystalhd.cpp
@@ -1,7 +1,5 @@
 #include "privatedecoder_crystalhd.h"
-#include "myth_imgconvert.h"
 #include "mythlogging.h"
-#include "mythavutil.h"
 #include "fourcc.h"
 
 #define LOC  QString("CrystalHD: ")
@@ -667,7 +665,7 @@ void PrivateDecoderCrystalHD::FillFrame(BC_DTS_PROC_OUT *out)
 
     if (!(out->PicInfo.flags & VDEC_FLAG_INTERLACED_SRC))
     {
-        AVPictureCopy(m_frame, &img_in, in_fmt);
+        m_copyCtx.Copy(m_frame, &img_in, in_fmt);
         m_frame->interlaced_frame = 0;
         AddFrameToQueue();
     }
@@ -687,8 +685,7 @@ void PrivateDecoderCrystalHD::FillFrame(BC_DTS_PROC_OUT *out)
             img_out.data[1] += out_width >> 1;
             img_out.data[2] += out_width >> 1;
         }
-        myth_sws_img_convert(&img_out, out_fmt, &img_in,
-                             in_fmt, in_width, in_height / 2);
+        m_copyCtx.Copy(&img_out, out_fmt, &img_in, in_fmt, in_width, in_height / 2);
         if (second_field)
             AddFrameToQueue();
     }
diff --git a/mythtv/libs/libmythtv/privatedecoder_vda.cpp b/mythtv/libs/libmythtv/privatedecoder_vda.cpp
index 62851b6..274554b 100644
--- a/mythtv/libs/libmythtv/privatedecoder_vda.cpp
+++ b/mythtv/libs/libmythtv/privatedecoder_vda.cpp
@@ -6,10 +6,8 @@
 #define ERR QString("VDADec error: ")
 
 #include "mythframe.h"
-#include "myth_imgconvert.h"
 #include "util-osx-cocoa.h"
 #include "privatedecoder_vda.h"
-#include "mythavutil.h"
 
 #ifdef USING_QUARTZ_VIDEO
 #undef CodecType
@@ -667,9 +665,8 @@ int  PrivateDecoderVDA::GetFrame(AVStream *stream,
         CVPixelBufferLockBaseAddress(vdaframe.buffer, 0);
         uint8_t* base = (uint8_t*)CVPixelBufferGetBaseAddressOfPlane(vdaframe.buffer, 0);
         AVPicture img_in;
-        avpicture_fill(&img_in, base, in_fmt,
-                       frame->width, frame->height);
-        AVPictureCopy(frame, &img_in, in_fmt);
+        avpicture_fill(&img_in, base, in_fmt, frame->width, frame->height);
+        m_copyCtx.Copy(frame, &img_in, in_fmt);
         CVPixelBufferUnlockBaseAddress(vdaframe.buffer, 0);
     }
     else
diff --git a/mythtv/libs/libmythtv/videoout_d3d.cpp b/mythtv/libs/libmythtv/videoout_d3d.cpp
index a4c4527..f3fd720 100644
--- a/mythtv/libs/libmythtv/videoout_d3d.cpp
+++ b/mythtv/libs/libmythtv/videoout_d3d.cpp
@@ -12,7 +12,6 @@ using namespace std;
 #include "fourcc.h"
 #include "videodisplayprofile.h"
 #include "mythmainwindow.h"
-#include "myth_imgconvert.h"
 #include "mythplayer.h"
 #include "mythavutil.h"
 
@@ -469,7 +468,7 @@ void VideoOutputD3D::UpdateFrame(VideoFrame *frame, D3D9Image *img)
         avpicture_fill(&image_out, (uint8_t*)buf,
                        PIX_FMT_RGB32, frame->width, frame->height);
         image_out.linesize[0] = pitch;
-        AVPictureCopy(&image_out, frame,(uint8_t*)buf, PIX_FMT_RGB32);
+        m_copyFrame.Copy(&image_out, frame,(uint8_t*)buf, PIX_FMT_RGB32);
     }
     img->ReleaseBuffer();
 }
diff --git a/mythtv/libs/libmythtv/videoout_xv.cpp b/mythtv/libs/libmythtv/videoout_xv.cpp
index 243d341..3318cfa 100644
--- a/mythtv/libs/libmythtv/videoout_xv.cpp
+++ b/mythtv/libs/libmythtv/videoout_xv.cpp
@@ -44,7 +44,6 @@ using namespace std;
 #include "tv.h"
 #include "fourcc.h"
 #include "mythmainwindow.h"
-#include "myth_imgconvert.h"
 #include "mythuihelper.h"
 #include "mythavutil.h"
 
@@ -1439,21 +1438,23 @@ void VideoOutputXv::PrepareFrameMem(VideoFrame *buffer, FrameScanType /*scan*/)
     int out_width  = display_visible_rect.width()  & ~0x1;
     int out_height = display_visible_rect.height() & ~0x1;
     AVPicture image_in, image_out;
-    static struct SwsContext  *scontext = NULL;
 
     if ((out_width  == width) &&
         (out_height == height))
     {
-        AVPictureCopy(&image_out, buffer);
+        m_copyFrame.Copy(&image_out, buffer);
     }
     else
     {
+        static QMutex lock;
+        static struct SwsContext *scontext = NULL;
         int size = buffersize(FMT_YV12, out_width, out_height);
         unsigned char *sbuf = (unsigned char*)av_malloc(size);
 
         avpicture_fill(&image_out, (uint8_t *)sbuf, PIX_FMT_YUV420P,
                        out_width, out_height);
         AVPictureFill(&image_in, buffer);
+        QMutexLocker locker(&lock);
         scontext = sws_getCachedContext(scontext, width, height,
                        PIX_FMT_YUV420P, out_width,
                        out_height, PIX_FMT_YUV420P,
@@ -1466,11 +1467,8 @@ void VideoOutputXv::PrepareFrameMem(VideoFrame *buffer, FrameScanType /*scan*/)
     avpicture_fill(&image_in, (uint8_t *)XJ_non_xv_image->data,
                    non_xv_av_format, out_width, out_height);
 
-
-    // XXX TODO: join with the scaling after removing img_convert, img_resample
-    myth_sws_img_convert(
-        &image_in, non_xv_av_format, &image_out, PIX_FMT_YUV420P,
-         out_width, out_height);
+    m_copyFrame.Copy(&image_in, non_xv_av_format, &image_out, PIX_FMT_YUV420P,
+                out_width, out_height);
 
     {
         QMutexLocker locker(&global_lock);
diff --git a/mythtv/programs/mythcommflag/PGMConverter.cpp b/mythtv/programs/mythcommflag/PGMConverter.cpp
index 324f82c..d32d998 100644
--- a/mythtv/programs/mythcommflag/PGMConverter.cpp
+++ b/mythtv/programs/mythcommflag/PGMConverter.cpp
@@ -8,6 +8,7 @@
 #include "mythlogging.h"
 #include "mythplayer.h"
 #include "mythframe.h"          /* VideoFrame */
+#include "mythavutil.h"
 
 // Commercial Flagging headers
 #include "CommDetector2.h"
@@ -22,6 +23,7 @@ PGMConverter::PGMConverter(void)
     , height(-1)
 #ifdef PGM_CONVERT_GREYSCALE
     , time_reported(false)
+    , m_copy(NULL)
 #endif /* PGM_CONVERT_GREYSCALE */
 {
     memset(&pgm, 0, sizeof(pgm));
@@ -34,6 +36,7 @@ PGMConverter::~PGMConverter(void)
 #ifdef PGM_CONVERT_GREYSCALE
     avpicture_free(&pgm);
     memset(&pgm, 0, sizeof(pgm));
+    delete m_copy;
 #endif /* PGM_CONVERT_GREYSCALE */
 }
 
@@ -60,6 +63,11 @@ PGMConverter::MythPlayerInited(const MythPlayer *player)
                 .arg(width).arg(height));
         return -1;
     }
+    if (m_copy)
+    {
+        delete m_copy;
+    }
+    m_copy = new MythAVCopy;
     LOG(VB_COMMFLAG, LOG_INFO, QString("PGMConverter::MythPlayerInited "
                                        "using true greyscale conversion"));
 #else  /* !PGM_CONVERT_GREYSCALE */
@@ -89,7 +97,7 @@ PGMConverter::getImage(const VideoFrame *frame, long long _frameno,
 
 #ifdef PGM_CONVERT_GREYSCALE
     (void)gettimeofday(&start, NULL);
-    if (pgm_fill(&pgm, frame))
+    if (m_copy->Copy(&pgm, frame, pgm.data[0], PIX_FMT_GRAY8) < 0)
         goto error;
     (void)gettimeofday(&end, NULL);
     timersub(&end, &start, &elapsed);
diff --git a/mythtv/programs/mythcommflag/PGMConverter.h b/mythtv/programs/mythcommflag/PGMConverter.h
index c775b26..2fc5184 100644
--- a/mythtv/programs/mythcommflag/PGMConverter.h
+++ b/mythtv/programs/mythcommflag/PGMConverter.h
@@ -13,6 +13,7 @@ extern "C" {
 
 typedef struct VideoFrame_ VideoFrame;
 class MythPlayer;
+class MythAVCopy;
 
 /*
  * PGM_CONVERT_GREYSCALE:
@@ -45,6 +46,7 @@ private:
 #ifdef PGM_CONVERT_GREYSCALE
     struct timeval  convert_time;
     bool            time_reported;
+    MythAVCopy     *m_copy;
 #endif /* PGM_CONVERT_GREYSCALE */
 };
 
diff --git a/mythtv/programs/mythcommflag/pgm.cpp b/mythtv/programs/mythcommflag/pgm.cpp
index 4593cc2..bc8ddd6 100644
--- a/mythtv/programs/mythcommflag/pgm.cpp
+++ b/mythtv/programs/mythcommflag/pgm.cpp
@@ -7,7 +7,6 @@ extern "C" {
 }
 #include "mythframe.h"
 #include "mythlogging.h"
-#include "myth_imgconvert.h"
 #include "pgm.h"
 
 // TODO: verify this
@@ -27,35 +26,6 @@ static enum PixelFormat pixelTypeOfVideoFrameType(VideoFrameType codec)
     return PIX_FMT_NONE;
 }
 
-int pgm_fill(AVPicture *dst, const VideoFrame *frame)
-{
-    enum PixelFormat        srcfmt;
-    AVPicture               src;
-
-    if ((srcfmt = pixelTypeOfVideoFrameType(frame->codec)) == PIX_FMT_NONE)
-    {
-        LOG(VB_COMMFLAG, LOG_ERR, QString("pgm_fill unknown codec: %1")
-                .arg(frame->codec));
-        return -1;
-    }
-
-    if (avpicture_fill(&src, frame->buf, srcfmt, frame->width,
-                frame->height) < 0)
-    {
-        LOG(VB_COMMFLAG, LOG_ERR, "pgm_fill avpicture_fill failed");
-        return -1;
-    }
-
-    if (myth_sws_img_convert(dst, PIX_FMT_GRAY8, &src, srcfmt, frame->width,
-                             frame->height))
-    {
-        LOG(VB_COMMFLAG, LOG_ERR, "pgm_fill img_convert failed");
-        return -1;
-    }
-
-    return 0;
-}
-
 int pgm_read(unsigned char *buf, int width, int height, const char *filename)
 {
     FILE        *fp;
diff --git a/mythtv/programs/mythcommflag/pgm.h b/mythtv/programs/mythcommflag/pgm.h
index 59b0fc8..8cb2053 100644
--- a/mythtv/programs/mythcommflag/pgm.h
+++ b/mythtv/programs/mythcommflag/pgm.h
@@ -10,7 +10,6 @@
 struct VideoFrame_;
 struct AVPicture;
 
-int pgm_fill(struct AVPicture *dst, const struct VideoFrame_ *frame);
 int pgm_read(unsigned char *buf, int width, int height, const char *filename);
 int pgm_write(const unsigned char *buf, int width, int height,
         const char *filename);
-- 
1.7.10.2

