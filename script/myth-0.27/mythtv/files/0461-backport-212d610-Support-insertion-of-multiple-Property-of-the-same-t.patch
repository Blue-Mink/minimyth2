From 212d610bfa5f6836e39037fc83242811be97f454 Mon Sep 17 00:00:00 2001
From: Stuart Morgan <smorgan@mythtv.org>
Date: Wed, 11 Sep 2013 12:58:21 +0100
Subject: [PATCH] Support insertion of multiple Property of the same type into
 a CDSObject.

This changes GetProperty() to GetProperties() returning a list of all
matching Property.

It alters AddProperty() to allow multiple insertion of Property with the
'm_bAllowMulti' flag set.

Calling GetPropValue()/SetPropValue() on a Property which exists
multiple times in CDSObject will only set/get the most recently
inserted Property. This may not be what the user intended, so for
now we print an error to the logs (under VB_UPNP) warning but we still
allow it. This behaviour may change if a reasonable solution can be
determined and it's deemed necessary.
---
 mythtv/libs/libmythbase/mythversion.h      |    2 +-
 mythtv/libs/libmythupnp/upnpcdsobjects.cpp |   46 ++++++++++++++++++++++------
 mythtv/libs/libmythupnp/upnpcdsobjects.h   |   26 +++++++++-------
 3 files changed, 52 insertions(+), 22 deletions(-)

diff --git a/mythtv/libs/libmythupnp/upnpcdsobjects.cpp b/mythtv/libs/libmythupnp/upnpcdsobjects.cpp
index 06d8096..515714f 100644
--- a/mythtv/libs/libmythupnp/upnpcdsobjects.cpp
+++ b/mythtv/libs/libmythupnp/upnpcdsobjects.cpp
@@ -15,6 +15,7 @@
 #include <QUrl>
 
 #include "upnpcds.h"
+#include "mythlogging.h"
 
 inline QString GetBool( bool bVal ) { return( (bVal) ? "1" : "0" ); }
 
@@ -70,13 +71,23 @@ Property *CDSObject::AddProperty( Property *pProp )
 {
     if (pProp)
     {
-        Properties::iterator it = m_properties.find(pProp->m_sName);
-        if (it != m_properties.end())
+        // If this property is allowed multiple times in an object
+        // e.g. Different sizes of artwork, then just insert it
+        // Otherwise remove all existing instances of this property first
+        // NOTE: This requires ALL instances of a property which can exist
+        //       more than once to have m_bAllowMulti set to true.
+        if (pProp->m_bMultiValue)
+            m_properties.insertMulti(pProp->m_sName, pProp);
+        else
         {
-            delete *it;
-            m_properties.erase(it);
+            Properties::iterator it = m_properties.find(pProp->m_sName);
+            while (it != m_properties.end() && it.key() == pProp->m_sName)
+            {
+                delete *it;
+                it = m_properties.erase(it);
+            }
+            m_properties[pProp->m_sName] = pProp;
         }
-        m_properties[pProp->m_sName] = pProp;
     }
 
     return pProp;
@@ -86,24 +97,33 @@ Property *CDSObject::AddProperty( Property *pProp )
 //
 /////////////////////////////////////////////////////////////////////////////
 
-Property *CDSObject::GetProperty( QString sName )
+QList<Property*> CDSObject::GetProperties( const QString &sName )
 {
+    QList<Property*> props;
     Properties::iterator it = m_properties.find(sName);
-    if (it !=  m_properties.end() && *it)
-        return (*it);
+    while (it != m_properties.end() && it.key() == sName)
+    {
+        if (*it)
+            props.append(*it);
+        ++it;
+    }
 
-    return 0;
+    return props;
 }
 
 /////////////////////////////////////////////////////////////////////////////
 //
 /////////////////////////////////////////////////////////////////////////////
 
-void CDSObject::SetPropValue( QString sName, QString sValue )
+void CDSObject::SetPropValue( const QString &sName, const QString &sValue )
 {
     Properties::iterator it = m_properties.find(sName);
     if (it !=  m_properties.end() && *it)
     {
+        if ((*it)->m_bMultiValue)
+            LOG(VB_UPNP, LOG_WARNING,
+                QString("SetPropValue(%1) called on property with bAllowMulti. "
+                        "Only the last inserted property will be updated."));
         (*it)->m_sValue = HTTPRequest::Encode(sValue);
     }
 }
@@ -117,7 +137,13 @@ QString CDSObject::GetPropValue(const QString &sName) const
     Properties::const_iterator it = m_properties.find(sName);
 
     if (it !=  m_properties.end() && *it)
+    {
+        if ((*it)->m_bMultiValue)
+            LOG(VB_UPNP, LOG_WARNING,
+                QString("GetPropValue(%1) called on property with bAllowMulti. "
+                        "Only the last inserted property will be return."));
         return QUrl::fromPercentEncoding((*it)->m_sValue.toUtf8());
+    }
     
     return "";
 }
diff --git a/mythtv/libs/libmythupnp/upnpcdsobjects.h b/mythtv/libs/libmythupnp/upnpcdsobjects.h
index b0329fe..8070691 100644
--- a/mythtv/libs/libmythupnp/upnpcdsobjects.h
+++ b/mythtv/libs/libmythupnp/upnpcdsobjects.h
@@ -48,19 +48,23 @@ class Property
         QString  m_sNameSpace;
         bool     m_bRequired;
         QString  m_sValue;
+        bool     m_bMultiValue;
         NameValues      m_lstAttributes;
 
     public:
 
         explicit Property( const QString &sName,
-                           const QString &sNameSpace = "",
-                           bool           bRequired  = false,
-                           const QString &sValue     = "" )
+                           const QString &sNameSpace  = "",
+                           bool           bRequired   = false,
+                           const QString &sValue      = "",
+                           bool           bMultiValue = false
+                         )
         {
-            m_sName      = sName;
-            m_sNameSpace = sNameSpace;
-            m_bRequired  = bRequired;
-            m_sValue     = sValue;
+            m_sName       = sName;
+            m_sNameSpace  = sNameSpace;
+            m_bRequired   = bRequired;
+            m_sValue      = sValue;
+            m_bMultiValue = bMultiValue;
         }
 
         void AddAttribute( const QString &sName,
@@ -176,14 +180,14 @@ class UPNP_PUBLIC CDSObject
                                  const QString sParentId = "-1" );
         virtual      ~CDSObject();
 
-        Property     *AddProperty( Property *pProp  );
-        Property     *GetProperty( QString sName );
-        CDSObject    *AddChild   ( CDSObject   *pChild );
+        Property         *AddProperty( Property *pProp  );
+        QList<Property*>  GetProperties( const QString &sName );
+        CDSObject        *AddChild   ( CDSObject   *pChild );
 
         ContainerClass *AddSearchClass( ContainerClass *pClass );
         ContainerClass *AddCreateClass( ContainerClass *pClass );
 
-        void          SetPropValue( QString sName, QString sValue );
+        void          SetPropValue( const QString &sName, const QString &sValue );
         QString       GetPropValue( const QString &sName ) const;
         QString       toXml      ( FilterMap &filter ) const;
         void          toXml      ( QTextStream &os, FilterMap &filter ) const;
-- 
1.7.10.2

