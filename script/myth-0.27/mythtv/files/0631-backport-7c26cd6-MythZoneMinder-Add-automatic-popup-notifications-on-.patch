From 7c26cd6d185b71a6fab2540d502d0c8302c4d67d Mon Sep 17 00:00:00 2001
From: Paul Harrison <pharrison@mythtv.org>
Date: Fri, 14 Nov 2014 20:41:18 +0000
Subject: [PATCH 1/3] MythZoneMinder: Add automatic popup notifications on
 alarms

Whenever ZoneMinder triggers a motion alarm for a monitor (camera) the popup
mini player will show with the alarmed monitor selected.

Only monitors that have notifications enabled will trigger the mini player to
show. You can toggle which monitors show notifications in the MythZoneMinder
console screen press MENU to show the options popup for the highlighted
monitor and make sure 'Show Notifications' is checked.

One use case would be a front door camera that triggers the popup to show
when someone is at the door so you know who it is before you answer it.
---
 mythplugins/mythzoneminder/mythzoneminder/main.cpp |   20 ++-
 .../mythzoneminder/mythzoneminder.pro              |    4 +-
 .../mythzoneminder/mythzoneminder/zmclient.cpp     |  190 ++++++++++++++++++--
 .../mythzoneminder/mythzoneminder/zmclient.h       |   26 ++-
 .../mythzoneminder/mythzoneminder/zmconsole.cpp    |   89 +++++----
 .../mythzoneminder/mythzoneminder/zmconsole.h      |    3 +-
 .../mythzoneminder/mythzoneminder/zmdefines.h      |   15 +-
 .../mythzoneminder/mythzoneminder/zmliveplayer.cpp |   72 +++-----
 .../mythzoneminder/mythzoneminder/zmliveplayer.h   |    2 +-
 .../mythzoneminder/mythzoneminder/zmminiplayer.cpp |   56 ++++++
 .../mythzoneminder/mythzoneminder/zmminiplayer.h   |    3 +
 .../theme/default-wide/zoneminder-ui.xml           |   15 +-
 mythtv/themes/MythCenter-wide/zoneminder-ui.xml    |   15 +-
 13 files changed, 377 insertions(+), 133 deletions(-)

diff --git a/mythplugins/mythzoneminder/mythzoneminder/main.cpp b/mythplugins/mythzoneminder/mythzoneminder/main.cpp
index 63d4f76..86f5d8e 100644
--- a/mythplugins/mythzoneminder/mythzoneminder/main.cpp
+++ b/mythplugins/mythzoneminder/mythzoneminder/main.cpp
@@ -31,11 +31,10 @@
 #include "zmevents.h"
 #include "zmclient.h"
 #include "zmminiplayer.h"
+#include "alarmnotifythread.h"
 
 using namespace std;
 
-
-
 static bool checkConnection(void)
 {
     if (!ZMClient::get()->connected())
@@ -89,6 +88,9 @@ static void runZMEventView(void)
 
 static void runZMMiniPlayer(void)
 {
+    if (!ZMClient::get()->isMiniPlayerEnabled())
+        return;
+
     if (!checkConnection())
         return;
 
@@ -192,18 +194,20 @@ int mythplugin_init(const char *libversion)
                                     MYTH_BINARY_VERSION))
         return -1;
 
+    // setup a connection to the mythzmserver
+    if (!checkConnection())
+        return -1;
+
     setupKeys();
 
+    // create the alarm polling thread
+    AlarmNotifyThread::get()->start();
+
     return 0;
 }
 
 int mythplugin_run(void)
 {
-    // setup a connection to the mythzmserver
-    if (!ZMClient::setupZMClient())
-    {
-        return -1;
-    }
 
     return runMenu("zonemindermenu.xml");
 }
@@ -218,6 +222,8 @@ int mythplugin_config(void)
 
 void mythplugin_destroy(void)
 {
+    AlarmNotifyThread::get()->stop();
+    delete AlarmNotifyThread::get();
     delete ZMClient::get();
 }
 
diff --git a/mythplugins/mythzoneminder/mythzoneminder/mythzoneminder.pro b/mythplugins/mythzoneminder/mythzoneminder/mythzoneminder.pro
index d87f15c..e9b418c 100644
--- a/mythplugins/mythzoneminder/mythzoneminder/mythzoneminder.pro
+++ b/mythplugins/mythzoneminder/mythzoneminder/mythzoneminder.pro
@@ -17,10 +17,10 @@ INCLUDEPATH += $${PREFIX}/include/mythtv/libmythui
 
 # Input
 HEADERS += zmconsole.h zmplayer.h zmevents.h zmliveplayer.h zmdefines.h
-HEADERS += zmsettings.h zmclient.h zmminiplayer.h
+HEADERS += zmsettings.h zmclient.h alarmnotifythread.h zmminiplayer.h
 
 SOURCES += main.cpp zmconsole.cpp zmplayer.cpp zmevents.cpp zmliveplayer.cpp
-SOURCES += zmsettings.cpp zmclient.cpp zmminiplayer.cpp
+SOURCES += zmsettings.cpp zmclient.cpp alarmnotifythread.cpp zmminiplayer.cpp
 
 QT += sql xml
 
diff --git a/mythplugins/mythzoneminder/mythzoneminder/zmclient.cpp b/mythplugins/mythzoneminder/mythzoneminder/zmclient.cpp
index 9621dbb..978505c 100644
--- a/mythplugins/mythzoneminder/mythzoneminder/zmclient.cpp
+++ b/mythplugins/mythzoneminder/mythzoneminder/zmclient.cpp
@@ -16,6 +16,7 @@
 
 //zoneminder
 #include "zmclient.h"
+#include "zmminiplayer.h"
 
 // the protocol version we understand
 #define ZM_PROTOCOL_VERSION "11"
@@ -24,22 +25,26 @@
 
 ZMClient::ZMClient()
     : QObject(NULL),
+      m_listLock(QMutex::Recursive),
       m_socket(NULL),
       m_socketLock(QMutex::Recursive),
       m_hostname("localhost"),
       m_port(6548),
       m_bConnected(false),
       m_retryTimer(new QTimer(this)),
-      m_zmclientReady(false)
+      m_zmclientReady(false),
+      m_isMiniPlayerEnabled(true)
 {
     setObjectName("ZMClient");
     connect(m_retryTimer, SIGNAL(timeout()),   this, SLOT(restartConnection()));
+
+    gCoreContext->addListener(this);
 }
 
 bool  ZMClient::m_server_unavailable = false;
-class ZMClient *ZMClient::m_zmclient = NULL;
+ZMClient *ZMClient::m_zmclient = NULL;
 
-class ZMClient *ZMClient::get(void)
+ZMClient *ZMClient::get(void)
 {
     if (m_zmclient == NULL && m_server_unavailable == false)
         m_zmclient = new ZMClient;
@@ -61,7 +66,7 @@ bool ZMClient::setupZMClient(void)
     zmserver_host = gCoreContext->GetSetting("ZoneMinderServerIP", "localhost");
     zmserver_port = gCoreContext->GetNumSetting("ZoneMinderServerPort", 6548);
 
-    class ZMClient *zmclient = ZMClient::get();
+    ZMClient *zmclient = ZMClient::get();
     if (zmclient->connectToHost(zmserver_host, zmserver_port) == false)
     {
         delete m_zmclient;
@@ -128,6 +133,9 @@ bool ZMClient::connectToHost(const QString &lhostname, unsigned int lport)
     if (m_bConnected == false)
         m_server_unavailable = true;
 
+    if (m_bConnected)
+        doGetMonitorList();
+
     return m_bConnected;
 }
 
@@ -252,6 +260,8 @@ void ZMClient::shutdown()
 
 ZMClient::~ZMClient()
 {
+    gCoreContext->removeListener(this);
+
     m_zmclient = NULL;
 
     if (m_socket)
@@ -283,10 +293,8 @@ void ZMClient::getServerStatus(QString &status, QString &cpuStat, QString &diskS
     diskStat = strList[3];
 }
 
-void ZMClient::getMonitorStatus(vector<Monitor*> *monitorList)
+void ZMClient::updateMonitorStatus(void)
 {
-    monitorList->clear();
-
     QStringList strList("GET_MONITOR_STATUS");
     if (!sendReceiveStringList(strList))
         return;
@@ -307,20 +315,70 @@ void ZMClient::getMonitorStatus(vector<Monitor*> *monitorList)
         return;
     }
 
+    QMutexLocker locker(&m_listLock);
+
     for (int x = 0; x < monitorCount; x++)
     {
-        Monitor *item = new Monitor;
-        item->id = strList[x * 7 + 2].toInt();
-        item->name = strList[x * 7 + 3];
-        item->zmcStatus = strList[x * 7 + 4];
-        item->zmaStatus = strList[x * 7 + 5];
-        item->events = strList[x * 7 + 6].toInt();
-        item->function = strList[x * 7 + 7];
-        item->enabled = strList[x * 7 + 8].toInt();
-        monitorList->push_back(item);
+        int monID = strList[x * 7 + 2].toInt();
+
+        if (m_monitorMap.contains(monID))
+        {
+            Monitor *mon = m_monitorMap.find(monID).value();
+            mon->name = strList[x * 7 + 3];
+            mon->zmcStatus = strList[x * 7 + 4];
+            mon->zmaStatus = strList[x * 7 + 5];
+            mon->events = strList[x * 7 + 6].toInt();
+            mon->function = strList[x * 7 + 7];
+            mon->enabled = strList[x * 7 + 8].toInt();
+        }
     }
 }
 
+bool ZMClient::updateAlarmStates(void)
+{
+    QStringList strList("GET_ALARM_STATES");
+    if (!sendReceiveStringList(strList))
+        return false;
+
+    // sanity check
+    if (strList.size() < 2)
+    {
+        LOG(VB_GENERAL, LOG_ERR, "ZMClient response too short");
+        return false;
+    }
+
+    bool bOK;
+    int monitorCount = strList[1].toInt(&bOK);
+    if (!bOK)
+    {
+        LOG(VB_GENERAL, LOG_ERR,
+            "ZMClient received bad int in getAlarmStates()");
+        return false;
+    }
+
+    QMutexLocker locker(&m_listLock);
+
+    bool changed = false;
+    for (int x = 0; x < monitorCount; x++)
+    {
+        int monID = strList[x * 2 + 2].toInt();
+        int state = strList[x * 2 + 3].toInt();
+
+        if (m_monitorMap.contains(monID))
+        {
+            Monitor *mon = m_monitorMap.find(monID).value();
+            if (mon->state != state)
+            {
+                // alarm state has changed for this monitor
+                mon->state = (State)state;
+                changed = true;
+            }
+        }
+    }
+
+    return changed;
+}
+
 void ZMClient::getEventList(const QString &monitorName, bool oldestFirst,
                             const QString &date, bool includeContinuous,
                             vector<Event*> *eventList)
@@ -747,9 +805,41 @@ void ZMClient::getCameraList(QStringList &cameraList)
     }
 }
 
-void ZMClient::getMonitorList(vector<Monitor*> *monitorList)
+int ZMClient::getMonitorCount(void)
+{
+    QMutexLocker locker(&m_listLock);
+    return m_monitorList.count();
+}
+
+Monitor *ZMClient::getMonitorAt(int pos)
+{
+    QMutexLocker locker(&m_listLock);
+
+    if (pos < 0 || pos > m_monitorList.count() - 1)
+        return NULL;
+
+    return m_monitorList.at(pos);
+}
+
+Monitor* ZMClient::getMonitorByID(int monID)
+{
+    QMutexLocker locker(&m_listLock);
+
+    if (m_monitorMap.contains(monID))
+        return m_monitorMap.find(monID).value();
+
+    return NULL;
+}
+
+void ZMClient::doGetMonitorList(void)
 {
-    monitorList->clear();
+    QMutexLocker locker(&m_listLock);
+
+    for (int x = 0; x < m_monitorList.count(); x++)
+        delete m_monitorList.at(x);
+
+    m_monitorList.clear();
+    m_monitorMap.clear();
 
     QStringList strList("GET_MONITOR_LIST");
     if (!sendReceiveStringList(strList))
@@ -780,6 +870,10 @@ void ZMClient::getMonitorList(vector<Monitor*> *monitorList)
         return;
     }
 
+    // get list of monitor id's that need monitoring
+    QString s = gCoreContext->GetSetting("ZoneMinderNotificationMonitors");
+    QStringList notificationMonitors = s.split(",");
+
     for (int x = 0; x < monitorCount; x++)
     {
         Monitor *item = new Monitor;
@@ -792,7 +886,10 @@ void ZMClient::getMonitorList(vector<Monitor*> *monitorList)
         item->zmaStatus = "";
         item->events = 0;
         item->status = "";
-        monitorList->push_back(item);
+        item->showNotifications = notificationMonitors.contains(QString::number(item->id));
+
+        m_monitorList.append(item);
+        m_monitorMap.insert(item->id, item);
 
         LOG(VB_GENERAL, LOG_NOTICE,
                 QString("Monitor: %1 (%2) is using %3 bytes per pixel")
@@ -810,3 +907,58 @@ void ZMClient::setMonitorFunction(const int monitorID, const QString &function,
     if (!sendReceiveStringList(strList))
         return;
 }
+
+void ZMClient::saveNotificationMonitors(void)
+{
+    QString s;
+
+    for (int x = 0; x < m_monitorList.count(); x++)
+    {
+        Monitor *mon = m_monitorList.at(x);
+        if (!s.isEmpty())
+            s += QString(",%1").arg(mon->id);
+        else
+            s = QString("%1").arg(mon->id);
+    }
+
+    gCoreContext->SaveSetting("ZoneMinderNotificationMonitors", s);
+}
+
+void ZMClient::customEvent (QEvent* event)
+{
+    if (event->type() == MythEvent::MythEventMessage)
+    {
+        MythEvent *me = dynamic_cast<MythEvent*>(event);
+
+        if (!me)
+            return;
+
+        if (me->Message().startsWith("ZONEMINDER_NOTIFICATION"))
+        {
+            QStringList list = me->Message().simplified().split(' ');
+
+            if (list.size() < 2)
+                return;
+
+            int monID = list[1].toInt();
+            showMiniPlayer(monID);
+        }
+    }
+
+    QObject::customEvent(event);
+}
+
+void ZMClient::showMiniPlayer(int monitorID)
+{
+    if (!isMiniPlayerEnabled())
+        return;
+
+    MythScreenStack *mainStack = GetMythMainWindow()->GetMainStack();
+
+    ZMMiniPlayer *miniPlayer = new ZMMiniPlayer(mainStack);
+
+    miniPlayer->setAlarmMonitor(monitorID);
+
+    if (miniPlayer->Create())
+        mainStack->AddScreen(miniPlayer);
+}
diff --git a/mythplugins/mythzoneminder/mythzoneminder/zmclient.h b/mythplugins/mythzoneminder/mythzoneminder/zmclient.h
index 5dd4194..072f433 100644
--- a/mythplugins/mythzoneminder/mythzoneminder/zmclient.h
+++ b/mythplugins/mythzoneminder/mythzoneminder/zmclient.h
@@ -21,14 +21,16 @@ class MPUBLIC ZMClient : public QObject
     ZMClient();
 
     static bool m_server_unavailable;
-    static class ZMClient *m_zmclient;
+    static ZMClient *m_zmclient;
 
   public:
     ~ZMClient();
 
-    static class ZMClient *get(void);
+    static ZMClient *get(void);
     static bool setupZMClient (void);
 
+    void customEvent(QEvent *event);
+
     // Used to actually connect to an ZM server
     bool connectToHost(const QString &hostname, unsigned int port);
     bool connected(void) { return m_bConnected; }
@@ -40,7 +42,7 @@ class MPUBLIC ZMClient : public QObject
     void shutdown();
 
     void getServerStatus(QString &status, QString &cpuStat, QString &diskStat);
-    void getMonitorStatus(vector<Monitor*> *monitorList);
+    void updateMonitorStatus(void);
     void getEventList(const QString &monitorName, bool oldestFirst,
                       const QString &date, bool includeContinuous, vector<Event*> *eventList);
     void getEventFrame(Event *event, int frameNo, MythImage **image);
@@ -50,19 +52,34 @@ class MPUBLIC ZMClient : public QObject
     void deleteEvent(int eventID);
     void deleteEventList(vector<Event*> *eventList);
 
+    int  getMonitorCount(void);
+    Monitor* getMonitorAt(int pos);
+    Monitor* getMonitorByID(int monID);
+
     void getCameraList(QStringList &cameraList);
-    void getMonitorList(vector<Monitor*> *monitorList);
     void getEventDates(const QString &monitorName, bool oldestFirst, 
                        QStringList &dateList);
     void setMonitorFunction(const int monitorID, const QString &function, const int enabled);
+    bool updateAlarmStates(void);
+
+    bool isMiniPlayerEnabled(void) { return m_isMiniPlayerEnabled; }
+    void setIsMiniPlayerEnabled(bool enabled) { m_isMiniPlayerEnabled = enabled; }
+
+    void saveNotificationMonitors(void);
+    void showMiniPlayer(int monitorID);
 
   private slots:
     void restartConnection(void);  // Try to re-establish the connection to 
                                    // ZMServer every 10 seconds
   private:
+    void doGetMonitorList(void);
     bool readData(unsigned char *data, int dataSize);
     bool sendReceiveStringList(QStringList &strList);
 
+    QMutex              m_listLock;
+    QList<Monitor*>     m_monitorList;
+    QMap<int, Monitor*> m_monitorMap;
+
     MythSocket       *m_socket;
     QMutex            m_socketLock;
     QString           m_hostname;
@@ -70,6 +87,7 @@ class MPUBLIC ZMClient : public QObject
     bool              m_bConnected;
     QTimer           *m_retryTimer;
     bool              m_zmclientReady;
+    bool              m_isMiniPlayerEnabled;
 };
 
 #endif
diff --git a/mythplugins/mythzoneminder/mythzoneminder/zmconsole.cpp b/mythplugins/mythzoneminder/mythzoneminder/zmconsole.cpp
index f23d932..5313ffc 100644
--- a/mythplugins/mythzoneminder/mythzoneminder/zmconsole.cpp
+++ b/mythplugins/mythzoneminder/mythzoneminder/zmconsole.cpp
@@ -48,6 +48,7 @@ bool FunctionDialog::Create()
     UIUtilE::Assign(this, m_captionText,  "caption_text", &err);
     UIUtilE::Assign(this, m_functionList, "function_list", &err);
     UIUtilE::Assign(this, m_enabledCheck, "enable_check", &err);
+    UIUtilE::Assign(this, m_notificationCheck, "notification_check", &err);
     UIUtilE::Assign(this, m_okButton,     "ok_button", &err);
 
     if (err)
@@ -67,8 +68,6 @@ bool FunctionDialog::Create()
 
     m_captionText->SetText(m_monitor->name);
 
-    m_okButton->SetText(tr("OK"));
-
     connect(m_okButton, SIGNAL(Clicked()), this, SLOT(setMonitorFunction()));
 
     if (m_monitor->enabled)
@@ -76,6 +75,12 @@ bool FunctionDialog::Create()
     else
         m_enabledCheck->SetCheckState(MythUIStateType::Off);
 
+
+    if (m_monitor->showNotifications)
+        m_notificationCheck->SetCheckState(MythUIStateType::Full);
+    else
+        m_notificationCheck->SetCheckState(MythUIStateType::Off);
+
     BuildFocusList();
 
     SetFocusWidget(m_functionList);
@@ -86,13 +91,17 @@ bool FunctionDialog::Create()
 void FunctionDialog::setMonitorFunction(void)
 {
     QString function = m_functionList->GetValue();
-    int enabled = (m_enabledCheck->GetCheckState() == MythUIStateType::Full);
+    bool enabled = (m_enabledCheck->GetCheckState() == MythUIStateType::Full);
+    bool showNotifications = (m_notificationCheck->GetCheckState() == MythUIStateType::Full);
 
     LOG(VB_GENERAL, LOG_INFO,
         "Monitor id : " + QString::number(m_monitor->id) +
         " function change " + m_monitor->function + " -> " + function +
-        ", enable value " + QString::number(m_monitor->enabled) + " -> " +
-        QString::number(enabled));
+        ", enable value " + QString::number(m_monitor->enabled) + " -> " + QString::number(enabled) +
+        ", notification value " + QString::number(m_monitor->showNotifications) + " -> " + QString::number(showNotifications));
+
+    m_monitor->showNotifications = showNotifications;
+    ZMClient::get()->saveNotificationMonitors();
 
     if ((m_monitor->function == function) && (m_monitor->enabled == enabled))
     {
@@ -103,8 +112,7 @@ void FunctionDialog::setMonitorFunction(void)
         return;
     }
 
-    if (class ZMClient *zm = ZMClient::get())
-        zm->setMonitorFunction(m_monitor->id, function, enabled);
+    ZMClient::get()->setMonitorFunction(m_monitor->id, function, enabled);
 
     emit haveResult(true);
 
@@ -115,7 +123,6 @@ void FunctionDialog::setMonitorFunction(void)
 
 ZMConsole::ZMConsole(MythScreenStack *parent)
           :MythScreenType(parent, "zmconsole"),
-           m_monitorList(NULL),
            m_monitor_list(NULL), m_running_text(NULL), m_status_text(NULL),
            m_time_text(NULL), m_date_text(NULL), m_load_text(NULL),
            m_disk_text(NULL), m_functionDialog(NULL),
@@ -134,9 +141,6 @@ ZMConsole::ZMConsole(MythScreenStack *parent)
 ZMConsole::~ZMConsole()
 {
     delete m_timeTimer;
-
-    if (m_monitorList)
-        delete m_monitorList;
 }
 
 bool ZMConsole::Create(void)
@@ -198,36 +202,26 @@ void ZMConsole::updateStatus()
 
 void ZMConsole::getDaemonStatus(void)
 {
-    if (class ZMClient *zm = ZMClient::get())
-    {
-        zm->getServerStatus(m_daemonStatus, m_cpuStat, m_diskStat);
-
-        if (m_daemonStatus.left(7) == "running")
-        {
-            m_status_text->SetFontState("running");
-            m_status_text->SetText(tr("Running"));
-        }
-        else
-        {
-            m_status_text->SetFontState("stopped");
-            m_status_text->SetText(tr("Stopped"));
-        }
+    ZMClient::get()->getServerStatus(m_daemonStatus, m_cpuStat, m_diskStat);
 
-        m_load_text->SetText("Load: " + m_cpuStat);
-        m_disk_text->SetText("Disk: " + m_diskStat);
+    if (m_daemonStatus.left(7) == "running")
+    {
+        m_status_text->SetFontState("running");
+        m_status_text->SetText(tr("Running"));
+    }
+    else
+    {
+        m_status_text->SetFontState("stopped");
+        m_status_text->SetText(tr("Stopped"));
     }
+
+    m_load_text->SetText("Load: " + m_cpuStat);
+    m_disk_text->SetText("Disk: " + m_diskStat);
 }
 
 void ZMConsole::getMonitorStatus(void)
 {
-    if (!m_monitorList)
-        m_monitorList = new vector<Monitor*>;
-
-    if (class ZMClient *zm = ZMClient::get())
-    {
-        zm->getMonitorStatus(m_monitorList);
-        updateMonitorList();
-    }
+    updateMonitorList();
 }
 
 bool ZMConsole::keyPressEvent(QKeyEvent *event)
@@ -262,10 +256,7 @@ void ZMConsole::showEditFunctionPopup()
 {
     Monitor *currentMonitor = NULL;
 
-    int pos = m_monitor_list->GetCurrentPos();
-
-    if (pos >= 0 && pos < (int) m_monitorList->size())
-        currentMonitor = m_monitorList->at(pos);
+    currentMonitor = qVariantValue<Monitor*> (m_monitor_list->GetItemCurrent()->GetData());
 
     if (!currentMonitor)
         return;
@@ -282,19 +273,25 @@ void ZMConsole::showEditFunctionPopup()
 
 void ZMConsole::updateMonitorList()
 {
+    ZMClient::get()->updateMonitorStatus();
+
     int pos = m_monitor_list->GetCurrentPos();
     m_monitor_list->Reset();
 
-    for (uint x = 0; x < m_monitorList->size(); x++)
+    for (int x = 0; x < ZMClient::get()->getMonitorCount(); x++)
     {
-        Monitor *monitor = m_monitorList->at(x);
+        Monitor *monitor = ZMClient::get()->getMonitorAt(x);
 
-        MythUIButtonListItem *item = new MythUIButtonListItem(m_monitor_list,
+        if (monitor)
+        {
+            MythUIButtonListItem *item = new MythUIButtonListItem(m_monitor_list,
                 "", NULL, true, MythUIButtonListItem::NotChecked);
-        item->SetText(monitor->name, "name");
-        item->SetText(monitor->zmcStatus, "zmcstatus");
-        item->SetText(monitor->zmaStatus, "zmastatus");
-        item->SetText(QString("%1").arg(monitor->events), "eventcount");
+            item->SetData(qVariantFromValue(monitor));
+            item->SetText(monitor->name, "name");
+            item->SetText(monitor->zmcStatus, "zmcstatus");
+            item->SetText(monitor->zmaStatus, "zmastatus");
+            item->SetText(QString("%1").arg(monitor->events), "eventcount");
+        }
     }
 
     m_monitor_list->SetItemCurrent(pos);
diff --git a/mythplugins/mythzoneminder/mythzoneminder/zmconsole.h b/mythplugins/mythzoneminder/mythzoneminder/zmconsole.h
index 51d39a9..fe9249b 100644
--- a/mythplugins/mythzoneminder/mythzoneminder/zmconsole.h
+++ b/mythplugins/mythzoneminder/mythzoneminder/zmconsole.h
@@ -48,6 +48,7 @@ class FunctionDialog : public MythScreenType
     MythUIText       *m_captionText;
     MythUIButtonList *m_functionList;
     MythUICheckBox   *m_enabledCheck;
+    MythUICheckBox   *m_notificationCheck;
     MythUIButton     *m_okButton;
 };
 
@@ -74,8 +75,6 @@ class ZMConsole : public MythScreenType
     void updateMonitorList();
     void setMonitorFunction(const QString &function, int enabled);
 
-    std::vector<Monitor *> *m_monitorList;
-
     MythUIButtonList  *m_monitor_list;
     MythUIText        *m_running_text;
     MythUIText        *m_status_text;
diff --git a/mythplugins/mythzoneminder/mythzoneminder/zmdefines.h b/mythplugins/mythzoneminder/mythzoneminder/zmdefines.h
index 91a1f64..d0db780 100644
--- a/mythplugins/mythzoneminder/mythzoneminder/zmdefines.h
+++ b/mythplugins/mythzoneminder/mythzoneminder/zmdefines.h
@@ -21,6 +21,9 @@
 #include <QString>
 #include <QDateTime>
 
+#include <stdint.h>
+#include "../mythzmserver/zmserver.h"
+
 /// Event details
 class Event
 {
@@ -90,8 +93,9 @@ class Monitor
 {
   public:
     Monitor() :
-        id(0), enabled(0), events(0),
-        width(0), height(0), bytes_per_pixel(0)
+        id(0), enabled(false), events(0),
+        width(0), height(0), bytes_per_pixel(0),
+        showNotifications(false), state(IDLE)
     {
     }
 
@@ -101,7 +105,7 @@ class Monitor
     QString name;
     QString type;
     QString function;
-    int enabled;
+    bool enabled;
     QString device;
     QString zmcStatus;
     QString zmaStatus;
@@ -111,6 +115,11 @@ class Monitor
     int width;
     int height;
     int bytes_per_pixel;
+    // used by the alarm notiftications
+    bool showNotifications;
+    State state;
 };
 
+Q_DECLARE_METATYPE(Monitor *)
+
 #endif
diff --git a/mythplugins/mythzoneminder/mythzoneminder/zmliveplayer.cpp b/mythplugins/mythzoneminder/mythzoneminder/zmliveplayer.cpp
index 3fac57c..2c51153 100644
--- a/mythplugins/mythzoneminder/mythzoneminder/zmliveplayer.cpp
+++ b/mythplugins/mythzoneminder/mythzoneminder/zmliveplayer.cpp
@@ -35,15 +35,15 @@ const int FRAME_UPDATE_TIME = 1000 / 10;  // try to update the frame 10 times a
 ZMLivePlayer::ZMLivePlayer(MythScreenStack *parent, bool isMiniPlayer)
              :MythScreenType(parent, "zmliveview"),
               m_frameTimer(new QTimer(this)), m_paused(false), m_monitorLayout(1),
-              m_monitorCount(0), m_players(NULL), m_monitors(NULL),
-              m_isMiniPlayer(isMiniPlayer)
+              m_monitorCount(0), m_players(NULL), m_isMiniPlayer(isMiniPlayer),
+              m_alarmMonitor(-1)
 {
+    ZMClient::get()->setIsMiniPlayerEnabled(false);
+
     GetMythUI()->DoDisableScreensaver();
 
     connect(m_frameTimer, SIGNAL(timeout()), this,
             SLOT(updateFrame()));
-
-    getMonitorList();
 }
 
 bool ZMLivePlayer::Create(void)
@@ -143,7 +143,7 @@ bool ZMLivePlayer::hideAll(void)
 bool ZMLivePlayer::initMonitorLayout(int layout)
 {
     // if we haven't got any monitors there's not much we can do so bail out!
-    if (m_monitors->empty())
+    if (ZMClient::get()->getMonitorCount() == 0)
     {
         LOG(VB_GENERAL, LOG_ERR, "Cannot find any monitors. Bailing out!");
         ShowOkPopup(tr("Can't show live view.") + "\n" +
@@ -183,10 +183,9 @@ ZMLivePlayer::~ZMLivePlayer()
     else
         gCoreContext->SaveSetting("ZoneMinderLiveCameras", "");
 
-    if (m_monitors)
-        delete m_monitors;
-
     delete m_frameTimer;
+
+    ZMClient::get()->setIsMiniPlayerEnabled(true);
 }
 
 bool ZMLivePlayer::keyPressEvent(QKeyEvent *event)
@@ -248,10 +247,10 @@ void ZMLivePlayer::changePlayerMonitor(int playerNo)
     Monitor *mon;
 
     // find the old monitor ID in the list of available monitors
-    vector<Monitor*>::iterator i = m_monitors->begin();
-    for (; i != m_monitors->end(); ++i)
+    int pos;
+    for (pos = 0; pos < ZMClient::get()->getMonitorCount(); pos++)
     {
-        mon = *i;
+        mon = ZMClient::get()->getMonitorAt(pos);
         if (oldMonID == mon->id)
         {
             break;
@@ -259,14 +258,14 @@ void ZMLivePlayer::changePlayerMonitor(int playerNo)
     }
 
     // get the next monitor in the list
-    if (i != m_monitors->end())
-        ++i;
+    if (pos != ZMClient::get()->getMonitorCount())
+        pos++;
 
     // wrap around to the start if we've reached the end
-    if (i == m_monitors->end())
-        i = m_monitors->begin();
+    if (pos >= ZMClient::get()->getMonitorCount())
+        pos = 0;
 
-    mon = *i;
+    mon = ZMClient::get()->getMonitorAt(pos);
 
     m_players->at(playerNo - 1)->setMonitor(mon);
     m_players->at(playerNo - 1)->updateCamera();
@@ -276,10 +275,6 @@ void ZMLivePlayer::changePlayerMonitor(int playerNo)
 
 void ZMLivePlayer::updateFrame()
 {
-    class ZMClient *zm = ZMClient::get();
-    if (!zm)
-        return;
-
     static unsigned char buffer[MAX_IMAGE_SIZE];
     m_frameTimer->stop();
 
@@ -297,7 +292,7 @@ void ZMLivePlayer::updateFrame()
     for (int x = 0; x < monList.count(); x++)
     {
         QString status;
-        int frameSize = zm->getLiveFrame(monList[x], status, buffer, sizeof(buffer));
+        int frameSize = ZMClient::get()->getLiveFrame(monList[x], status, buffer, sizeof(buffer));
 
         if (frameSize > 0 && !status.startsWith("ERROR"))
         {
@@ -330,7 +325,13 @@ void ZMLivePlayer::stopPlayers()
 
 void ZMLivePlayer::setMonitorLayout(int layout, bool restore)
 {
-    QStringList monList = gCoreContext->GetSetting("ZoneMinderLiveCameras", "").split(",");
+    QStringList monList;
+
+    if (m_alarmMonitor != -1)
+        monList.append(QString::number(m_alarmMonitor));
+    else
+        monList = gCoreContext->GetSetting("ZoneMinderLiveCameras", "").split(",");
+
     m_monitorLayout = layout;
 
     if (m_players)
@@ -355,7 +356,7 @@ void ZMLivePlayer::setMonitorLayout(int layout, bool restore)
 
     hideAll();
 
-    uint monitorNo = 1;
+    int monitorNo = 1;
 
     for (int x = 1; x <= m_monitorCount; x++)
     {
@@ -369,20 +370,12 @@ void ZMLivePlayer::setMonitorLayout(int layout, bool restore)
                 int monID = s.toInt(); 
 
                 // try to find a monitor that matches the monID
-                vector<Monitor*>::iterator i = m_monitors->begin();
-                for (; i != m_monitors->end(); ++i)
-                {
-                    if ((*i)->id == monID)
-                    {
-                        monitor = *i;
-                        break;
-                    }
-                }
+                monitor = ZMClient::get()->getMonitorByID(monID);
             }
         }
 
         if (!monitor)
-            monitor = m_monitors->at(monitorNo - 1);
+            monitor = ZMClient::get()->getMonitorAt(monitorNo - 1);
 
         MythUIImage *frameImage = dynamic_cast<MythUIImage *> (GetChild(QString("frame%1-%2").arg(layout).arg(x)));
         MythUIText  *cameraText = dynamic_cast<MythUIText *> (GetChild(QString("name%1-%2").arg(layout).arg(x)));
@@ -395,24 +388,13 @@ void ZMLivePlayer::setMonitorLayout(int layout, bool restore)
         m_players->push_back(p);
 
         monitorNo++;
-        if (monitorNo > m_monitors->size())
+        if (monitorNo > ZMClient::get()->getMonitorCount())
             monitorNo = 1;
     }
 
     updateFrame();
 }
 
-void ZMLivePlayer::getMonitorList(void)
-{
-    if (!m_monitors)
-        m_monitors = new vector<Monitor *>;
-
-    m_monitors->clear();
-
-    if (class ZMClient *zm = ZMClient::get())
-        zm->getMonitorList(m_monitors);
-}
-
 ////////////////////////////////////////////////////////////////////////////////////
 
 Player::Player() :
diff --git a/mythplugins/mythzoneminder/mythzoneminder/zmliveplayer.h b/mythplugins/mythzoneminder/mythzoneminder/zmliveplayer.h
index 05419fc..85dc120 100644
--- a/mythplugins/mythzoneminder/mythzoneminder/zmliveplayer.h
+++ b/mythplugins/mythzoneminder/mythzoneminder/zmliveplayer.h
@@ -89,9 +89,9 @@ class ZMLivePlayer : public MythScreenType
     int                   m_monitorCount;
 
     vector<Player *>     *m_players;
-    vector<Monitor *>    *m_monitors;
 
     bool                  m_isMiniPlayer;
+    int                   m_alarmMonitor;
 };
 
 #endif
diff --git a/mythplugins/mythzoneminder/mythzoneminder/zmminiplayer.cpp b/mythplugins/mythzoneminder/mythzoneminder/zmminiplayer.cpp
index 1f03a32..e17ff15 100644
--- a/mythplugins/mythzoneminder/mythzoneminder/zmminiplayer.cpp
+++ b/mythplugins/mythzoneminder/mythzoneminder/zmminiplayer.cpp
@@ -5,6 +5,7 @@
 
 // mythzoneminder
 #include "zmminiplayer.h"
+#include "zmclient.h"
 
 // the maximum image size we are ever likely to get from ZM
 #define MAX_IMAGE_SIZE  (2048*1536*3)
@@ -17,10 +18,13 @@ ZMMiniPlayer::ZMMiniPlayer(MythScreenStack *parent)
 {
     m_displayTimer->setSingleShot(true);
     connect(m_displayTimer, SIGNAL(timeout()), this, SLOT(timerTimeout()));
+
 }
 
 ZMMiniPlayer::~ZMMiniPlayer(void)
 {
+    gCoreContext->removeListener(this);
+
     // Timers are deleted by Qt
     m_displayTimer->disconnect();
     m_displayTimer = NULL;
@@ -31,6 +35,17 @@ ZMMiniPlayer::~ZMMiniPlayer(void)
 
 void ZMMiniPlayer::timerTimeout(void)
 {
+    // if we was triggered because of an alarm wait for the monitor to become idle
+    if (m_alarmMonitor != -1)
+    {
+        Monitor *mon = ZMClient::get()->getMonitorByID(m_alarmMonitor);
+        if (mon && (mon->state == ALARM || mon->state == ALERT))
+        {
+            m_displayTimer->start(10000);
+            return;
+        }
+    }
+
     Close();
 }
 
@@ -41,9 +56,50 @@ bool ZMMiniPlayer::Create(void)
 
     m_displayTimer->start(10000);
 
+    gCoreContext->addListener(this);
+
     return true;
 }
 
+void ZMMiniPlayer::customEvent (QEvent* event)
+{
+    if (event->type() == MythEvent::MythEventMessage)
+    {
+        MythEvent *me = dynamic_cast<MythEvent*>(event);
+
+        if (!me)
+            return;
+
+        if (me->Message().startsWith("ZONEMINDER_NOTIFICATION"))
+        {
+            QStringList list = me->Message().simplified().split(' ');
+
+            if (list.size() < 2)
+                return;
+
+            int monID = list[1].toInt();
+            if (monID != m_alarmMonitor)
+            {
+                m_frameTimer->stop();
+
+                Monitor *mon = ZMClient::get()->getMonitorAt(monID);
+
+                if (mon)
+                {
+                    m_players->at(0)->setMonitor(mon);
+                    m_players->at(0)->updateCamera();
+                }
+
+                m_frameTimer->start(FRAME_UPDATE_TIME);
+            }
+
+            m_displayTimer->start(10000);
+        }
+    }
+
+    QObject::customEvent(event);
+}
+
 bool ZMMiniPlayer::keyPressEvent(QKeyEvent *event)
 {
     // restart the display timer on any keypress if it is active
diff --git a/mythplugins/mythzoneminder/mythzoneminder/zmminiplayer.h b/mythplugins/mythzoneminder/mythzoneminder/zmminiplayer.h
index 61c9909..765fbe5 100644
--- a/mythplugins/mythzoneminder/mythzoneminder/zmminiplayer.h
+++ b/mythplugins/mythzoneminder/mythzoneminder/zmminiplayer.h
@@ -17,6 +17,9 @@ class MPUBLIC ZMMiniPlayer : public ZMLivePlayer
 
     bool Create(void);
     bool keyPressEvent(QKeyEvent *);
+    void customEvent (QEvent* event);
+
+    void setAlarmMonitor(int monID) { m_alarmMonitor = monID; }
 
   public slots:
     void timerTimeout(void);
diff --git a/mythplugins/mythzoneminder/theme/default-wide/zoneminder-ui.xml b/mythplugins/mythzoneminder/theme/default-wide/zoneminder-ui.xml
index 31a380e..4fc1053 100644
--- a/mythplugins/mythzoneminder/theme/default-wide/zoneminder-ui.xml
+++ b/mythplugins/mythzoneminder/theme/default-wide/zoneminder-ui.xml
@@ -3,10 +3,10 @@
 <mythuitheme>
 
     <window name="functionpopup">
-        <area>-1,-1,413,426</area>
+        <area>-1,-1,413,466</area>
 
         <imagetype name="backimg">
-            <area>0,0,413,426</area>
+            <area>0,0,413,466</area>
             <filename>mythdialogbox-background.png</filename>
         </imagetype>
 
@@ -36,8 +36,19 @@
             <value>Enabled</value>
         </textarea>
 
+        <checkbox name="notification_check" from="basecheckbox">
+            <position>90,310</position>
+        </checkbox>
+
+        <textarea name="notification_text" from="basetextarea">
+            <area>130,310,200,30</area>
+            <align>left,vcenter</align>
+            <value>Show  Notifications</value>
+        </textarea>
+
         <button name="ok_button" from="basebutton">
             <position>125,350</position>
+            <value>OK</value>
         </button>
     </window>
 
diff --git a/mythtv/themes/MythCenter-wide/zoneminder-ui.xml b/mythtv/themes/MythCenter-wide/zoneminder-ui.xml
index 5728ad8..d08aa62 100644
--- a/mythtv/themes/MythCenter-wide/zoneminder-ui.xml
+++ b/mythtv/themes/MythCenter-wide/zoneminder-ui.xml
@@ -30,13 +30,24 @@
         </checkbox>
 
         <textarea name="enable_text" from="basetextarea">
-            <area>130,270,200,30</area>
+            <area>130,270,250,30</area>
             <align>left,vcenter</align>
             <value>Enabled</value>
         </textarea>
 
+        <checkbox name="notification_check" from="basecheckbox">
+            <position>90,310</position>
+        </checkbox>
+
+        <textarea name="notification_text" from="basetextarea">
+            <area>130,310,250,30</area>
+            <align>left,vcenter</align>
+            <value>Show  Notifications</value>
+        </textarea>
+
         <button name="ok_button" from="basebutton">
-            <position>125,350</position>
+            <position>125,365</position>
+            <value>OK</value>
         </button>
     </window>
 
-- 
1.7.10.2

