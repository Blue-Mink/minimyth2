diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/Bluray/bdringbuffer.cpp mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/Bluray/bdringbuffer.cpp
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/Bluray/bdringbuffer.cpp	2014-05-05 12:02:12.947472161 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/Bluray/bdringbuffer.cpp	2014-05-05 12:02:30.054041856 +0200
@@ -80,20 +80,10 @@
     ClearOverlays();
 }
 
-long long BDRingBuffer::Seek(long long pos, int whence, bool has_lock)
+long long BDRingBuffer::SeekInternal(long long pos, int whence)
 {
-    LOG(VB_FILE, LOG_INFO, LOC + QString("Seek(%1,%2,%3)")
-            .arg(pos).arg((whence == SEEK_SET) ? "SEEK_SET" :
-                          ((whence == SEEK_CUR) ? "SEEK_CUR" : "SEEK_END"))
-            .arg(has_lock ? "locked" : "unlocked"));
-
     long long ret = -1;
 
-    // lockForWrite takes priority over lockForRead, so this will
-    // take priority over the lockForRead in the read ahead thread.
-    if (!has_lock)
-        rwlock.lockForWrite();
-
     poslock.lockForWrite();
 
     // Optimize no-op seeks
@@ -104,8 +94,6 @@
         ret = readpos;
 
         poslock.unlock();
-        if (!has_lock)
-            rwlock.unlock();
 
         return ret;
     }
@@ -124,7 +112,7 @@
     }
     else
     {
-        Seek(new_pos);
+        SeekInternal(new_pos);
         m_currentTime = bd_tell_time(bdnav);
         ret = new_pos;
     }
@@ -152,13 +140,10 @@
 
     generalWait.wakeAll();
 
-    if (!has_lock)
-        rwlock.unlock();
-
     return ret;
 }
 
-uint64_t BDRingBuffer::Seek(uint64_t pos)
+uint64_t BDRingBuffer::SeekInternal(uint64_t pos)
 {
     LOG(VB_PLAYBACK, LOG_INFO, LOC + QString("Seeking to %1.").arg(pos));
     if (bdnav)
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/Bluray/bdringbuffer.h mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/Bluray/bdringbuffer.h
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/Bluray/bdringbuffer.h	2014-05-05 12:02:12.947472161 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/Bluray/bdringbuffer.h	2014-05-05 12:02:30.054041856 +0200
@@ -111,9 +111,10 @@
     bool SwitchPlaylist(uint32_t index);
     bool SwitchAngle(uint angle);
 
+  protected:
     virtual int safe_read(void *data, uint sz);
-    virtual long long Seek(long long pos, int whence, bool has_lock);
-    uint64_t Seek(uint64_t pos);
+    virtual long long SeekInternal(long long pos, int whence);
+    uint64_t SeekInternal(uint64_t pos);
 
   private:
 
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/DVD/dvdringbuffer.cpp mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/DVD/dvdringbuffer.cpp
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/DVD/dvdringbuffer.cpp	2014-05-05 12:02:12.960805418 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/DVD/dvdringbuffer.cpp	2014-05-05 12:02:30.167374543 +0200
@@ -306,20 +306,10 @@
     rwlock.unlock();
 }
 
-long long DVDRingBuffer::Seek(long long pos, int whence, bool has_lock)
+long long DVDRingBuffer::SeekInternal(long long pos, int whence)
 {
-    LOG(VB_FILE, LOG_INFO, LOC + QString("Seek(%1,%2,%3)")
-            .arg(pos).arg((whence == SEEK_SET) ? "SEEK_SET":
-                          ((whence == SEEK_CUR) ? "SEEK_CUR" : "SEEK_END"))
-            .arg(has_lock ? "locked" : "unlocked"));
-
     long long ret = -1;
 
-    // lockForWrite takes priority over lockForRead, so this will
-    // take priority over the lockForRead in the read ahead thread.
-    if (!has_lock)
-        rwlock.lockForWrite();
-
     poslock.lockForWrite();
 
     // Optimize no-op seeks
@@ -330,8 +320,6 @@
         ret = readpos;
 
         poslock.unlock();
-        if (!has_lock)
-            rwlock.unlock();
 
         return ret;
     }
@@ -377,9 +365,6 @@
 
     generalWait.wakeAll();
 
-    if (!has_lock)
-        rwlock.unlock();
-
     return ret;
 }
 
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/DVD/dvdringbuffer.h mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/DVD/dvdringbuffer.h
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/DVD/dvdringbuffer.h	2014-05-05 12:02:12.960805418 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/DVD/dvdringbuffer.h	2014-05-05 12:02:30.214040951 +0200
@@ -173,8 +173,6 @@
     bool playTrack(int track);
     bool nextTrack(void);
     void prevTrack(void);
-    virtual int safe_read(void *data, uint sz);
-    virtual long long Seek(long long pos, int whence, bool has_lock);
     long long NormalSeek(long long time);
     bool SectorSeek(uint64_t sector);
     void SkipStillFrame(void);
@@ -201,6 +199,8 @@
     void SetParent(MythDVDPlayer *p) { m_parent = p; }
 
   protected:
+    virtual int safe_read(void *data, uint sz);
+    virtual long long SeekInternal(long long pos, int whence);
 
     typedef enum
     {
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/HLS/httplivestreambuffer.cpp mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/HLS/httplivestreambuffer.cpp
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/HLS/httplivestreambuffer.cpp	2014-05-05 12:02:12.957472104 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/HLS/httplivestreambuffer.cpp	2014-05-05 12:02:30.220707578 +0200
@@ -2781,13 +2781,13 @@
     return (int)((size * 1000.0) / byterate);
 }
 
-long long HLSRingBuffer::GetRealFileSize(void) const
+long long HLSRingBuffer::GetRealFileSizeInternal(void) const
 {
     QReadLocker lock(&rwlock);
     return SizeMedia();
 }
 
-long long HLSRingBuffer::Seek(long long pos, int whence, bool has_lock)
+long long HLSRingBuffer::SeekInternal(long long pos, int whence)
 {
     if (m_error)
         return -1;
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/HLS/httplivestreambuffer.h mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/HLS/httplivestreambuffer.h
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/HLS/httplivestreambuffer.h	2014-05-05 12:02:12.957472104 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/HLS/httplivestreambuffer.h	2014-05-05 12:02:30.240707465 +0200
@@ -51,8 +51,6 @@
     virtual long long GetReadPosition(void) const;
     virtual bool OpenFile(const QString &lfilename,
                           uint retry_ms = kDefaultOpenTimeout);
-    virtual long long Seek(long long pos, int whence, bool has_lock);
-    virtual long long GetRealFileSize(void) const;
     virtual bool IsStreamed(void)           { return false;   }
     virtual bool IsSeekingAllowed(void)     { return !m_error; }
     virtual bool IsBookmarkAllowed(void)    { return true; }
@@ -67,6 +65,8 @@
 
 protected:
     virtual int safe_read(void *data, uint i_read);
+    virtual long long GetRealFileSizeInternal(void) const;
+    virtual long long SeekInternal(long long pos, int whence);
 
 private:
     void FreeStreamsList(QList<HLSStream*> *streams) const;
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/dvdstream.cpp mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/dvdstream.cpp
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/dvdstream.cpp	2014-05-05 12:02:18.377441174 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/dvdstream.cpp	2014-05-05 12:02:30.307373751 +0200
@@ -234,7 +234,7 @@
 }
 
 //virtual
-long long DVDStream::Seek(long long pos, int whence, bool has_lock)
+long long DVDStream::SeekInternal(long long pos, int whence)
 {
     if (!m_reader)
         return -1;
@@ -252,11 +252,6 @@
         return -1;
     }
 
-    // lockForWrite takes priority over lockForRead, so this will
-    // take priority over the lockForRead in the read ahead thread.
-    if (!has_lock)
-        rwlock.lockForWrite();
-
     poslock.lockForWrite();
 
     m_pos = lb;
@@ -265,9 +260,6 @@
 
     generalWait.wakeAll();
 
-    if (!has_lock)
-        rwlock.unlock();
-
     return pos;
 }
 
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/dvdstream.h mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/dvdstream.h
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/dvdstream.h	2014-05-05 12:02:18.377441174 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/dvdstream.h	2014-05-05 12:02:30.347373527 +0200
@@ -30,10 +30,10 @@
     virtual long long GetReadPosition(void)  const;
     virtual bool IsOpen(void) const;
     virtual bool OpenFile(const QString &lfilename, uint retry_ms = 0);
-    virtual long long Seek(long long pos, int whence, bool has_lock);
 
 protected:
     virtual int safe_read(void *data, uint sz);
+    virtual long long SeekInternal(long long pos, int whence);
 
     // Implementation
 private:
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/fileringbuffer.cpp mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/fileringbuffer.cpp
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/fileringbuffer.cpp	2014-05-05 12:02:12.957472104 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/fileringbuffer.cpp	2014-05-05 12:02:30.380706671 +0200
@@ -379,7 +379,6 @@
     commserror = false;
     numfailures = 0;
 
-    rawbitrate = 800;
     CalcReadAheadThresh();
 
     bool ok = fd2 >= 0 || remotefile;
@@ -585,7 +584,7 @@
     return ret;
 }
 
-long long FileRingBuffer::GetRealFileSize(void) const
+long long FileRingBuffer::GetRealFileSizeInternal(void) const
 {
     rwlock.lockForRead();
     long long ret = -1;
@@ -612,29 +611,14 @@
     return ret;
 }
 
-long long FileRingBuffer::Seek(long long pos, int whence, bool has_lock)
+long long FileRingBuffer::SeekInternal(long long pos, int whence)
 {
-    LOG(VB_FILE, LOG_INFO, LOC + QString("Seek(%1,%2,%3)")
-            .arg(pos).arg((SEEK_SET==whence)?"SEEK_SET":
-                          ((SEEK_CUR==whence)?"SEEK_CUR":"SEEK_END"))
-            .arg(has_lock?"locked":"unlocked"));
-
     long long ret = -1;
 
-    StopReads();
-
-    // lockForWrite takes priority over lockForRead, so this will
-    // take priority over the lockForRead in the read ahead thread.
-    if (!has_lock)
-        rwlock.lockForWrite();
-
-    StartReads();
-
     if (writemode)
     {
         ret = WriterSeek(pos, whence, true);
-        if (!has_lock)
-            rwlock.unlock();
+
         return ret;
     }
 
@@ -648,8 +632,6 @@
         ret = readpos;
 
         poslock.unlock();
-        if (!has_lock)
-            rwlock.unlock();
 
         return ret;
     }
@@ -657,7 +639,6 @@
     // only valid for SEEK_SET & SEEK_CUR
     long long new_pos = (SEEK_SET==whence) ? pos : readpos + pos;
 
-#if 1
     // Optimize short seeks where the data for
     // them is in our ringbuffer already.
     if (readaheadrunning &&
@@ -673,6 +654,7 @@
         bool used_opt = false;
         if ((new_pos < readpos))
         {
+            // Seeking to earlier than current buffer's start, but still in buffer
             int min_safety = max(fill_min, readblocksize);
             int free = ((rbwpos >= rbrpos) ?
                         rbrpos + bufferSize : rbrpos) - rbwpos;
@@ -740,12 +722,10 @@
             readpos = new_pos;
             poslock.unlock();
             generalWait.wakeAll();
-            if (!has_lock)
-                rwlock.unlock();
+
             return new_pos;
         }
     }
-#endif
 
 #if 1
     // This optimizes the seek end-250000, read, seek 0, read portion 
@@ -853,9 +833,6 @@
 
             generalWait.wakeAll();
 
-            if (!has_lock)
-                rwlock.unlock();
-
             return ret;
         }
     }
@@ -898,8 +875,5 @@
 
     generalWait.wakeAll();
 
-    if (!has_lock)
-        rwlock.unlock();
-
     return ret;
 }
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/fileringbuffer.h mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/fileringbuffer.h
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/fileringbuffer.h	2014-05-05 12:02:12.960805418 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/fileringbuffer.h	2014-05-05 12:02:30.437373018 +0200
@@ -15,13 +15,11 @@
     // Gets
     virtual bool      IsOpen(void)          const;
     virtual long long GetReadPosition(void) const;
-    virtual long long GetRealFileSize(void) const;
 
     // General Commands
     virtual bool OpenFile(const QString &lfilename,
                           uint retry_ms = kDefaultOpenTimeout);
     virtual bool ReOpen(QString newFilename = "");
-    virtual long long Seek(long long pos, int whence, bool has_lock);
 
   protected:
     FileRingBuffer(const QString &lfilename,
@@ -39,4 +37,6 @@
     }
     int safe_read(int fd, void *data, uint sz);
     int safe_read(RemoteFile *rf, void *data, uint sz);
+    virtual long long GetRealFileSizeInternal(void) const;
+    virtual long long SeekInternal(long long pos, int whence);
 };
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/icringbuffer.cpp mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/icringbuffer.cpp
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/icringbuffer.cpp	2014-05-05 12:02:12.964138733 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/icringbuffer.cpp	2014-05-05 12:02:30.497372678 +0200
@@ -86,16 +86,11 @@
     return m_stream ? m_stream->GetReadPosition() : 0;
 }
 
-long long ICRingBuffer::Seek(long long pos, int whence, bool has_lock)
+long long ICRingBuffer::SeekInternal(long long pos, int whence)
 {
     if (!m_stream)
         return -1;
 
-    // lockForWrite takes priority over lockForRead, so this will
-    // take priority over the lockForRead in the read ahead thread.
-    if (!has_lock)
-        rwlock.lockForWrite();
-
     poslock.lockForWrite();
 
     long long ret;
@@ -108,8 +103,6 @@
         ret = readpos;
 
         poslock.unlock();
-        if (!has_lock)
-            rwlock.unlock();
 
         return ret;
     }
@@ -148,9 +141,6 @@
 
     generalWait.wakeAll();
 
-    if (!has_lock)
-        rwlock.unlock();
-
     return ret;
 }
 
@@ -159,7 +149,7 @@
     return m_stream ? m_stream->safe_read(data, sz, 1000) : (ateof = true, 0);
 }
 
-long long ICRingBuffer::GetRealFileSize(void) const
+long long ICRingBuffer::GetRealFileSizeInternal(void) const
 {
     return m_stream ? m_stream->GetSize() : -1;
 }
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/icringbuffer.h mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/icringbuffer.h
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/icringbuffer.h	2014-05-05 12:02:12.960805418 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/icringbuffer.h	2014-05-05 12:02:30.567372283 +0200
@@ -18,14 +18,14 @@
     virtual long long GetReadPosition(void) const;
     virtual bool OpenFile(const QString &url,
                           uint retry_ms = kDefaultOpenTimeout);
-    virtual long long Seek(long long pos, int whence, bool has_lock);
-    virtual long long GetRealFileSize(void) const;
     virtual bool IsStreamed(void)       { return false;  }
     virtual bool IsSeekingAllowed(void) { return true; }
     virtual bool IsBookmarkAllowed(void) { return false; }
 
   protected:
     virtual int safe_read(void *data, uint sz);
+    virtual long long GetRealFileSizeInternal(void) const;
+    virtual long long SeekInternal(long long pos, int whence);
 
     // Operations
   public:
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/ringbuffer.cpp mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/ringbuffer.cpp
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/ringbuffer.cpp	2014-05-05 12:02:18.380774571 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/ringbuffer.cpp	2014-05-05 12:02:30.584038852 +0200
@@ -206,13 +206,15 @@
     request_pause(false),     paused(false),
     ateof(false),             readsallowed(false),
     setswitchtonext(false),
-    rawbitrate(800),          playspeed(1.0f),
+    rawbitrate(8000),         playspeed(1.0f),
     fill_threshold(65536),    fill_min(-1),
     readblocksize(CHUNK),     wanttoread(0),
     numfailures(0),           commserror(false),
     oldfile(false),           livetvchain(NULL),
     ignoreliveeof(false),     readAdjust(0),
-    bitrateMonitorEnabled(false)
+    readOffset(0),            readInternalMode(false),
+    bitrateMonitorEnabled(false),
+    bitrateInitialized(false)
 {
     {
         QMutexLocker locker(&subExtLock);
@@ -319,6 +321,7 @@
     rwlock.lockForWrite();
     rawbitrate = raw_bitrate;
     CalcReadAheadThresh();
+    bitrateInitialized = true;
     rwlock.unlock();
 }
 
@@ -395,7 +398,7 @@
     }
 
     // minumum seconds of buffering before allowing read
-    float secs_min = 0.15;
+    float secs_min = 0.3;
     // set the minimum buffering before allowing ffmpeg read
     fill_min  = (uint) ((estbitrate * 1000 * secs_min) * 0.125f);
     // make this a multiple of ffmpeg block size..
@@ -474,6 +477,102 @@
 }
 
 /// \brief Returns number of bytes available for reading from buffer.
+int RingBuffer::GetReadBufAvail(void) const
+{
+    QReadLocker lock(&rwlock);
+
+    return ReadBufAvail();
+}
+
+long long RingBuffer::GetRealFileSize(void) const
+{
+    {
+        QReadLocker lock(&rwlock);
+        if (readInternalMode)
+        {
+            return ReadBufAvail();
+        }
+    }
+
+    return GetRealFileSizeInternal();
+}
+
+long long RingBuffer::Seek(long long pos, int whence, bool has_lock)
+{
+    LOG(VB_FILE, LOG_INFO, LOC + QString("Seek(%1,%2,%3)")
+        .arg(pos).arg((SEEK_SET==whence)?"SEEK_SET":
+                      ((SEEK_CUR==whence)?"SEEK_CUR":"SEEK_END"))
+        .arg(has_lock?"locked":"unlocked"));
+
+    if (!has_lock)
+    {
+        rwlock.lockForWrite();
+    }
+
+    long long ret;
+
+    if (readInternalMode)
+    {
+        poslock.lockForWrite();
+        // only valid for SEEK_SET & SEEK_CUR
+        switch (whence)
+        {
+            case SEEK_SET:
+                readpos = pos;
+                break;
+            case SEEK_CUR:
+                readpos += pos;
+                break;
+            case SEEK_END:
+                readpos = ReadBufAvail() - pos;
+                break;
+        }
+        readOffset = readpos;
+        poslock.unlock();
+        ret = readpos;
+    }
+    else
+    {
+        ret = SeekInternal(pos, whence);
+    }
+
+    if (!has_lock)
+    {
+        rwlock.unlock();
+    }
+    return ret;
+}
+
+bool RingBuffer::SetReadInternalMode(bool mode)
+{
+    QWriteLocker lock(&rwlock);
+    bool old = readInternalMode;
+
+    if (mode == old)
+    {
+        return old;
+    }
+
+    readInternalMode = mode;
+
+    if (!mode)
+    {
+        // adjust real read position in ringbuffer
+        rbrlock.lockForWrite();
+        rbrpos = (rbrpos + readOffset) % bufferSize;
+        generalWait.wakeAll();
+        rbrlock.unlock();
+        // reset the read offset as we are exiting the internal read mode
+        readOffset = 0;
+    }
+
+    LOG(VB_FILE, LOG_DEBUG, LOC +
+        QString("SetReadInternalMode: %1").arg(mode ? "on" : "off"));
+
+    return old;
+}
+
+/// \brief Returns number of bytes available for reading from buffer.
 /// WARNING: Must be called with rwlock in locked state.
 int RingBuffer::ReadBufAvail(void) const
 {
@@ -502,6 +601,9 @@
         QString("ResetReadAhead(internalreadpos = %1->%2)")
             .arg(internalreadpos).arg(newinternal));
 
+    readInternalMode = false;
+    readOffset = 0;
+
     rbrlock.lockForWrite();
     rbwlock.lockForWrite();
 
@@ -1304,7 +1406,8 @@
         return -1;
     }
 
-    if (request_pause || stopreads || !readaheadrunning || (ignorereadpos>=0))
+    if (!readInternalMode &&
+        (request_pause || stopreads || !readaheadrunning || (ignorereadpos>=0)))
     {
         rwlock.unlock();
         rwlock.lockForWrite();
@@ -1338,7 +1441,7 @@
         return 0;
     }
 
-    if (!WaitForAvail(count))
+    if (!readInternalMode && !WaitForAvail(count))
     {
         LOG(VB_FILE, LOG_NOTICE, LOC + loc_desc + ": !WaitForAvail()");
         rwlock.unlock();
@@ -1350,7 +1453,14 @@
         return 0;
     }
 
-    count = min(ReadBufAvail(), count);
+    int avail = ReadBufAvail();
+    if (readInternalMode)
+    {
+        LOG(VB_FILE, LOG_DEBUG, LOC +
+            QString("ReadPriv: %1 bytes available, %2 left")
+            .arg(avail).arg(avail-readOffset));
+    }
+    count = min(avail - readOffset, count);
 
     if (count <= 0)
     {
@@ -1362,32 +1472,48 @@
         return count;
     }
 
-    if (peek)
+    if (peek || readInternalMode)
         rbrlock.lockForRead();
     else
         rbrlock.lockForWrite();
 
     LOG(VB_FILE, LOG_DEBUG, LOC + loc_desc + " -- copying data");
 
-    if (rbrpos + count > (int) bufferSize)
+    int rpos;
+    if (rbrpos + readOffset > bufferSize)
+    {
+        rpos = (rbrpos + readOffset) - bufferSize;
+    }
+    else
+    {
+        rpos = rbrpos + readOffset;
+    }
+    if (rpos + count > (int) bufferSize)
     {
-        int firstsize = bufferSize - rbrpos;
+        int firstsize = bufferSize - rpos;
         int secondsize = count - firstsize;
 
-        memcpy(buf, readAheadBuffer + rbrpos, firstsize);
+        memcpy(buf, readAheadBuffer + rpos, firstsize);
         memcpy((char *)buf + firstsize, readAheadBuffer, secondsize);
     }
     else
     {
-        memcpy(buf, readAheadBuffer + rbrpos, count);
+        memcpy(buf, readAheadBuffer + rpos, count);
     }
     LOG(VB_FILE, LOG_DEBUG, LOC + loc_desc + QString(" -- checksum %1")
             .arg(qChecksum((char*)buf,count)));
 
     if (!peek)
     {
-        rbrpos = (rbrpos + count) % bufferSize;
-        generalWait.wakeAll();
+        if (readInternalMode)
+        {
+            readOffset += count;
+        }
+        else
+        {
+            rbrpos = (rbrpos + count) % bufferSize;
+            generalWait.wakeAll();
+        }
     }
     rbrlock.unlock();
     rwlock.unlock();
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/ringbuffer.h mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/ringbuffer.h
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/ringbuffer.h	2014-05-05 12:02:12.964138733 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/ringbuffer.h	2014-05-05 12:02:30.590705481 +0200
@@ -81,7 +81,7 @@
     long long GetWritePosition(void) const;
     /// \brief Returns the size of the file we are reading/writing,
     ///        or -1 if the query fails.
-    virtual long long GetRealFileSize(void)  const { return -1; }
+    long long GetRealFileSize(void) const;
     bool      IsNearEnd(double fps, uint vvf) const;
     /// \brief Returns true if open for either reading or writing.
     virtual bool IsOpen(void) const = 0;
@@ -92,6 +92,11 @@
     static QString BitrateToString(uint64_t rate, bool hz = false);
     RingBufferType GetType() const { return type; }
 
+    // LiveTV used utilities
+    int GetReadBufAvail() const;
+    bool SetReadInternalMode(bool mode);
+    bool IsReadInternalMode(void) { return readInternalMode; }
+
     // DVD and bluray methods
     bool IsDisc(void) const { return IsDVD() || IsBD(); }
     bool IsDVD(void)  const { return type == kRingBuffer_DVD; }
@@ -127,8 +132,7 @@
                bool resetInternal = false);
 
     /// \brief Seeks to a particular position in the file.
-    virtual long long Seek(
-        long long pos, int whence, bool has_lock = false) = 0;
+    long long Seek(long long pos, int whence, bool has_lock = false);
 
     // Pause commands
     void Pause(void);
@@ -176,6 +180,8 @@
     int ReadDirect(void *buf, int count, bool peek);
     bool WaitForReadsAllowed(void);
     bool WaitForAvail(int count);
+    virtual long long GetRealFileSizeInternal(void) const { return -1; }
+    virtual long long SeekInternal(long long pos, int whence) = 0;
 
     int ReadBufFree(void) const;
     int ReadBufAvail(void) const;
@@ -245,6 +251,10 @@
 
     long long readAdjust;         // protected by rwlock
 
+    // Internal RingBuffer Method
+    int       readOffset;         // protected by rwlock
+    bool      readInternalMode;   // protected by rwlock
+
     // bitrate monitors
     bool              bitrateMonitorEnabled;
     QMutex            decoderReadLock;
@@ -268,6 +278,7 @@
 
   private:
     static bool gAVformat_net_initialised;
+    bool bitrateInitialized;
 };
 
 #endif // _RINGBUFFER_H_
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/streamingringbuffer.cpp mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/streamingringbuffer.cpp
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/streamingringbuffer.cpp	2014-05-05 12:02:12.954138789 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/streamingringbuffer.cpp	2014-05-05 12:02:30.604038739 +0200
@@ -80,11 +80,11 @@
     }
 
     rwlock.unlock();
-    
+
     return true;
 }
 
-long long StreamingRingBuffer::Seek(long long pos, int whence, bool has_lock)
+long long StreamingRingBuffer::SeekInternal(long long pos, int whence)
 {
     if (!m_context)
         return 0;
@@ -127,7 +127,7 @@
     return len;
 }
 
-long long StreamingRingBuffer::GetRealFileSize(void) const
+long long StreamingRingBuffer::GetRealFileSizeInternal(void) const
 {
     long long result = -1;
     rwlock.lockForRead();
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/streamingringbuffer.h mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/streamingringbuffer.h
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/streamingringbuffer.h	2014-05-05 12:02:12.954138789 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/streamingringbuffer.h	2014-05-05 12:02:30.634038570 +0200
@@ -18,14 +18,14 @@
     virtual long long GetReadPosition(void) const;
     virtual bool OpenFile(const QString &lfilename,
                           uint retry_ms = kDefaultOpenTimeout);
-    virtual long long Seek(long long pos, int whence, bool has_lock);
-    virtual long long GetRealFileSize(void) const;
     virtual bool IsStreamed(void)       { return m_streamed;   }
     virtual bool IsSeekingAllowed(void) { return m_allowSeeks; }
     virtual bool IsBookmarkAllowed(void) { return false; }
 
   protected:
     virtual int safe_read(void *data, uint sz);
+    virtual long long GetRealFileSizeInternal(void) const;
+    virtual long long SeekInternal(long long pos, int whence);
 
   private:
     URLContext *m_context;
