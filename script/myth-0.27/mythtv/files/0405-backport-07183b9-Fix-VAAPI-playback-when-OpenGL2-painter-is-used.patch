From 07183b9a8fabde4671757d31bfcf8c54271cf73f Mon Sep 17 00:00:00 2001
From: Jean-Yves Avenard <jyavenard@mythtv.org>
Date: Sun, 8 Jun 2014 21:01:18 +1000
Subject: [PATCH] Fix VAAPI playback when OpenGL2 painter is used

For some reasons, VAAPI doesn't work with the OpenGL2 painter, instead you get a black window.
As I do not have at present the skills to identify the issue, implement a work around:
- If we are using the OpenGL1 painter, re-use the main UI painter
- If not, create a new OpenGL1 render context and use it instead.

This also allows to use VAAPI with the Qt painter (the requirement that OpenGL be present is still present) and not just error-out
---
 mythtv/libs/libmythtv/vaapicontext.cpp         |   44 +++++++++++--------
 mythtv/libs/libmythtv/vaapicontext.h           |    6 ++-
 mythtv/libs/libmythtv/videodisplayprofile.cpp  |    2 +-
 mythtv/libs/libmythtv/videoout_opengl.h        |    2 +-
 mythtv/libs/libmythtv/videoout_openglvaapi.cpp |   55 +++++++++++++++++++++++-
 mythtv/libs/libmythtv/videoout_openglvaapi.h   |    3 ++
 6 files changed, 88 insertions(+), 24 deletions(-)

diff --git a/mythtv/libs/libmythtv/vaapicontext.cpp b/mythtv/libs/libmythtv/vaapicontext.cpp
index c7aa09d..4b6f075 100644
--- a/mythtv/libs/libmythtv/vaapicontext.cpp
+++ b/mythtv/libs/libmythtv/vaapicontext.cpp
@@ -77,11 +77,11 @@ VAProfile preferredProfile(MythCodecID codec)
 class VAAPIDisplay : ReferenceCounter
 {
   protected:
-    VAAPIDisplay(VAAPIDisplayType display_type) :
+    VAAPIDisplay(VAAPIDisplayType display_type, MythRenderOpenGL *render) :
         ReferenceCounter("VAAPIDisplay"),
         m_va_disp_type(display_type),
         m_va_disp(NULL), m_x_disp(NULL),
-        m_driver() { }
+        m_driver(), m_render(render) { }
   public:
    ~VAAPIDisplay()
     {
@@ -108,22 +108,25 @@ class VAAPIDisplay : ReferenceCounter
 
         if (m_va_disp_type == kVADisplayGLX)
         {
-            MythMainWindow *mw = GetMythMainWindow();
-            if (!mw)
-                return false;
-            MythRenderOpenGL *gl =
-                static_cast<MythRenderOpenGL*>(mw->GetRenderDevice());
-            if (!gl)
+            if (!m_render)
             {
-                LOG(VB_PLAYBACK, LOG_ERR, LOC +
-                    QString("Failed to get OpenGL context - you must use the "
-                            "OpenGL UI painter for VAAPI GLX support."));
-                return false;
+                MythMainWindow *mw = GetMythMainWindow();
+                if (!mw)
+                    return false;
+                m_render =
+                    dynamic_cast<MythRenderOpenGL*>(mw->GetRenderDevice());
+                if (!m_render || m_render->Type() != kRenderOpenGL1)
+                {
+                    LOG(VB_PLAYBACK, LOG_ERR, LOC +
+                        QString("Failed to get OpenGL context - you must use the "
+                                "OpenGL 1.0 UI painter for VAAPI GLX support."));
+                    return false;
+                }
             }
 
-            gl->makeCurrent();
+            m_render->makeCurrent();
             Display *display = glXGetCurrentDisplay();
-            gl->doneCurrent();
+            m_render->doneCurrent();
 
             m_va_disp = vaGetDisplayGLX(display);
         }
@@ -185,11 +188,12 @@ class VAAPIDisplay : ReferenceCounter
         return ret;
     }
 
-    static VAAPIDisplay *GetDisplay(VAAPIDisplayType display_type, bool noreuse)
+    static VAAPIDisplay *GetDisplay(VAAPIDisplayType display_type, bool noreuse,
+                                    MythRenderOpenGL *render)
     {
         if (noreuse)
         {
-            VAAPIDisplay *tmp = new VAAPIDisplay(display_type);
+            VAAPIDisplay *tmp = new VAAPIDisplay(display_type, render);
             if (tmp->Create())
             {
                 return tmp;
@@ -212,7 +216,7 @@ class VAAPIDisplay : ReferenceCounter
             return s_VAAPIDisplay;
         }
 
-        s_VAAPIDisplay = new VAAPIDisplay(display_type);
+        s_VAAPIDisplay = new VAAPIDisplay(display_type, render);
         if (s_VAAPIDisplay->Create())
             return s_VAAPIDisplay;
 
@@ -226,6 +230,7 @@ class VAAPIDisplay : ReferenceCounter
     void                *m_va_disp;
     MythXDisplay        *m_x_disp;
     QString              m_driver;
+    MythRenderOpenGL    *m_render;
 };
 
 QMutex VAAPIDisplay::s_VAAPIDisplayLock(QMutex::Recursive);
@@ -309,11 +314,12 @@ VAAPIContext::~VAAPIContext()
     LOG(VB_PLAYBACK, LOG_INFO, LOC + "Deleted context");
 }
 
-bool VAAPIContext::CreateDisplay(QSize size, bool noreuse)
+bool VAAPIContext::CreateDisplay(QSize size, bool noreuse,
+                                 MythRenderOpenGL *render)
 {
     m_size = size;
     bool ok = true;
-    m_display = VAAPIDisplay::GetDisplay(m_dispType, noreuse);
+    m_display = VAAPIDisplay::GetDisplay(m_dispType, noreuse, render);
     CREATE_CHECK(!m_size.isEmpty(), "Invalid size");
     CREATE_CHECK(m_display != NULL, "Invalid display");
     CREATE_CHECK(InitDisplay(),     "Invalid VADisplay");
diff --git a/mythtv/libs/libmythtv/vaapicontext.h b/mythtv/libs/libmythtv/vaapicontext.h
index 018afe8..ce5fce4 100644
--- a/mythtv/libs/libmythtv/vaapicontext.h
+++ b/mythtv/libs/libmythtv/vaapicontext.h
@@ -19,6 +19,7 @@ struct vaapi_surface
 
 class VAAPIDisplay;
 class OpenGLVideo;
+class MythRenderOpenGL;
 
 enum VAAPIDisplayType
 {
@@ -34,11 +35,12 @@ class VAAPIContext
     VAAPIContext(VAAPIDisplayType display_type, MythCodecID codec);
    ~VAAPIContext();
 
-    bool  CreateDisplay(QSize size, bool noreuse = false);
+    bool  CreateDisplay(QSize size, bool noreuse = false, 
+                        MythRenderOpenGL *render = NULL);
     bool  CreateBuffers(void);
     void* GetVideoSurface(int i);
     uint8_t* GetSurfaceIDPointer(void* buf);
-    
+
     int   GetNumBuffers(void)        const { return m_numSurfaces; }
     PixelFormat GetPixelFormat(void) const { return m_pix_fmt;     }
 
diff --git a/mythtv/libs/libmythtv/videodisplayprofile.cpp b/mythtv/libs/libmythtv/videodisplayprofile.cpp
index c5d28c3..9bb064b 100644
--- a/mythtv/libs/libmythtv/videodisplayprofile.cpp
+++ b/mythtv/libs/libmythtv/videodisplayprofile.cpp
@@ -687,7 +687,7 @@ QString VideoDisplayProfile::GetDecoderHelp(QString decoder)
     if (decoder == "vaapi")
         msg += QObject::tr(
             "VAAPI will attempt to use the graphics hardware to "
-            "accelerate video decoding. REQUIRES OPENGL PAINTER.");
+            "accelerate video decoding. Requires OpenGL.");
 
     if (decoder == "vda")
         msg += QObject::tr(
diff --git a/mythtv/libs/libmythtv/videoout_opengl.h b/mythtv/libs/libmythtv/videoout_opengl.h
index ba67ef9..cb66958 100644
--- a/mythtv/libs/libmythtv/videoout_opengl.h
+++ b/mythtv/libs/libmythtv/videoout_opengl.h
@@ -72,7 +72,7 @@ class VideoOutputOpenGL : public VideoOutput
     void DestroyGPUResources(void);
     virtual bool CreateBuffers(void);
     bool CreatePauseFrame(void);
-    bool SetupContext(void);
+    virtual bool SetupContext(void);
     bool SetupOpenGL(void);
     void CreatePainter(void);
 
diff --git a/mythtv/libs/libmythtv/videoout_openglvaapi.cpp b/mythtv/libs/libmythtv/videoout_openglvaapi.cpp
index 53a4bc4..1da3f49 100644
--- a/mythtv/libs/libmythtv/videoout_openglvaapi.cpp
+++ b/mythtv/libs/libmythtv/videoout_openglvaapi.cpp
@@ -1,5 +1,6 @@
 #include "videoout_openglvaapi.h"
 #include "vaapicontext.h"
+#include "mythmainwindow.h"
 
 #define LOC QString("VidOutGLVAAPI: ")
 #define ERR QString("VidOutGLVAAPI Error: ")
@@ -132,7 +133,8 @@ bool VideoOutputOpenGLVAAPI::CreateVAAPIContext(QSize size)
         DeleteVAAPIContext();
 
     m_ctx = new VAAPIContext(kVADisplayGLX, video_codec_id);
-    if (m_ctx && m_ctx->CreateDisplay(size) && m_ctx->CreateBuffers())
+    if (m_ctx && m_ctx->CreateDisplay(size, false, gl_context) &&
+        m_ctx->CreateBuffers())
     {
         int num_buffers = m_ctx->GetNumBuffers();
         const QSize video_dim = window.GetActualVideoDim();
@@ -310,3 +312,54 @@ MythCodecID VideoOutputOpenGLVAAPI::GetBestSupportedCodec(
     pix_fmt = fmt;
     return test_cid;
 }
+
+bool VideoOutputOpenGLVAAPI::SetupContext(void)
+{
+    QMutexLocker locker(&gl_context_lock);
+
+    if (gl_context)
+    {
+        LOG(VB_PLAYBACK, LOG_INFO, LOC + QString("Re-using context"));
+        return true;
+    }
+
+    MythMainWindow* win = MythMainWindow::getMainWindow();
+    if (!win)
+    {
+        LOG(VB_GENERAL, LOG_ERR, LOC + "Failed to get MythMainWindow");
+        return false;
+    }
+
+    gl_context = dynamic_cast<MythRenderOpenGL*>(win->GetRenderDevice());
+
+    if (gl_context && gl_context->Type() == kRenderOpenGL1)
+    {
+        gl_context->IncrRef();
+        LOG(VB_PLAYBACK, LOG_INFO, LOC + "Using main UI render context");
+        return true;
+    }
+
+    QWidget *device = QWidget::find(gl_parent_win);
+    if (!device)
+    {
+        LOG(VB_GENERAL, LOG_ERR, LOC + "Failed to find parent window");
+        return false;
+    }
+
+    gl_context = MythRenderOpenGL::Create(OPENGL_PAINTER, device);
+    if (gl_context && gl_context->create())
+    {
+        gl_context->Init();
+        LOG(VB_GENERAL, LOG_INFO, LOC +
+            "Created MythRenderOpenGL 1.x device.");
+        return true;
+    }
+
+    LOG(VB_GENERAL, LOG_ERR, LOC +
+        "Failed to create MythRenderOpenGL 1.x device.");
+    if (gl_context)
+        gl_context->DecrRef();
+    gl_context = NULL;
+
+    return false;
+}
diff --git a/mythtv/libs/libmythtv/videoout_openglvaapi.h b/mythtv/libs/libmythtv/videoout_openglvaapi.h
index 54e5bb5..2792bf7 100644
--- a/mythtv/libs/libmythtv/videoout_openglvaapi.h
+++ b/mythtv/libs/libmythtv/videoout_openglvaapi.h
@@ -48,6 +48,9 @@ class VideoOutputOpenGLVAAPI : public VideoOutputOpenGL
                                              bool no_acceleration,
                                              PixelFormat &pix_fmt);
 
+  protected:
+    virtual bool SetupContext(void);
+
   private:
     VAAPIContext *m_ctx;
     void         *m_pauseBuffer;
-- 
1.7.10.2

