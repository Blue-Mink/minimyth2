From 974d1ae9b6fe2f12b8cfc48aafcf10fc730e414e Mon Sep 17 00:00:00 2001
From: Jim Stichnoth <jstichnoth@mythtv.org>
Date: Mon, 4 May 2015 22:38:58 -0700
Subject: [PATCH] Reduce "Watch Recordings" sluggishness by caching jobqueue
 state.

Refs #8962, refs #7990.

This is essentially a cherry-pick of b43b11ca.
---
 mythtv/libs/libmythtv/jobqueue.cpp           |   26 +++++-----
 mythtv/libs/libmythtv/jobqueue.h             |    2 +
 mythtv/programs/mythfrontend/playbackbox.cpp |   68 +++++++++++++++++++++++---
 mythtv/programs/mythfrontend/playbackbox.h   |   27 ++++++++++
 4 files changed, 103 insertions(+), 20 deletions(-)

diff --git a/mythtv/libs/libmythtv/jobqueue.cpp b/mythtv/libs/libmythtv/jobqueue.cpp
index f426309..ff79a47 100644
--- a/mythtv/libs/libmythtv/jobqueue.cpp
+++ b/mythtv/libs/libmythtv/jobqueue.cpp
@@ -1062,16 +1062,21 @@ int JobQueue::GetRunningJobID(uint chanid, const QDateTime &recstartts)
     return 0;
 }
 
-bool JobQueue::IsJobRunning(int jobType,
-                            uint chanid, const QDateTime &recstartts)
+bool JobQueue::IsJobStatusQueued(int status)
 {
-    int tmpStatus = GetJobStatus(jobType, chanid, recstartts);
+    return (status == JOB_QUEUED);
+}
 
-    if ((tmpStatus != JOB_UNKNOWN) && (tmpStatus != JOB_QUEUED) &&
-        (!(tmpStatus & JOB_DONE)))
-        return true;
+bool JobQueue::IsJobStatusRunning(int status)
+{
+    return ((status != JOB_UNKNOWN) && (status != JOB_QUEUED) &&
+            (!(status & JOB_DONE)));
+}
 
-    return false;
+bool JobQueue::IsJobRunning(int jobType,
+                            uint chanid, const QDateTime &recstartts)
+{
+    return IsJobStatusRunning(GetJobStatus(jobType, chanid, recstartts));
 }
 
 bool JobQueue::IsJobRunning(int jobType, const ProgramInfo &pginfo)
@@ -1094,12 +1099,7 @@ bool JobQueue::IsJobQueuedOrRunning(
 bool JobQueue::IsJobQueued(
     int jobType, uint chanid, const QDateTime &recstartts)
 {
-    int tmpStatus = GetJobStatus(jobType, chanid, recstartts);
-
-    if (tmpStatus & JOB_QUEUED)
-        return true;
-
-    return false;
+    return IsJobStatusQueued(GetJobStatus(jobType, chanid, recstartts));
 }
 
 QString JobQueue::JobText(int jobType)
diff --git a/mythtv/libs/libmythtv/jobqueue.h b/mythtv/libs/libmythtv/jobqueue.h
index e799912..ee7dcaa 100644
--- a/mythtv/libs/libmythtv/jobqueue.h
+++ b/mythtv/libs/libmythtv/jobqueue.h
@@ -161,6 +161,8 @@ class MTV_PUBLIC JobQueue : public QObject, public QRunnable
     static bool IsJobRunning(int jobType, const ProgramInfo &pginfo);
     static bool IsJobQueued(int jobType,
                             uint chanid, const QDateTime &recstartts);
+    static bool IsJobStatusQueued(int status);
+    static bool IsJobStatusRunning(int status);
     static bool PauseJob(int jobID);
     static bool ResumeJob(int jobID);
     static bool RestartJob(int jobID);
diff --git a/mythtv/programs/mythfrontend/playbackbox.cpp b/mythtv/programs/mythfrontend/playbackbox.cpp
index d01293f..18ba2ac 100644
--- a/mythtv/programs/mythfrontend/playbackbox.cpp
+++ b/mythtv/programs/mythfrontend/playbackbox.cpp
@@ -280,17 +280,17 @@ static QString extract_main_state(const ProgramInfo &pginfo, const TV *player)
     return state;
 }
 
-static QString extract_job_state(const ProgramInfo &pginfo)
+QString PlaybackBox::extract_job_state(const ProgramInfo &pginfo)
 {
     QString job = "default";
 
     if (pginfo.GetRecordingStatus() == rsRecording)
         job = "recording";
-    else if (JobQueue::IsJobQueuedOrRunning(
+    else if (m_jobQueue.IsJobQueuedOrRunning(
                  JOB_TRANSCODE, pginfo.GetChanID(),
                  pginfo.GetRecordingStartTime()))
         job = "transcoding";
-    else if (JobQueue::IsJobQueuedOrRunning(
+    else if (m_jobQueue.IsJobQueuedOrRunning(
                  JOB_COMMFLAG,  pginfo.GetChanID(),
                  pginfo.GetRecordingStartTime()))
         job = "commflagging";
@@ -298,15 +298,16 @@ static QString extract_job_state(const ProgramInfo &pginfo)
     return job;
 }
 
-static QString extract_commflag_state(const ProgramInfo &pginfo)
+QString PlaybackBox::extract_commflag_state(const ProgramInfo &pginfo)
 {
     QString job = "default";
 
     // commflagged can be yes, no or processing
-    if (JobQueue::IsJobRunning(JOB_COMMFLAG, pginfo))
+    if (m_jobQueue.IsJobRunning(JOB_COMMFLAG, pginfo.GetChanID(),
+                                pginfo.GetRecordingStartTime()))
         return "running";
-    if (JobQueue::IsJobQueued(JOB_COMMFLAG, pginfo.GetChanID(),
-                              pginfo.GetRecordingStartTime()))
+    if (m_jobQueue.IsJobQueued(JOB_COMMFLAG, pginfo.GetChanID(),
+                               pginfo.GetRecordingStartTime()))
         return "queued";
 
     return (pginfo.GetProgramFlags() & FL_COMMFLAG ? "yes" : "no");
@@ -5535,4 +5536,57 @@ void HelpPopup::addItem(const QString &state, const QString &text)
     item->DisplayState(state, "icons");
 }
 
+void PlaybackBox::PbbJobQueue::Update()
+{
+    QDateTime now = QDateTime::currentDateTime();
+    if (!m_lastUpdated.isValid() ||
+        m_lastUpdated.msecsTo(now) >= kInvalidateTimeMs)
+    {
+        QMap<int, JobQueueEntry> jobs;
+        JobQueue::GetJobsInQueue(jobs, JOB_LIST_ALL);
+        m_jobs.clear();
+        for (int i = 0; i < jobs.size(); ++i)
+        {
+            JobQueueEntry &entry = jobs[i];
+            m_jobs.insert(qMakePair(entry.chanid, entry.recstartts), entry);
+        }
+        m_lastUpdated = now;
+    }
+}
+
+bool PlaybackBox::PbbJobQueue::IsJobQueued(int jobType, uint chanid,
+                                           const QDateTime &recstartts)
+{
+    Update();
+    QList<JobQueueEntry> values = m_jobs.values(qMakePair(chanid, recstartts));
+    QList<JobQueueEntry>::const_iterator iter, end = values.end();
+    for (iter = values.begin(); iter != end; ++iter)
+    {
+        if (iter->type == jobType)
+            return JobQueue::IsJobStatusQueued(iter->status);
+    }
+    return false;
+}
+
+bool PlaybackBox::PbbJobQueue::IsJobRunning(int jobType, uint chanid,
+                                            const QDateTime &recstartts)
+{
+    Update();
+    QList<JobQueueEntry> values = m_jobs.values(qMakePair(chanid, recstartts));
+    QList<JobQueueEntry>::const_iterator iter, end = values.end();
+    for (iter = values.begin(); iter != end; ++iter)
+    {
+        if (iter->type == jobType)
+            return JobQueue::IsJobStatusRunning(iter->status);
+    }
+    return false;
+}
+
+bool PlaybackBox::PbbJobQueue::IsJobQueuedOrRunning(int jobType, uint chanid,
+                                                    const QDateTime &recstartts)
+{
+    return IsJobQueued(jobType, chanid, recstartts) ||
+        IsJobRunning(jobType, chanid, recstartts);
+}
+
 /* vim: set expandtab tabstop=4 shiftwidth=4: */
diff --git a/mythtv/programs/mythfrontend/playbackbox.h b/mythtv/programs/mythfrontend/playbackbox.h
index 836c433..444ab75 100644
--- a/mythtv/programs/mythfrontend/playbackbox.h
+++ b/mythtv/programs/mythfrontend/playbackbox.h
@@ -13,6 +13,7 @@ using namespace std;
 
 #include <QStringList>
 #include <QDateTime>
+#include <QMultiMap>
 #include <QObject>
 #include <QMutex>
 #include <QMap>
@@ -336,6 +337,9 @@ class PlaybackBox : public ScheduleCommon
 
     QString CreateProgramInfoString(const ProgramInfo &program) const;
 
+    QString extract_job_state(const ProgramInfo &pginfo);
+    QString extract_commflag_state(const ProgramInfo &pginfo);
+
 
     QRegExp m_prefixes;   ///< prefixes to be ignored when sorting
     QRegExp m_titleChaff; ///< stuff to remove for search rules
@@ -444,6 +448,29 @@ class PlaybackBox : public ScheduleCommon
     bool                m_usingGroupSelector;
     bool                m_groupSelected;
     bool                m_passwordEntered;
+
+    // This class caches the contents of the jobqueue table to avoid excessive
+    // DB queries each time the PBB selection changes (currently 4 queries per
+    // displayed item).  The cache remains valid for 15 seconds
+    // (kInvalidateTimeMs).
+    class PbbJobQueue
+    {
+    public:
+        PbbJobQueue() { Update(); }
+        bool IsJobQueued(int jobType, uint chanid,
+                         const QDateTime &recstartts);
+        bool IsJobRunning(int jobType, uint chanid,
+                          const QDateTime &recstartts);
+        bool IsJobQueuedOrRunning(int jobType, uint chanid,
+                                  const QDateTime &recstartts);
+    private:
+        static const qint64 kInvalidateTimeMs = 15000;
+        void Update();
+        QDateTime m_lastUpdated;
+        // Maps <chanid, recstartts> to a set of JobQueueEntry values.
+        typedef QMultiMap<QPair<uint, QDateTime>, JobQueueEntry> MapType;
+        MapType m_jobs;
+    } m_jobQueue;
 };
 
 class GroupSelector : public MythScreenType
-- 
1.7.10.2

