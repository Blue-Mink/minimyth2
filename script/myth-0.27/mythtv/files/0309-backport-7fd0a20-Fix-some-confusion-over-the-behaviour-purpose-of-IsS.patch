diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmyth/programinfo.cpp mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmyth/programinfo.cpp
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmyth/programinfo.cpp	2014-05-05 11:58:55.175264229 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmyth/programinfo.cpp	2014-05-05 11:59:11.331838657 +0200
@@ -2008,7 +2008,7 @@
  *  \brief Checks for duplicates according to dupmethod.
  *  \param other ProgramInfo to compare this one with.
  */
-bool ProgramInfo::IsSameProgram(const ProgramInfo& other) const
+bool ProgramInfo::IsDuplicateProgram(const ProgramInfo& other) const
 {
     if (GetRecordingRuleType() == kOneRecord)
         return recordid == other.recordid;
@@ -2071,6 +2071,65 @@
     return true;
 }
 
+/**
+*  \brief Checks whether this is the same program as "other", which may or may
+*         not be a repeat or on another channel. Matches based on programid
+*         with a fallback to dupmethod
+*  \param other ProgramInfo to compare this one with.
+*/
+bool ProgramInfo::IsSameProgram(const ProgramInfo& other) const
+{
+   if (title.compare(other.title, Qt::CaseInsensitive) != 0)
+       return false;
+
+   if (!programid.isEmpty() && !other.programid.isEmpty())
+   {
+       if (catType == kCategorySeries)
+       {
+           if (programid.endsWith("0000"))
+               return false;
+       }
+
+       if (usingProgIDAuth)
+       {
+           int index = programid.indexOf('/');
+           int oindex = other.programid.indexOf('/');
+           if (index == oindex && (index < 0 ||
+               programid.leftRef(index) == other.programid.leftRef(oindex)))
+               return programid == other.programid;
+       }
+       else
+       {
+           return programid == other.programid;
+       }
+   }
+
+   if ((dupmethod & kDupCheckSub) &&
+       ((subtitle.isEmpty()) ||
+        (subtitle.compare(other.subtitle, Qt::CaseInsensitive) != 0)))
+       return false;
+
+   if ((dupmethod & kDupCheckDesc) &&
+       ((description.isEmpty()) ||
+        (description.compare(other.description, Qt::CaseInsensitive) != 0)))
+       return false;
+
+   if ((dupmethod & kDupCheckSubThenDesc) &&
+       ((subtitle.isEmpty() &&
+         ((!other.subtitle.isEmpty() &&
+           description.compare(other.subtitle, Qt::CaseInsensitive) != 0) ||
+          (other.subtitle.isEmpty() &&
+           description.compare(other.description, Qt::CaseInsensitive) != 0))) ||
+        (!subtitle.isEmpty() &&
+         ((other.subtitle.isEmpty() &&
+           subtitle.compare(other.description, Qt::CaseInsensitive) != 0) ||
+          (!other.subtitle.isEmpty() &&
+           subtitle.compare(other.subtitle, Qt::CaseInsensitive) != 0)))))
+       return false;
+
+   return true;
+}
+
 /** \fn ProgramInfo::IsSameTimeslot(const ProgramInfo&) const
  *  \brief Checks chanid, start/end times for equality.
  *  \param other ProgramInfo to compare this one with.
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmyth/programinfo.h mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmyth/programinfo.h
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmyth/programinfo.h	2014-05-05 11:58:55.175264229 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmyth/programinfo.h	2014-05-05 11:59:11.358505171 +0200
@@ -291,7 +291,8 @@
     virtual void SubstituteMatches(QString &str);
 
     // Used for scheduling recordings
-    bool IsSameProgram(const ProgramInfo &other) const;
+    bool IsSameProgram(const ProgramInfo &other) const; // Exact same program
+    bool IsDuplicateProgram(const ProgramInfo &other) const; // Is this program considered a duplicate according to rule type and dup method (scheduler only)
     bool IsSameTimeslot(const ProgramInfo &other) const;
     bool IsSameProgramTimeslot(const ProgramInfo &other) const;//sched only
     static bool UsingProgramIDAuthority(void)
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/programs/mythbackend/scheduler.cpp mythtv-0.27-20140504-ge2acf0d-new/mythtv/programs/mythbackend/scheduler.cpp
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/programs/mythbackend/scheduler.cpp	2014-05-05 11:58:56.388590633 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/programs/mythbackend/scheduler.cpp	2014-05-05 11:59:11.461837914 +0200
@@ -1023,7 +1023,7 @@
     if (it != cache_is_same_program.end())
         return *it;
 
-    return cache_is_same_program[X] = a->IsSameProgram(*b);
+    return cache_is_same_program[X] = a->IsDuplicateProgram(*b);
 }
 
 bool Scheduler::FindNextConflict(
