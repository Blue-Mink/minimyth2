diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/channelutil.cpp mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/channelutil.cpp
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/channelutil.cpp	2014-05-05 11:52:13.777573930 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/channelutil.cpp	2014-05-05 11:52:31.220806145 +0200
@@ -2354,6 +2354,37 @@
     }
 }
 
+// Return the array index of the best matching channel.  An exact
+// match is the best match.  Otherwise, find the closest numerical
+// value greater than channum.  E.g., if the channel list is {2_1,
+// 2_2, 4_1, 4_2, 300} then input 3 returns 2_2, input 4 returns 2_2,
+// and input 5 returns 4_2.
+//
+// The list does not need to be sorted.
+int ChannelUtil::GetNearestChannel(const ChannelInfoList &list,
+                                   const QString &channum)
+{
+    ChannelInfo target;
+    target.channum = channum;
+    int b = -1; // index of best seen so far
+    for (int i = 0; i < (int)list.size(); ++i)
+    {
+        // Index i is a better result if any of the following hold:
+        //   i is the first element seen
+        //   i < target < best (i.e., i is the first one less than the target)
+        //   best < i < target
+        //   target < i < best
+        if ((b < 0) ||
+            (lt_smart(list[i], target) && lt_smart(target,  list[b])) ||
+            (lt_smart(list[b], list[i]) && lt_smart(list[i], target)) ||
+            (lt_smart(target,  list[i]) && lt_smart(list[i], list[b])))
+        {
+            b = i;
+        }
+    }
+    return b;
+}
+
 uint ChannelUtil::GetNextChannel(
     const ChannelInfoList &sorted,
     uint              old_chanid,
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/channelutil.h mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/channelutil.h
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/channelutil.h	2014-05-05 11:52:13.777573930 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/channelutil.h	2014-05-05 11:52:31.510804466 +0200
@@ -214,6 +214,8 @@
     static uint    GetChannelCount(int sourceid = -1);
     static void    SortChannels(ChannelInfoList &list, const QString &order,
                                 bool eliminate_duplicates = false);
+    static int     GetNearestChannel(const ChannelInfoList &list,
+                                     const QString &channum);
 
     static uint    GetNextChannel(const ChannelInfoList &sorted,
                                   uint old_chanid,
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/programs/mythfrontend/guidegrid.cpp mythtv-0.27-20140504-ge2acf0d-new/mythtv/programs/mythfrontend/guidegrid.cpp
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/programs/mythfrontend/guidegrid.cpp	2014-05-05 11:52:19.614206754 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/programs/mythfrontend/guidegrid.cpp	2014-05-05 11:52:31.647470343 +0200
@@ -1182,7 +1182,7 @@
 
     if (gotostartchannel)
     {
-        int ch = FindChannel(m_startChanID, m_startChanNum);
+        int ch = FindChannel(m_startChanID, m_startChanNum, false);
         m_currentStartChannel = (uint) max(0, ch);
     }
 
@@ -1241,52 +1241,20 @@
     if (exact || channum.isEmpty())
         return -1;
 
-    // then check partial channum, first only
-    for (i = 0; i < GetChannelCount(); ++i)
-    {
-        if (m_channelInfos[i][0].channum.left(channum.length()) == channum)
-            return i;
-    }
-
-    // then check all partial channum
+    ChannelInfoList list;
+    QVector<int> idxList;
     for (i = 0; i < GetChannelCount(); ++i)
     {
         for (uint j = 0; j < m_channelInfos[i].size(); ++j)
         {
-            if (m_channelInfos[i][j].channum.left(channum.length()) == channum)
-                return i;
+            list.push_back(m_channelInfos[i][j]);
+            idxList.push_back(i);
         }
     }
-
-    // then check all channum with "_" for subchannels
-    QMutexLocker locker(&chanSepRegExpLock);
-    QString tmpchannum = channum;
-    if (tmpchannum.contains(chanSepRegExp))
-    {
-        tmpchannum.replace(chanSepRegExp, "_");
-    }
-    else if (channum.length() >= 2)
-    {
-        tmpchannum = channum.left(channum.length() - 1) + '_' +
-            channum.right(1);
-    }
-    else
-    {
-        return -1;
-    }
-
-    for (i = 0; i < GetChannelCount(); ++i)
-    {
-        for (uint j = 0; j < m_channelInfos[i].size(); ++j)
-        {
-            QString tmp = m_channelInfos[i][j].channum;
-            tmp.replace(chanSepRegExp, "_");
-            if (tmp == tmpchannum)
-                return i;
-        }
-    }
-
-    return -1;
+    int result = ChannelUtil::GetNearestChannel(list, channum);
+    if (result >= 0)
+        result = idxList[result];
+    return result;
 }
 
 void GuideGrid::fillTimeInfos()
