From 1b7bdcfae5bac8993df3432a68f9d880df5e3b03 Mon Sep 17 00:00:00 2001
From: Jean-Yves Avenard <jyavenard@mythtv.org>
Date: Sat, 7 Jun 2014 03:22:57 +1000
Subject: [PATCH 06/13] Simplify some code using new MythAVFrame class

---
 mythtv/libs/libmyth/audio/audiooutpututil.cpp |    8 +++-----
 mythtv/libs/libmythtv/nuppeldecoder.cpp       |   24 ++++++++----------------
 mythtv/libs/libmythtv/nuppeldecoder.h         |    1 -
 3 files changed, 11 insertions(+), 22 deletions(-)

diff --git a/mythtv/libs/libmyth/audio/audiooutpututil.cpp b/mythtv/libs/libmyth/audio/audiooutpututil.cpp
index af3c049..03e310d 100644
--- a/mythtv/libs/libmyth/audio/audiooutpututil.cpp
+++ b/mythtv/libs/libmyth/audio/audiooutpututil.cpp
@@ -7,6 +7,7 @@
 #include "audiooutpututil.h"
 #include "audioconvert.h"
 #include "bswap.h"
+#include "libmythtv/mythavutil.h"
 
 extern "C" {
 #include "libavcodec/avcodec.h"
@@ -243,13 +244,13 @@ int AudioOutputUtil::DecodeAudio(AVCodecContext *ctx,
                                  uint8_t *buffer, int &data_size,
                                  const AVPacket *pkt)
 {
-    AVFrame *frame;
+    MythAVFrame frame;
     int got_frame = 0;
     int ret;
     char error[AV_ERROR_MAX_STRING_SIZE];
 
     data_size = 0;
-    if (!(frame = av_frame_alloc()))
+    if (!frame)
     {
         return AVERROR(ENOMEM);
     }
@@ -261,7 +262,6 @@ int AudioOutputUtil::DecodeAudio(AVCodecContext *ctx,
             QString("audio decode error: %1 (%2)")
             .arg(av_make_error_string(error, sizeof(error), ret))
             .arg(got_frame));
-        av_frame_free(&frame);
         return ret;
     }
 
@@ -269,7 +269,6 @@ int AudioOutputUtil::DecodeAudio(AVCodecContext *ctx,
     {
         LOG(VB_AUDIO, LOG_DEBUG, LOC +
             QString("audio decode, no frame decoded (%1)").arg(ret));
-        av_frame_free(&frame);
         return ret;
     }
 
@@ -288,7 +287,6 @@ int AudioOutputUtil::DecodeAudio(AVCodecContext *ctx,
         // data is already compacted... simply copy it
         memcpy(buffer, frame->extended_data[0], data_size);
     }
-    av_frame_free(&frame);
 
     return ret;
 }
diff --git a/mythtv/libs/libmythtv/nuppeldecoder.cpp b/mythtv/libs/libmythtv/nuppeldecoder.cpp
index 446bb7e..83f6091 100644
--- a/mythtv/libs/libmythtv/nuppeldecoder.cpp
+++ b/mythtv/libs/libmythtv/nuppeldecoder.cpp
@@ -23,6 +23,7 @@ using namespace std;
 #include "myth_imgconvert.h"
 #include "programinfo.h"
 #include "audiooutpututil.h"
+#include "mythavutil.h"
 
 #include "minilzo.h"
 
@@ -47,7 +48,7 @@ NuppelDecoder::NuppelDecoder(MythPlayer *parent,
       disablevideo(false), totalLength(0), totalFrames(0), effdsp(0),
       directframe(NULL),            decoded_video_frame(NULL),
       mpa_vidcodec(0), mpa_vidctx(0), mpa_audcodec(0), mpa_audctx(0),
-      m_mpa_pic(NULL), directrendering(false),
+      directrendering(false),
       lastct('1'), strm_buf(0), strm(0), buf(0), buf2(0),
       videosizetotal(0), videoframesread(0), setreadahead(false)
 {
@@ -97,7 +98,6 @@ NuppelDecoder::~NuppelDecoder()
         delete [] strm_buf;
 
     av_freep(&m_audioSamples);
-    av_frame_free(&m_mpa_pic);
 
     while (!StoredData.empty())
     {
@@ -912,18 +912,9 @@ bool NuppelDecoder::DecodeFrame(struct rtframeheader *frameheader,
         if (!mpa_vidcodec)
             InitAVCodecVideo(frameheader->comptype - '3');
 
-        if (!m_mpa_pic)
-        {
-            if (!(m_mpa_pic = av_frame_alloc()))
-            {
-                LOG(VB_GENERAL, LOG_ERR, "DecodeFrame: Out of memory");
-                return false;
-            }
-        }
-        else
-        {
-            av_frame_unref(m_mpa_pic);
-        }
+        MythAVFrame mpa_pic;
+        if (!mpa_pic)
+            return false;
         AVPacket pkt;
         av_init_packet(&pkt);
         pkt.data = lstrm;
@@ -933,7 +924,7 @@ bool NuppelDecoder::DecodeFrame(struct rtframeheader *frameheader,
             QMutexLocker locker(avcodeclock);
             // if directrendering, writes into buf
             int gotpicture = 0;
-            int ret = avcodec_decode_video2(mpa_vidctx, m_mpa_pic, &gotpicture,
+            int ret = avcodec_decode_video2(mpa_vidctx, mpa_pic, &gotpicture,
                                             &pkt);
             directframe = NULL;
             if (ret < 0)
@@ -974,8 +965,9 @@ bool NuppelDecoder::DecodeFrame(struct rtframeheader *frameheader,
         avpicture_fill(&tmppicture, outbuf, PIX_FMT_YUV420P, video_width,
                        video_height);
 
+        AVFrame *tmp = mpa_pic;
         myth_sws_img_convert(
-            &tmppicture, PIX_FMT_YUV420P, (AVPicture *)m_mpa_pic,
+            &tmppicture, PIX_FMT_YUV420P, (AVPicture *)tmp,
                     mpa_vidctx->pix_fmt, video_width, video_height);
     }
 
diff --git a/mythtv/libs/libmythtv/nuppeldecoder.h b/mythtv/libs/libmythtv/nuppeldecoder.h
index 4a4930a..896f7ea 100644
--- a/mythtv/libs/libmythtv/nuppeldecoder.h
+++ b/mythtv/libs/libmythtv/nuppeldecoder.h
@@ -111,7 +111,6 @@ class NuppelDecoder : public DecoderBase
     AVCodecContext *mpa_audctx;
     AVPicture tmppicture;
     uint8_t *m_audioSamples;
-    AVFrame *m_mpa_pic;
 
     bool directrendering;
 
-- 
1.7.10.2

