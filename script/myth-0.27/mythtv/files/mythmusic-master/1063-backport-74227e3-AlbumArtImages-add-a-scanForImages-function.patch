From 74227e3871e4d63dac57d79b6f8318ff7b777b1e Mon Sep 17 00:00:00 2001
From: Paul Harrison <pharrison@mythtv.org>
Date: Wed, 12 Feb 2014 21:37:08 +0000
Subject: [PATCH 3/3] AlbumArtImages: add a scanForImages() function

This sends a MUSIC_FIND_ALBUMART command to the BE to find any directory and
embedded tag images for a track. The command is sent in its own thread so it
wont block the UI thread.
---
 mythtv/libs/libmythmetadata/musicmetadata.cpp |   55 +++++++++++++++++++++++++
 mythtv/libs/libmythmetadata/musicmetadata.h   |   22 +++++++++-
 2 files changed, 76 insertions(+), 1 deletion(-)

diff --git a/mythtv/libs/libmythmetadata/musicmetadata.cpp b/mythtv/libs/libmythmetadata/musicmetadata.cpp
index cc1094a..53d8b7c 100644
--- a/mythtv/libs/libmythmetadata/musicmetadata.cpp
+++ b/mythtv/libs/libmythmetadata/musicmetadata.cpp
@@ -1766,6 +1766,61 @@ void AlbumArtImages::findImages(void)
     }
 }
 
+void AlbumArtImages::scanForImages()
+{
+    MythScreenStack *popupStack = GetMythMainWindow()->GetStack("popup stack");
+    MythUIBusyDialog *busy = new MythUIBusyDialog(tr("Scanning for music album art..."),
+                                                  popupStack, "scanbusydialog");
+
+    if (busy->Create())
+    {
+        popupStack->AddScreen(busy, false);
+    }
+    else
+    {
+        delete busy;
+        busy = NULL;
+    }
+
+    QStringList strList(QString("MUSIC_FIND_ALBUMART %1 %2 0")
+                                .arg(m_parent->Hostname())
+                                .arg(m_parent->ID()));
+
+    AlbumArtScannerThread *scanThread = new AlbumArtScannerThread(strList);
+    scanThread->start();
+
+    while (scanThread->isRunning())
+    {
+        qApp->processEvents();
+        usleep(1000);
+    }
+
+    strList = scanThread->getResult();
+
+    delete scanThread;
+
+    if (busy)
+        busy->Close();
+
+    while (!m_imageList.empty())
+    {
+        delete m_imageList.back();
+        m_imageList.pop_back();
+    }
+
+    for (int x = 2; (x < strList.count() - 2) / 6; x += 6)
+    {
+        AlbumArtImage *image = new AlbumArtImage;
+        image->id = strList[x].toInt();
+        image->imageType = (ImageType) strList[x + 1].toInt();
+        image->embedded = (strList[x + 2].toInt() == 1);
+        image->description = strList[x + 3];
+        image->filename = strList[x + 4];
+        image->hostname = strList[x + 5];
+        addImage(image);
+    }
+}
+
 AlbumArtImage *AlbumArtImages::getImage(ImageType type)
 {
     AlbumArtList::iterator it = m_imageList.begin();
diff --git a/mythtv/libs/libmythmetadata/musicmetadata.h b/mythtv/libs/libmythmetadata/musicmetadata.h
index 577fb24..35d5874 100644
--- a/mythtv/libs/libmythmetadata/musicmetadata.h
+++ b/mythtv/libs/libmythmetadata/musicmetadata.h
@@ -18,7 +18,8 @@ using namespace std;
 // mythtv
 #include "mythtypes.h"
 #include "mythmetaexp.h"
-#include <mthread.h>
+#include "mthread.h"
+#include "mythcorecontext.h"
 
 class AllMusic;
 class AlbumArtImages;
@@ -443,6 +444,24 @@ class META_PUBLIC AllStream
 
 //----------------------------------------------------------------------------
 
+class AlbumArtScannerThread: public MThread
+{
+  public:
+    AlbumArtScannerThread(QStringList strList) :
+            MThread("AlbumArtScanner"), m_strList(strList) {}
+
+    virtual void run()
+    {
+        RunProlog();
+        gCoreContext->SendReceiveStringList(m_strList);
+        RunEpilog();
+    }
+
+    QStringList getResult(void) { return m_strList; }
+
+  private:
+    QStringList m_strList;
+};
 
 class META_PUBLIC AlbumArtImages
 {
@@ -452,6 +471,7 @@ class META_PUBLIC AlbumArtImages
     AlbumArtImages(MusicMetadata *metadata, bool loadFromDB = true);
     ~AlbumArtImages();
 
+    void           scanForImages(void);
     void           addImage(const AlbumArtImage &newImage);
     uint           getImageCount() { return m_imageList.size(); }
     AlbumArtImage *getImage(ImageType type);
-- 
1.7.10

