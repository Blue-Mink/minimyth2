diff -Naur mythtv-0.27-build-old/mythtv/libs/libmythbase/remotefile.cpp mythtv-0.27-build-new/mythtv/libs/libmythbase/remotefile.cpp
--- mythtv-0.27-build-old/mythtv/libs/libmythbase/remotefile.cpp	2014-03-25 19:07:38.000000000 +0100
+++ mythtv-0.27-build-new/mythtv/libs/libmythbase/remotefile.cpp	2014-03-25 19:43:38.739417205 +0100
@@ -407,30 +407,51 @@
 bool RemoteFile::Exists(const QString &url, struct stat *fileinfo)
 {
     if (isLocal(url))
+        return false;
+
+    QUrl qurl(url);
+    QString filename = qurl.path();
+    QString sgroup   = qurl.userName();
+    QString host     = qurl.host();
+
+    if (isLocal(url) || (gCoreContext->IsMasterBackend() &&
+        host == gCoreContext->GetMasterHostName()))
     {
        LOG(VB_FILE, LOG_INFO,
            QString("RemoteFile::Exists(): looking for local file: %1").arg(url));
 
-        QFileInfo info(url);
-        if (info.exists())
+        bool fileExists = false;
+        QString fullFilePath = "";
+
+        if (url.startsWith("myth:"))
+        {
+            StorageGroup sGroup(sgroup, host);
+            fullFilePath = sGroup.FindFile(filename);
+            if (!fullFilePath.isEmpty())
+                fileExists = true;
+        }
+        else
         {
-            if (stat(url.toLocal8Bit().constData(), fileinfo) == -1)
+            QFileInfo info(url);
+            fileExists = info.exists() && info.isFile();
+            fullFilePath = url;
+        }
+
+        if (fileExists)
+        {
+            if (stat(fullFilePath.toLocal8Bit().constData(), fileinfo) == -1)
             {
                 LOG(VB_FILE, LOG_ERR,
-                    QString("RemoteFile::Exists(): failed to stat file: %1").arg(url) + ENO);
+                    QString("RemoteFile::Exists(): failed to stat file: %1").arg(fullFilePath) + ENO);
             }
         }
 
-        return info.exists() && info.isFile();
+        return fileExists;
     }
 
     LOG(VB_FILE, LOG_INFO,
         QString("RemoteFile::Exists(): looking for remote file: %1").arg(url));
 
-    QUrl qurl(url);
-    QString filename = qurl.path();
-    QString sgroup   = qurl.userName();
-
     if (!qurl.fragment().isEmpty() || url.endsWith("#"))
         filename = filename + "#" + qurl.fragment();
 
diff -Naur mythtv-0.27-build-old/mythtv/libs/libmythmetadata/musicmetadata.cpp mythtv-0.27-build-new/mythtv/libs/libmythmetadata/musicmetadata.cpp
--- mythtv-0.27-build-old/mythtv/libs/libmythmetadata/musicmetadata.cpp	2014-03-25 19:07:38.000000000 +0100
+++ mythtv-0.27-build-new/mythtv/libs/libmythmetadata/musicmetadata.cpp	2014-03-25 19:25:13.600280572 +0100
@@ -3,6 +3,7 @@
 #include <QRegExp>
 #include <QDateTime>
 #include <QDir>
+#include <QScopedPointer>
 
 // mythtv
 #include <mythcontext.h>
@@ -16,6 +17,7 @@
 #include <mythdate.h>
 #include <remotefile.h>
 #include <storagegroup.h>
+#include <mythsystem.h>
 
 // libmythmetadata
 #include "musicmetadata.h"
@@ -1099,12 +1101,29 @@
             {
                 if (albumart_image->embedded)
                 {
-                    QStringList slist;
-                    slist << "MUSIC_TAG_GETIMAGE"
-                          << Hostname()
-                          << QString::number(ID())
-                          << QString::number(albumart_image->imageType);
-                    gCoreContext->SendReceiveStringList(slist);
+                    if (gCoreContext->IsMasterBackend() &&
+                        url.host() == gCoreContext->GetMasterHostName())
+                    {
+                        QStringList paramList;
+                        paramList.append(QString("--songid='%1'").arg(ID()));
+                        paramList.append(QString("--imagetype='%1'").arg(albumart_image->imageType));
+
+                        QString command = "mythutil --extractimage " + paramList.join(" ");
+
+                        QScopedPointer<MythSystem> cmd(MythSystem::Create(command,
+                                                    kMSAutoCleanup | kMSRunBackground |
+                                                    kMSDontDisableDrawing | kMSProcessEvents |
+                                                    kMSDontBlockInputDevs));
+                    }
+                    else
+                    {
+                        QStringList slist;
+                        slist << "MUSIC_TAG_GETIMAGE"
+                            << Hostname()
+                            << QString::number(ID())
+                            << QString::number(albumart_image->imageType);
+                        gCoreContext->SendReceiveStringList(slist);
+                    }
                 }
             }
         }
