diff -Naur mythtv-0.27-20140204-g1b7404d-old/mythtv/libs/libmythmetadata/musicmetadata.cpp mythtv-0.27-20140204-g1b7404d-new/mythtv/libs/libmythmetadata/musicmetadata.cpp
--- mythtv-0.27-20140204-g1b7404d-old/mythtv/libs/libmythmetadata/musicmetadata.cpp	2014-02-05 16:38:12.085460287 +0100
+++ mythtv-0.27-20140204-g1b7404d-new/mythtv/libs/libmythmetadata/musicmetadata.cpp	2014-02-05 16:38:23.088744172 +0100
@@ -1825,6 +1825,27 @@
     return type;
 }
 
+// static method to get image type from the type name
+ImageType AlbumArtImages::getImageTypeFromName(const QString &name)
+{
+    ImageType type = IT_UNKNOWN;
+
+    if (name.toLower() == "front")
+        type = IT_FRONTCOVER;
+    else if (name.toLower() == "back")
+        type = IT_BACKCOVER;
+    else if (name.toLower() == "inlay")
+        type = IT_INLAY;
+    else if (name.toLower() == "cd")
+        type = IT_CD;
+    else if (name.toLower() == "artist")
+        type = IT_ARTIST;
+    else if (name.toLower() == "unknown")
+        type = IT_UNKNOWN;
+
+    return type;
+}
+
 void AlbumArtImages::addImage(const AlbumArtImage &newImage)
 {
     // do we already have an image of this type?
diff -Naur mythtv-0.27-20140204-g1b7404d-old/mythtv/libs/libmythmetadata/musicmetadata.h mythtv-0.27-20140204-g1b7404d-new/mythtv/libs/libmythmetadata/musicmetadata.h
--- mythtv-0.27-20140204-g1b7404d-old/mythtv/libs/libmythmetadata/musicmetadata.h	2014-02-05 16:38:12.082126976 +0100
+++ mythtv-0.27-20140204-g1b7404d-new/mythtv/libs/libmythmetadata/musicmetadata.h	2014-02-05 16:38:23.088744172 +0100
@@ -462,6 +462,7 @@
     static ImageType guessImageType(const QString &filename);
     static QString   getTypeName(ImageType type);
     static QString   getTypeFilename(ImageType type);
+    static ImageType getImageTypeFromName(const QString &name);
 
   private:
     void findImages(void);
diff -Naur mythtv-0.27-20140204-g1b7404d-old/mythtv/programs/mythutil/commandlineparser.cpp mythtv-0.27-20140204-g1b7404d-new/mythtv/programs/mythutil/commandlineparser.cpp
--- mythtv-0.27-20140204-g1b7404d-old/mythtv/programs/mythutil/commandlineparser.cpp	2014-02-05 16:38:16.265441484 +0100
+++ mythtv-0.27-20140204-g1b7404d-new/mythtv/programs/mythutil/commandlineparser.cpp	2014-02-05 16:38:23.088744172 +0100
@@ -154,10 +154,12 @@
         << add("--scanmusic", "scanmusic", false,
                 "Scan the 'Music' Storage Group for music files", "")
                 ->SetGroup("Music Scanning")
-
         << add("--updatemeta", "updatemeta", false,
                 "Update a music tracks database record and tag with new metadata", "")
                 ->SetGroup("Metadata Reading/Writing")
+        << add("--extractimage", "extractimage", false,
+                "Extract an embedded image from a tracks tag and cache it in the AlbumArt storage group", "")
+                ->SetGroup("Metadata Reading/Writing")
         );
 
     // mpegutils.cpp
@@ -233,6 +235,10 @@
             ->SetChildOf("updatemeta");
     add("--lastplayed", "lastplayed", "", "(optional) Last played of track", "")
             ->SetChildOf("updatemeta");
+    add("--songid", "songid", "", "ID of track from which to get the image", "")
+            ->SetChildOf("extractimage");
+    add("--imagetype", "imagetype", "", "Type of image to extract (front, back, cd, inlay, unknown)", "")
+            ->SetChildOf("extractimage");
 
     // Generic Options used by more than one utility
     addRecording();
diff -Naur mythtv-0.27-20140204-g1b7404d-old/mythtv/programs/mythutil/musicmetautils.cpp mythtv-0.27-20140204-g1b7404d-new/mythtv/programs/mythutil/musicmetautils.cpp
--- mythtv-0.27-20140204-g1b7404d-old/mythtv/programs/mythutil/musicmetautils.cpp	2014-02-05 16:38:16.265441484 +0100
+++ mythtv-0.27-20140204-g1b7404d-new/mythtv/programs/mythutil/musicmetautils.cpp	2014-02-05 16:38:23.345409705 +0100
@@ -1,3 +1,6 @@
+// qt
+#include <QDir>
+
 // libmyth* headers
 #include "exitcodes.h"
 #include "mythlogging.h"
@@ -78,6 +81,94 @@
     return result;
 }
 
+static int ExtractImage(const MythUtilCommandLineParser &cmdline)
+{
+    if (cmdline.toString("songid").isEmpty())
+    {
+        LOG(VB_GENERAL, LOG_ERR, "Missing --songid option");
+        return GENERIC_EXIT_INVALID_CMDLINE;
+    }
+
+    if (cmdline.toString("imagetype").isEmpty())
+    {
+        LOG(VB_GENERAL, LOG_ERR, "Missing --imagetype option");
+        return GENERIC_EXIT_INVALID_CMDLINE;
+    }
+
+    int songID = cmdline.toInt("songid");
+    ImageType type = AlbumArtImages::getImageTypeFromName(cmdline.toString("imagetype"));
+
+    MusicMetadata *mdata = MusicMetadata::createFromID(songID);
+    if (!mdata)
+    {
+        LOG(VB_GENERAL, LOG_ERR, QString("Cannot find metadata for trackid: %1").arg(songID));
+        return GENERIC_EXIT_NOT_OK;
+    }
+
+    AlbumArtImage *image = mdata->getAlbumArtImages()->getImage(type);
+    if (!image)
+    {
+        LOG(VB_GENERAL, LOG_ERR, QString("Cannot find image of type: %1").arg(type));
+        //return GENERIC_EXIT_NOT_OK;
+    }
+
+    MetaIO *tagger = mdata->getTagger();
+    if (!tagger)
+    {
+        LOG(VB_GENERAL, LOG_ERR, QString("Cannot find a tagger for this file: %1").arg(mdata->Filename(false)));
+        return GENERIC_EXIT_NOT_OK;
+    }
+
+
+    if (!image->embedded || !tagger->supportsEmbeddedImages())
+    {
+        LOG(VB_GENERAL, LOG_ERR, QString("Either the image isn't embedded or the tagger doesn't support embedded images"));
+        return GENERIC_EXIT_NOT_OK;
+    }
+
+    // find the tracks actual filename
+    StorageGroup musicGroup("Music", gCoreContext->GetHostName(), false);
+    QString trackFilename =  musicGroup.FindFile(mdata->Filename(false));
+
+    // where are we going to save the image
+    QString path;
+    StorageGroup artGroup("MusicArt", gCoreContext->GetHostName());
+    QStringList dirList = artGroup.GetDirList();
+    if (dirList.size())
+        path = artGroup.FindNextDirMostFree();
+
+    if (!QDir(path).exists())
+    {
+        LOG(VB_GENERAL, LOG_ERR, "Cannot find a directory in the 'MusicArt' storage group to save to");
+        return GENERIC_EXIT_NOT_OK;
+    }
+
+    path += "/AlbumArt/";
+    QDir dir(path);
+
+    QString filename = QString("%1-%2.jpg").arg(mdata->ID()).arg(AlbumArtImages::getTypeFilename(image->imageType));
+    if (!QFile::exists(path + filename))
+    {
+        if (!dir.exists())
+            dir.mkpath(path);
+
+        QImage *saveImage = tagger->getAlbumArt(trackFilename, image->imageType);
+        if (saveImage)
+        {
+            saveImage->save(path + filename, "JPEG");
+            delete saveImage;
+        }
+    }
+
+    delete tagger;
+
+    // tell any clients that the metadata for this track has changed
+    // TODO check we need this
+    gCoreContext->SendMessage(QString("MUSIC_METADATA_CHANGED %1").arg(songID));
+
+    return GENERIC_EXIT_OK;
+}
+
 static int ScanMusic(const MythUtilCommandLineParser &cmdline)
 {
     MusicFileScanner *fscan = new MusicFileScanner();
@@ -102,5 +193,6 @@
 void registerMusicUtils(UtilMap &utilMap)
 {
     utilMap["updatemeta"] = &UpdateMeta;
+    utilMap["extractimage"] = &ExtractImage;
     utilMap["scanmusic"] = &ScanMusic;
 }
