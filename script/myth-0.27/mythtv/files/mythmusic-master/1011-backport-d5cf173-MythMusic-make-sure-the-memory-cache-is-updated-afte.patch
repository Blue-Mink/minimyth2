diff -Naur mythtv-0.27-20140204-g1b7404d-old/mythplugins/mythmusic/mythmusic/playlisteditorview.cpp mythtv-0.27-20140204-g1b7404d-new/mythplugins/mythmusic/mythmusic/playlisteditorview.cpp
--- mythtv-0.27-20140204-g1b7404d-old/mythplugins/mythmusic/mythmusic/playlisteditorview.cpp	2014-02-05 16:36:17.012643974 +0100
+++ mythtv-0.27-20140204-g1b7404d-new/mythplugins/mythmusic/mythmusic/playlisteditorview.cpp	2014-02-05 16:36:25.909270670 +0100
@@ -96,11 +96,14 @@
             m_rootNode(NULL), m_playlistTree(NULL), m_breadcrumbsText(NULL),
             m_positionText(NULL)
 {
+    gCoreContext->addListener(this);
     gCoreContext->SaveSetting("MusicPlaylistEditorView", layout);
 }
 
 PlaylistEditorView::~PlaylistEditorView()
 {
+    gCoreContext->removeListener(this);
+
     saveTreePosition();
 
     for (int x = 0; x < m_deleteList.count(); x++)
@@ -210,6 +213,28 @@
         //TODO should just update the cd node
         reloadTree();
     }
+    else if (event->type() == MythEvent::MythEventMessage)
+    {
+        MythEvent *me = dynamic_cast<MythEvent*>(event);
+
+        if (!me)
+            return;
+
+        if (me->Message().startsWith("MUSIC_RESYNC_FINISHED"))
+        {
+            QStringList list = me->Message().simplified().split(' ');
+            if (list.size() == 4)
+            {
+                int added = list[1].toInt();
+                int removed = list[2].toInt();
+                int changed = list[3].toInt();
+
+                // if something changed reload the tree
+                if (added || removed || changed)
+                    reloadTree();
+            }
+        }
+    }
     else if (event->type() == DialogCompletionEvent::kEventType)
     {
         DialogCompletionEvent *dce = static_cast<DialogCompletionEvent*>(event);
diff -Naur mythtv-0.27-20140204-g1b7404d-old/mythtv/libs/libmythmetadata/musicmetadata.cpp mythtv-0.27-20140204-g1b7404d-new/mythtv/libs/libmythmetadata/musicmetadata.cpp
--- mythtv-0.27-20140204-g1b7404d-old/mythtv/libs/libmythmetadata/musicmetadata.cpp	2014-02-05 16:36:11.706001150 +0100
+++ mythtv-0.27-20140204-g1b7404d-new/mythtv/libs/libmythmetadata/musicmetadata.cpp	2014-02-05 16:36:25.912603988 +0100
@@ -132,6 +132,33 @@
     return *this;
 }
 
+// return true if this == mdata
+bool MusicMetadata::compare(MusicMetadata *mdata) const
+{
+    return (
+        m_artist == mdata->m_artist &&
+        m_compilation_artist == mdata->m_compilation_artist &&
+        m_album == mdata->m_album &&
+        m_title == mdata->m_title &&
+        m_year == mdata->m_year &&
+        m_tracknum == mdata->m_tracknum &&
+        m_trackCount == mdata->m_trackCount &&
+        //m_length == mdata->m_length &&
+        m_rating == mdata->m_rating &&
+        m_lastplay == mdata->m_lastplay &&
+        m_playcount == mdata->m_playcount &&
+        m_compilation == mdata->m_compilation &&
+        m_filename == mdata->m_filename &&
+        m_directoryid == mdata->m_directoryid &&
+        m_artistid == mdata->m_artistid &&
+        m_compartistid == mdata->m_compartistid &&
+        m_albumid == mdata->m_albumid &&
+        m_genreid == mdata->m_genreid &&
+        m_format == mdata->m_format &&
+        m_fileSize == mdata->m_fileSize
+    );
+}
+
 void MusicMetadata::persist()
 {
     if (m_id < 1)
@@ -160,25 +187,6 @@
     m_changed = false;
 }
 
-
-void MusicMetadata::UpdateModTime() const
-{
-    if (m_id < 1)
-        return;
-
-    MSqlQuery query(MSqlQuery::InitCon());
-
-    query.prepare("UPDATE music_songs SET date_modified = :DATE_MOD "
-                  "WHERE song_id= :ID ;");
-
-    query.bindValue(":DATE_MOD", MythDate::current());
-    query.bindValue(":ID", m_id);
-
-    if (!query.exec())
-        MythDB::DBError("MusicMetadata::UpdateModTime",
-                        query);
-}
-
 // static
 MusicMetadata *MusicMetadata::createFromFilename(const QString &filename)
 {
@@ -1159,10 +1167,11 @@
     return true;
 }
 
-// NOTE we don't clear the existing tracks just load any new ones found in the DB
-// maybe we should also check for any removed tracks?
+/// resync our cache with the database
 void AllMusic::resync()
 {
+    uint added = 0, removed = 0, changed = 0;
+
     m_done_loading = false;
 
     QString aquery = "SELECT music_songs.song_id, music_artists.artist_id, music_artists.artist_name, "
@@ -1189,45 +1198,64 @@
 
     m_numPcs = query.size() * 2;
     m_numLoaded = 0;
+    QList<MusicMetadata::IdType> idList;
 
     if (query.isActive() && query.size() > 0)
     {
         while (query.next())
         {
-            int id = query.value(0).toInt();
+            MusicMetadata::IdType id = query.value(0).toInt();
+
+            idList.append(id);
+
+            MusicMetadata *dbMeta = new MusicMetadata(
+                query.value(12).toString(),    // filename
+                query.value(2).toString(),     // artist
+                query.value(3).toString(),     // compilation artist
+                query.value(5).toString(),     // album
+                query.value(6).toString(),     // title
+                query.value(7).toString(),     // genre
+                query.value(8).toInt(),        // year
+                query.value(9).toInt(),        // track no.
+                query.value(10).toInt(),       // length
+                query.value(0).toInt(),        // id
+                query.value(13).toInt(),       // rating
+                query.value(14).toInt(),       // playcount
+                query.value(15).toDateTime(),  // lastplay
+                query.value(16).toDateTime(),  // date_entered
+                (query.value(17).toInt() > 0), // compilation
+                query.value(18).toString());   // format
+
+            dbMeta->setDirectoryId(query.value(11).toInt());
+            dbMeta->setArtistId(query.value(1).toInt());
+            dbMeta->setAlbumId(query.value(4).toInt());
+            dbMeta->setTrackCount(query.value(19).toInt());
+            dbMeta->setFileSize((quint64)query.value(20).toULongLong());
 
             if (!music_map.contains(id))
             {
-                filename = query.value(12).toString();
+                // new track
+
+                //  Don't delete dbMeta, as the MetadataPtrList now owns it
+                m_all_music.append(dbMeta);
 
-                MusicMetadata *mdata = new MusicMetadata(
-                    filename,
-                    query.value(2).toString(),     // artist
-                    query.value(3).toString(),     // compilation artist
-                    query.value(5).toString(),     // album
-                    query.value(6).toString(),     // title
-                    query.value(7).toString(),     // genre
-                    query.value(8).toInt(),        // year
-                    query.value(9).toInt(),        // track no.
-                    query.value(10).toInt(),       // length
-                    query.value(0).toInt(),        // id
-                    query.value(13).toInt(),       // rating
-                    query.value(14).toInt(),       // playcount
-                    query.value(15).toDateTime(),  // lastplay
-                    query.value(16).toDateTime(),  // date_entered
-                    (query.value(17).toInt() > 0), // compilation
-                    query.value(18).toString());   // format
-
-                mdata->setDirectoryId(query.value(11).toInt());
-                mdata->setArtistId(query.value(1).toInt());
-                mdata->setAlbumId(query.value(4).toInt());
-                mdata->setTrackCount(query.value(19).toInt());
-                mdata->setFileSize((quint64)query.value(20).toULongLong());
+                music_map[id] = dbMeta;
 
-                //  Don't delete mdata, as PtrList now owns it
-                m_all_music.append(mdata);
+                added++;
+            }
+            else
+            {
+                // existing track, check for any changes
+                MusicMetadata *cacheMeta = music_map[id];
+
+                if (cacheMeta && !cacheMeta->compare(dbMeta))
+                {
+                    cacheMeta->reloadMetadata();
+                    changed++;
+                }
 
-                music_map[id] = mdata;
+                // we already have this track in the cache so don't need dbMeta anymore
+                delete dbMeta;
             }
 
             // compute max/min playcount,lastplay for all music
@@ -1252,10 +1280,35 @@
     }
     else
     {
-         LOG(VB_GENERAL, LOG_ERR, "MythMusic hasn't found any tracks! "
-                                  "That's ok with me if it's ok with you.");
+         LOG(VB_GENERAL, LOG_ERR, "MythMusic hasn't found any tracks!");
     }
 
+    // get a list of tracks in our cache that's now not in the database
+    QList<MusicMetadata::IdType> deleteList;
+    for (int x = 0; x < m_all_music.size(); x++)
+    {
+        if (!idList.contains(m_all_music.at(x)->ID()))
+        {
+            deleteList.append(m_all_music.at(x)->ID());
+        }
+    }
+
+    // remove the no longer available tracks
+    for (int x = 0; x < deleteList.size(); x++)
+    {
+        MusicMetadata::IdType id = deleteList.at(x);
+        MusicMetadata *mdata = music_map[id];
+        m_all_music.removeAll(mdata);
+        music_map.remove(id);
+        removed++;
+        delete mdata;
+    }
+
+    // tell any listeners a resync has just finished and they may need to reload/resync
+    LOG(VB_GENERAL, LOG_DEBUG, QString("AllMusic::resync sending MUSIC_RESYNC_FINISHED added: %1, removed: %2, changed: %3")
+                                      .arg(added).arg(removed).arg(changed));
+    gCoreContext->SendMessage(QString("MUSIC_RESYNC_FINISHED %1 %2 %3").arg(added).arg(removed).arg(changed));
+
     m_done_loading = true;
 }
 
diff -Naur mythtv-0.27-20140204-g1b7404d-old/mythtv/libs/libmythmetadata/musicmetadata.h mythtv-0.27-20140204-g1b7404d-new/mythtv/libs/libmythmetadata/musicmetadata.h
--- mythtv-0.27-20140204-g1b7404d-old/mythtv/libs/libmythmetadata/musicmetadata.h	2014-02-05 16:36:11.702667831 +0100
+++ mythtv-0.27-20140204-g1b7404d-new/mythtv/libs/libmythmetadata/musicmetadata.h	2014-02-05 16:36:25.912603988 +0100
@@ -250,8 +250,10 @@
     void toMap(InfoMap &metadataMap, const QString &prefix = "");
 
     void persist(void);
-    void UpdateModTime(void) const;
-    bool hasChanged() const { return m_changed; }
+
+    bool hasChanged(void) const { return m_changed; }
+
+    bool compare(MusicMetadata *mdata) const;
 
     // static functions
     static MusicMetadata *createFromFilename(const QString &filename);
