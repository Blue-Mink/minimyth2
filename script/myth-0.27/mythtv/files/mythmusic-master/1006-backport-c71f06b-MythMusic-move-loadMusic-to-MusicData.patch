diff -Naur mythtv-0.27-20140204-g1b7404d-old/mythplugins/mythmusic/mythmusic/main.cpp mythtv-0.27-20140204-g1b7404d-new/mythplugins/mythmusic/mythmusic/main.cpp
--- mythtv-0.27-20140204-g1b7404d-old/mythplugins/mythmusic/mythmusic/main.cpp	2014-02-05 16:35:41.132805333 +0100
+++ mythtv-0.27-20140204-g1b7404d-new/mythplugins/mythmusic/mythmusic/main.cpp	2014-02-05 16:35:48.766104237 +0100
@@ -64,78 +64,10 @@
     return MediaMonitor::defaultCDdevice();
 }
 
-static void loadMusic()
-{
-    // only do this once
-    if (gMusicData->initialized)
-        return;
-
-    MSqlQuery count_query(MSqlQuery::InitCon());
-
-    bool musicdata_exists = false;
-    if (count_query.exec("SELECT COUNT(*) FROM music_songs;"))
-    {
-        if(count_query.next() &&
-            0 != count_query.value(0).toInt())
-        {
-            musicdata_exists = true;
-        }
-    }
-
-    QString musicDir = getMusicDirectory();
-
-    // Only search music files if a directory was specified & there
-    // is no data in the database yet (first run).  Otherwise, user
-    // can choose "Setup" option from the menu to force it.
-    if (!musicDir.isEmpty() && !musicdata_exists)
-    {
-        MusicFileScanner *fscan = new MusicFileScanner();
-        fscan->SearchDir(musicDir);
-        delete fscan;
-    }
-
-    MythScreenStack *popupStack = GetMythMainWindow()->GetStack("popup stack");
-    QString message = qApp->translate("(MythMusicMain)", 
-                                      "Loading Music. Please wait ...");
-
-    MythUIBusyDialog *busy = new MythUIBusyDialog(message, popupStack,
-                                                  "musicscanbusydialog");
-    if (busy->Create())
-        popupStack->AddScreen(busy, false);
-    else
-        busy = NULL;
-
-    // Set the various track formatting modes
-    MusicMetadata::setArtistAndTrackFormats();
-
-    AllMusic *all_music = new AllMusic();
-
-    //  Load all playlists into RAM (once!)
-    PlaylistContainer *all_playlists = new PlaylistContainer(all_music);
-
-    gMusicData->all_music = all_music;
-    gMusicData->all_streams = new AllStream();
-    gMusicData->all_playlists = all_playlists;
-
-    gMusicData->initialized = true;
-
-    while (!gMusicData->all_playlists->doneLoading() || !gMusicData->all_music->doneLoading())
-    {
-        qApp->processEvents();
-        usleep(50000);
-    }
-
-    gPlayer->loadStreamPlaylist();
-    gPlayer->loadPlaylist();
-
-    if (busy)
-        busy->Close();
-
-}
 
 static void startPlayback(void)
 {
-    loadMusic();
+    gMusicData->loadMusic();
 
     MythScreenStack *mainStack = GetMythMainWindow()->GetMainStack();
 
@@ -149,7 +81,7 @@
 
 static void startStreamPlayback(void)
 {
-    loadMusic();
+    gMusicData->loadMusic();
 
     MythScreenStack *mainStack = GetMythMainWindow()->GetMainStack();
 
@@ -163,7 +95,7 @@
 
 static void startDatabaseTree(void)
 {
-    loadMusic();
+    gMusicData->loadMusic();
 
     MythScreenStack *mainStack = GetMythMainWindow()->GetMainStack();
 
@@ -179,7 +111,7 @@
 static void startRipper(void)
 {
 #if defined HAVE_CDIO
-    loadMusic();
+    gMusicData->loadMusic();
 
     MythScreenStack *mainStack = GetMythMainWindow()->GetMainStack();
 
@@ -226,32 +158,12 @@
 
     LOG(VB_GENERAL, LOG_INFO, QString("Scanning '%1' for music files").arg(getMusicDirectory()));
 
-    MusicFileScanner *fscan = new MusicFileScanner();
-    QString musicDir = getMusicDirectory();
-    fscan->SearchDir(musicDir);
-
-    // save anything that may have changed
-    if (gMusicData->all_music && gMusicData->all_music->cleanOutThreads())
-        gMusicData->all_music->save();
-
-    if (gMusicData->all_playlists && gMusicData->all_playlists->cleanOutThreads())
-    {
-        gMusicData->all_playlists->save();
-    }
-
-    // force a complete reload of the tracks and playlists
-    gPlayer->stop(true);
-    delete gMusicData;
-
-    gMusicData = new MusicData;
-    loadMusic();
-
-    delete fscan;
+    gMusicData->scanMusic();
 }
 
 static void startImport(void)
 {
-    loadMusic();
+    gMusicData->loadMusic();
 
     MythScreenStack *mainStack = GetMythMainWindow()->GetMainStack();
 
@@ -396,7 +308,7 @@
 
 static void runRipCD(void)
 {
-    loadMusic();
+    gMusicData->loadMusic();
 
 #if defined HAVE_CDIO
     MythScreenStack *mainStack = GetMythMainWindow()->GetMainStack();
@@ -487,7 +399,7 @@
     }
 
     if (!gMusicData->initialized)
-        loadMusic();
+        gMusicData->loadMusic();
 
     // remove any existing CD tracks
     if (gMusicData->all_music)
diff -Naur mythtv-0.27-20140204-g1b7404d-old/mythplugins/mythmusic/mythmusic/musicdata.cpp mythtv-0.27-20140204-g1b7404d-new/mythplugins/mythmusic/mythmusic/musicdata.cpp
--- mythtv-0.27-20140204-g1b7404d-old/mythplugins/mythmusic/mythmusic/musicdata.cpp	2014-02-05 16:35:41.132805333 +0100
+++ mythtv-0.27-20140204-g1b7404d-new/mythplugins/mythmusic/mythmusic/musicdata.cpp	2014-02-05 16:35:48.766104237 +0100
@@ -6,13 +6,21 @@
 #include <mythmainwindow.h>
 #include <mythprogressdialog.h>
 #include <musicmetadata.h>
+#include <musicfilescanner.h>
+#include <musicutils.h>
+#include "mythsystemlegacy.h"
 
 // mythmusic
 #include "musicdata.h"
+#include "musicplayer.h"
 
 // this is the global MusicData object shared thoughout MythMusic
 MusicData  *gMusicData = NULL;
 
+
+///////////////////////////////////////////////////////////////////////////////
+
+
 MusicData::MusicData(void)
 {
     all_playlists = NULL;
@@ -42,6 +50,20 @@
     }
 }
 
+void MusicData::scanMusic (void)
+{
+    // TODO once we switch to storage groups we should use the myth protocol
+    // to ask the master BE to run the scan on all hosts with a valid directory
+    // set for the 'Music' storage group
+    //
+    // for the moment we just run mythutil --scanmusic on this host
+
+    QScopedPointer<MythSystem> cmd(MythSystem::Create("mythutil --scanmusic",
+                                                      kMSAutoCleanup | kMSRunBackground |
+                                                      kMSDontDisableDrawing | kMSProcessEvents |
+                                                      kMSDontBlockInputDevs));
+}
+
 /// reload music after a scan, rip or import
 void MusicData::reloadMusic(void)
 {
@@ -59,6 +81,16 @@
     else
         busy = NULL;
 
+    // TODO make it so the player isn't interupted
+    // for the moment stop playing and try to resume after reloading
+    bool wasPlaying = false;
+    if (gPlayer->isPlaying())
+    {
+        gPlayer->savePosition();
+        gPlayer->stop(true);
+        wasPlaying = true;
+    }
+
     all_music->startLoading();
     while (!all_music->doneLoading())
     {
@@ -66,6 +98,68 @@
         usleep(50000);
     }
 
+    //FIXME should resync the playlist here
+    //all_playlists->resync();
+
+    if (busy)
+        busy->Close();
+
+    if (wasPlaying)
+        gPlayer->restorePosition();
+}
+
+void MusicData::loadMusic(void)
+{
+    // only do this once
+    if (initialized)
+        return;
+
+    MSqlQuery count_query(MSqlQuery::InitCon());
+
+    bool musicdata_exists = false;
+    if (count_query.exec("SELECT COUNT(*) FROM music_songs;"))
+    {
+        if(count_query.next() &&
+            0 != count_query.value(0).toInt())
+        {
+            musicdata_exists = true;
+        }
+    }
+
+    MythScreenStack *popupStack = GetMythMainWindow()->GetStack("popup stack");
+    QString message = qApp->translate("(MythMusicMain)",
+                                      "Loading Music. Please wait ...");
+
+    MythUIBusyDialog *busy = new MythUIBusyDialog(message, popupStack,
+                                                  "musicscanbusydialog");
+    if (busy->Create())
+        popupStack->AddScreen(busy, false);
+    else
+        busy = NULL;
+
+    // Set the various track formatting modes
+    MusicMetadata::setArtistAndTrackFormats();
+
+    AllMusic *all_music = new AllMusic();
+
+    //  Load all playlists into RAM (once!)
+    PlaylistContainer *all_playlists = new PlaylistContainer(all_music);
+
+    gMusicData->all_music = all_music;
+    gMusicData->all_streams = new AllStream();
+    gMusicData->all_playlists = all_playlists;
+
+    gMusicData->initialized = true;
+
+    while (!gMusicData->all_playlists->doneLoading() || !gMusicData->all_music->doneLoading())
+    {
+        qApp->processEvents();
+        usleep(50000);
+    }
+
+    gPlayer->loadStreamPlaylist();
+    gPlayer->loadPlaylist();
+
     if (busy)
         busy->Close();
 }
diff -Naur mythtv-0.27-20140204-g1b7404d-old/mythplugins/mythmusic/mythmusic/musicdata.h mythtv-0.27-20140204-g1b7404d-new/mythplugins/mythmusic/mythmusic/musicdata.h
--- mythtv-0.27-20140204-g1b7404d-old/mythplugins/mythmusic/mythmusic/musicdata.h	2014-02-05 16:35:41.132805333 +0100
+++ mythtv-0.27-20140204-g1b7404d-new/mythplugins/mythmusic/mythmusic/musicdata.h	2014-02-05 16:35:48.766104237 +0100
@@ -21,11 +21,13 @@
     MusicData();
     ~MusicData();
 
+    void scanMusic(void);
+    void loadMusic(void);
+
   public slots:
     void reloadMusic(void);
 
   public:
-    //QString             musicDir;
     PlaylistContainer  *all_playlists;
     AllMusic           *all_music;
     AllStream          *all_streams;
