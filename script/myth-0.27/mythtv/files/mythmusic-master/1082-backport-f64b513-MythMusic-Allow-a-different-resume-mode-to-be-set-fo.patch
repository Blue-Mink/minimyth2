From f64b513401d9278ad8ac202f942e06a525a62035 Mon Sep 17 00:00:00 2001
From: Paul Harrison <pharrison@mythtv.org>
Date: Sun, 9 Mar 2014 09:41:50 +0000
Subject: [PATCH 01/12] MythMusic: Allow a different resume mode to be set for
 the playlist editor

You can now set different resume modes for the playlist, playlist editor
and radio screens.

THEMERS NOTE: this adds a couple of selectors called 'resumemodeeditor' and
'resumemoderadio' to the 'playersettings' window.
---
 mythplugins/mythmusic/mythmusic/musiccommon.cpp    |   32 ++++++++-------
 mythplugins/mythmusic/mythmusic/musicplayer.cpp    |   41 +++++++++++---------
 mythplugins/mythmusic/mythmusic/musicplayer.h      |   10 +++--
 mythplugins/mythmusic/mythmusic/playersettings.cpp |   37 +++++++++++++-----
 mythplugins/mythmusic/mythmusic/playersettings.h   |    3 +-
 .../theme/default-wide/musicsettings-ui.xml        |   22 ++++++++++-
 .../mythmusic/theme/default/musicsettings-ui.xml   |   36 ++++++++++++-----
 7 files changed, 124 insertions(+), 57 deletions(-)

diff --git a/mythplugins/mythmusic/mythmusic/musiccommon.cpp b/mythplugins/mythmusic/mythmusic/musiccommon.cpp
index b62f1f5..0294555 100644
--- a/mythplugins/mythmusic/mythmusic/musiccommon.cpp
+++ b/mythplugins/mythmusic/mythmusic/musiccommon.cpp
@@ -169,11 +169,12 @@ bool MusicCommon::CreateCommon(void)
 
     if (!gPlayer->isPlaying())
     {
-        bool isRadioView = (m_currentView == MV_RADIO);
-        if (isRadioView)
+        if (m_currentView == MV_RADIO)
             gPlayer->setPlayMode(MusicPlayer::PLAYMODE_RADIO);
+        else if (m_currentView == MV_PLAYLISTEDITORGALLERY || m_currentView == MV_PLAYLISTEDITORTREE)
+            gPlayer->setPlayMode(MusicPlayer::PLAYMODE_TRACKSEDITOR);
         else
-            gPlayer->setPlayMode(MusicPlayer::PLAYMODE_TRACKS);
+            gPlayer->setPlayMode(MusicPlayer::PLAYMODE_TRACKSPLAYLIST);
 
         gPlayer->restorePosition();
     }
@@ -187,14 +188,17 @@ bool MusicCommon::CreateCommon(void)
         }
         else if (gPlayer->getPlayMode() == MusicPlayer::PLAYMODE_RADIO && m_currentView != MV_RADIO)
         {
-            //gPlayer->savePosition();
             gPlayer->stop(true);
-            gPlayer->setPlayMode(MusicPlayer::PLAYMODE_TRACKS);
+
+            if (m_currentView == MV_PLAYLISTEDITORGALLERY || m_currentView == MV_PLAYLISTEDITORTREE)
+                gPlayer->setPlayMode(MusicPlayer::PLAYMODE_TRACKSEDITOR);
+            else
+                gPlayer->setPlayMode(MusicPlayer::PLAYMODE_TRACKSPLAYLIST);
+
             gPlayer->restorePosition();
         }
-        else if (gPlayer->getPlayMode() == MusicPlayer::PLAYMODE_TRACKS && m_currentView == MV_RADIO)
+        else if (gPlayer->getPlayMode() != MusicPlayer::PLAYMODE_RADIO && m_currentView == MV_RADIO)
         {
-            //gPlayer->savePosition();
             gPlayer->stop(true);
             gPlayer->setPlayMode(MusicPlayer::PLAYMODE_RADIO);
             gPlayer->restorePosition();
@@ -584,7 +588,7 @@ bool MusicCommon::keyPressEvent(QKeyEvent *e)
         }
         else if (action == "FFWD")
         {
-            if (gPlayer->getPlayMode() == MusicPlayer::PLAYMODE_TRACKS)
+            if (gPlayer->getPlayMode() != MusicPlayer::PLAYMODE_RADIO)
             {
                 if (m_ffButton)
                     m_ffButton->Push();
@@ -594,7 +598,7 @@ bool MusicCommon::keyPressEvent(QKeyEvent *e)
         }
         else if (action == "RWND")
         {
-            if (gPlayer->getPlayMode() == MusicPlayer::PLAYMODE_TRACKS)
+            if (gPlayer->getPlayMode() != MusicPlayer::PLAYMODE_RADIO)
             {
                 if (m_rewButton)
                     m_rewButton->Push();
@@ -775,7 +779,7 @@ void MusicCommon::changeVolume(bool up)
 
 void MusicCommon::changeSpeed(bool up)
 {
-    if (gPlayer->getOutput() && gPlayer->getPlayMode() == MusicPlayer::PLAYMODE_TRACKS)
+    if (gPlayer->getOutput() && gPlayer->getPlayMode() != MusicPlayer::PLAYMODE_RADIO)
     {
         if (up)
             gPlayer->incSpeed();
@@ -2087,7 +2091,7 @@ MythMenu* MusicCommon::createMainMenu(void)
 
     menu->AddItem(tr("Switch View"),      NULL, createViewMenu());
 
-    if (gPlayer->getPlayMode() == MusicPlayer::PLAYMODE_TRACKS)
+    if (gPlayer->getPlayMode() != MusicPlayer::PLAYMODE_RADIO)
     {
         menu->AddItem(tr("Playlist Options"), NULL, createPlaylistMenu());
         menu->AddItem(tr("Set Shuffle Mode"), NULL, createShuffleMenu());
@@ -2096,7 +2100,7 @@ MythMenu* MusicCommon::createMainMenu(void)
 
     menu->AddItem(tr("Player Options"),   NULL, createPlayerMenu());
 
-    if (gPlayer->getPlayMode() == MusicPlayer::PLAYMODE_TRACKS)
+    if (gPlayer->getPlayMode() != MusicPlayer::PLAYMODE_RADIO)
         menu->AddItem(tr("Quick Playlists"),  NULL, createQuickPlaylistsMenu());
 
     if (m_visualizerVideo)
@@ -2190,7 +2194,7 @@ MythMenu* MusicCommon::createPlayerMenu(void)
     menu->AddItem(tr("Previous Track"));
     menu->AddItem(tr("Next Track"));
 
-    if (gPlayer->getPlayMode() == MusicPlayer::PLAYMODE_TRACKS)
+    if (gPlayer->getPlayMode() != MusicPlayer::PLAYMODE_RADIO)
     {
         menu->AddItem(tr("Jump Back"));
         menu->AddItem(tr("Jump Forward"));
@@ -2199,7 +2203,7 @@ MythMenu* MusicCommon::createPlayerMenu(void)
     menu->AddItem(tr("Play"));
     menu->AddItem(tr("Stop"));
 
-    if (gPlayer->getPlayMode() == MusicPlayer::PLAYMODE_TRACKS)
+    if (gPlayer->getPlayMode() != MusicPlayer::PLAYMODE_RADIO)
         menu->AddItem(tr("Pause"));
 
     return menu;
diff --git a/mythplugins/mythmusic/mythmusic/musicplayer.cpp b/mythplugins/mythmusic/mythmusic/musicplayer.cpp
index da633e8..523c6f9 100644
--- a/mythplugins/mythmusic/mythmusic/musicplayer.cpp
+++ b/mythplugins/mythmusic/mythmusic/musicplayer.cpp
@@ -70,7 +70,7 @@ MusicPlayer::MusicPlayer(QObject *parent)
 
     m_isAutoplay = false;
     m_isPlaying = false;
-    m_playMode = PLAYMODE_TRACKS;
+    m_playMode = PLAYMODE_TRACKSPLAYLIST;
     m_canShowPlayer = true;
     m_wasPlaying = false;
     m_updatedLastplay = false;
@@ -227,20 +227,23 @@ void MusicPlayer::removeVisual(MainVisual *visual)
     }
 }
 
-void MusicPlayer::loadSettings(void )
+MusicPlayer::ResumeMode MusicPlayer::getResumeMode(void)
 {
-    QString resumestring = gCoreContext->GetSetting("ResumeMode", "off");
-    if (resumestring.toLower() == "off")
-        m_resumeMode = RESUME_OFF;
-    else if (resumestring.toLower() == "first")
-        m_resumeMode = RESUME_FIRST;
-    else if (resumestring.toLower() == "track")
-        m_resumeMode = RESUME_TRACK;
+    if (m_playMode == PLAYMODE_RADIO)
+        return m_resumeModeRadio;
+    else if (m_playMode == PLAYMODE_TRACKSEDITOR)
+        return m_resumeModeEditor;
     else
-        m_resumeMode = RESUME_EXACT;
+        return m_resumeModePlayback;
+}
 
-    m_lastplayDelay = gCoreContext->GetNumSetting("MusicLastPlayDelay", LASTPLAY_DELAY);
+void MusicPlayer::loadSettings(void)
+{
+    m_resumeModePlayback = (ResumeMode) gCoreContext->GetNumSetting("ResumeModePlayback", (ResumeMode) MusicPlayer::RESUME_EXACT);
+    m_resumeModeEditor = (ResumeMode) gCoreContext->GetNumSetting("ResumeModeEditor", (ResumeMode) MusicPlayer::RESUME_OFF);
+    m_resumeModeRadio = (ResumeMode) gCoreContext->GetNumSetting("ResumeModeRadio", (ResumeMode) MusicPlayer::RESUME_TRACK);
 
+    m_lastplayDelay = gCoreContext->GetNumSetting("MusicLastPlayDelay", LASTPLAY_DELAY);
     m_autoShowPlayer = (gCoreContext->GetNumSetting("MusicAutoShowPlayer", 1) > 0);
 }
 
@@ -872,12 +875,12 @@ void MusicPlayer::customEvent(QEvent *event)
         if (!oe)
             return;
 
-        if (m_playMode == PLAYMODE_TRACKS)
+        if (m_playMode != PLAYMODE_RADIO)
             m_currentTime = oe->elapsedSeconds();
         else
             m_currentTime = oe->elapsedSeconds() - m_lastTrackStart;
 
-        if (m_playMode == PLAYMODE_TRACKS && !m_updatedLastplay)
+        if (m_playMode != PLAYMODE_RADIO && !m_updatedLastplay)
         {
             // we update the lastplay and playcount after playing
             // for m_lastplayDelay seconds or half the total track time
@@ -910,7 +913,7 @@ void MusicPlayer::customEvent(QEvent *event)
         }
         else
         {
-            if (m_playMode == PLAYMODE_TRACKS && getCurrentMetadata() &&
+            if (m_playMode != PLAYMODE_RADIO && getCurrentMetadata() &&
                 m_currentTime != getCurrentMetadata()->Length() / 1000)
             {
                 LOG(VB_GENERAL, LOG_NOTICE, QString("MusicPlayer: Updating track length was %1s, should be %2s")
@@ -1095,7 +1098,7 @@ void MusicPlayer::restorePosition(void)
         if (gPlayer->getResumeMode() > MusicPlayer::RESUME_OFF)
             play();
 
-        if (gPlayer->getResumeMode() == MusicPlayer::RESUME_EXACT && m_playMode == PLAYMODE_TRACKS)
+        if (gPlayer->getResumeMode() == MusicPlayer::RESUME_EXACT && m_playMode != PLAYMODE_RADIO)
             seek(gCoreContext->GetNumSetting("MusicBookmarkPosition", 0));
     }
 }
@@ -1249,7 +1252,7 @@ void MusicPlayer::setShuffleMode(ShuffleMode mode)
         curTrackID = getCurrentMetadata()->ID();
 
     // only save the mode if we are playing tracks
-    if (m_playMode == PLAYMODE_TRACKS)
+    if (m_playMode != PLAYMODE_RADIO)
         m_shuffleMode = mode;
 
     if (!getCurrentPlaylist())
@@ -1273,7 +1276,7 @@ void MusicPlayer::setShuffleMode(ShuffleMode mode)
 
 void MusicPlayer::updateLastplay()
 {
-    if (m_playMode == PLAYMODE_TRACKS && getCurrentMetadata())
+    if (m_playMode != PLAYMODE_RADIO && getCurrentMetadata())
     {
         getCurrentMetadata()->incPlayCount();
         getCurrentMetadata()->setLastPlay();
@@ -1284,7 +1287,7 @@ void MusicPlayer::updateLastplay()
 
 void MusicPlayer::updateVolatileMetadata(void)
 {
-    if (m_playMode == PLAYMODE_TRACKS && getCurrentMetadata() && getDecoder())
+    if (m_playMode != PLAYMODE_RADIO && getCurrentMetadata() && getDecoder())
     {
         if (getCurrentMetadata()->hasChanged())
         {
@@ -1563,7 +1566,7 @@ void MusicPlayer::decoderHandlerReady(void)
 
         getDecoder()->start();
 
-        if (!m_oneshotMetadata && m_resumeMode == RESUME_EXACT &&
+        if (!m_oneshotMetadata && getResumeMode() == RESUME_EXACT &&
             gCoreContext->GetNumSetting("MusicBookmarkPosition", 0) > 0)
         {
             seek(gCoreContext->GetNumSetting("MusicBookmarkPosition", 0));
diff --git a/mythplugins/mythmusic/mythmusic/musicplayer.h b/mythplugins/mythmusic/mythmusic/musicplayer.h
index f0b0d74..1df87cb 100644
--- a/mythplugins/mythmusic/mythmusic/musicplayer.h
+++ b/mythplugins/mythmusic/mythmusic/musicplayer.h
@@ -58,7 +58,8 @@ class MusicPlayer : public QObject, public MythObservable
 
     enum PlayMode
     {
-      PLAYMODE_TRACKS = 0,
+      PLAYMODE_TRACKSPLAYLIST = 0,
+      PLAYMODE_TRACKSEDITOR,
       PLAYMODE_RADIO,
     };
 
@@ -179,7 +180,7 @@ class MusicPlayer : public QObject, public MythObservable
     void        setShuffleMode(ShuffleMode mode);
     ShuffleMode toggleShuffleMode(void);
 
-    ResumeMode  getResumeMode(void) { return m_resumeMode; }
+    ResumeMode  getResumeMode(void);
 
     void getBufferStatus(int *bufferAvailable, int *bufferSize);
 
@@ -226,7 +227,9 @@ class MusicPlayer : public QObject, public MythObservable
 
     ShuffleMode  m_shuffleMode;
     RepeatMode   m_repeatMode;
-    ResumeMode   m_resumeMode;
+    ResumeMode   m_resumeModePlayback;
+    ResumeMode   m_resumeModeEditor;
+    ResumeMode   m_resumeModeRadio;
 
     float        m_playSpeed;
 
@@ -243,6 +246,7 @@ class MusicPlayer : public QObject, public MythObservable
     int               m_errorCount;
 };
 
+Q_DECLARE_METATYPE(MusicPlayer::ResumeMode);
 Q_DECLARE_METATYPE(MusicPlayer::RepeatMode);
 Q_DECLARE_METATYPE(MusicPlayer::ShuffleMode);
 
diff --git a/mythplugins/mythmusic/mythmusic/playersettings.cpp b/mythplugins/mythmusic/mythmusic/playersettings.cpp
index 2f8bc63..13802d3 100644
--- a/mythplugins/mythmusic/mythmusic/playersettings.cpp
+++ b/mythplugins/mythmusic/mythmusic/playersettings.cpp
@@ -5,6 +5,7 @@
 #include <mythcorecontext.h>
 
 #include "playersettings.h"
+#include "musicplayer.h"
 
 PlayerSettings::PlayerSettings(MythScreenStack *parent, const char *name)
         : MythScreenType(parent, name),
@@ -31,6 +32,8 @@ bool PlayerSettings::Create()
         return false;
 
     UIUtilE::Assign(this, m_resumeMode, "resumemode", &err);
+    UIUtilE::Assign(this, m_resumeModeEditor, "resumemodeeditor", &err);
+    UIUtilE::Assign(this, m_resumeModeRadio, "resumemoderadio", &err);
     UIUtilE::Assign(this, m_exitAction, "exitaction", &err);
     UIUtilE::Assign(this, m_autoLookupCD, "autolookupcd", &err);
     UIUtilE::Assign(this, m_autoPlayCD, "autoplaycd", &err);
@@ -43,11 +46,21 @@ bool PlayerSettings::Create()
         return false;
     }
 
-    new MythUIButtonListItem(m_resumeMode, tr("Off"), qVariantFromValue(QString("off")));
-    new MythUIButtonListItem(m_resumeMode, tr("First"), qVariantFromValue(QString("first")));
-    new MythUIButtonListItem(m_resumeMode, tr("Track"), qVariantFromValue(QString("track")));
-    new MythUIButtonListItem(m_resumeMode, tr("Exact"), qVariantFromValue(QString("exact")));
-    m_resumeMode->SetValueByData(gCoreContext->GetSetting("ResumeMode"));
+    new MythUIButtonListItem(m_resumeMode, tr("Off"),   qVariantFromValue((int)MusicPlayer::RESUME_OFF));
+    new MythUIButtonListItem(m_resumeMode, tr("First"), qVariantFromValue((int)MusicPlayer::RESUME_FIRST));
+    new MythUIButtonListItem(m_resumeMode, tr("Track"), qVariantFromValue((int)MusicPlayer::RESUME_TRACK));
+    new MythUIButtonListItem(m_resumeMode, tr("Exact"), qVariantFromValue((int)MusicPlayer::RESUME_EXACT));
+    m_resumeMode->SetValueByData(gCoreContext->GetNumSetting("ResumeModePlayback", MusicPlayer::RESUME_EXACT));
+
+    new MythUIButtonListItem(m_resumeModeEditor, tr("Off"),   qVariantFromValue((int)MusicPlayer::RESUME_OFF));
+    new MythUIButtonListItem(m_resumeModeEditor, tr("First"), qVariantFromValue((int)MusicPlayer::RESUME_FIRST));
+    new MythUIButtonListItem(m_resumeModeEditor, tr("Track"), qVariantFromValue((int)MusicPlayer::RESUME_TRACK));
+    new MythUIButtonListItem(m_resumeModeEditor, tr("Exact"), qVariantFromValue((int)MusicPlayer::RESUME_EXACT));
+    m_resumeModeEditor->SetValueByData(gCoreContext->GetNumSetting("ResumeModeEditor", MusicPlayer::RESUME_OFF));
+
+    new MythUIButtonListItem(m_resumeModeRadio, tr("Off"), qVariantFromValue((int)MusicPlayer::RESUME_OFF));
+    new MythUIButtonListItem(m_resumeModeRadio, tr("On"),  qVariantFromValue((int)MusicPlayer::RESUME_TRACK));
+    m_resumeModeRadio->SetValueByData(gCoreContext->GetNumSetting("ResumeModeRadio", MusicPlayer::RESUME_TRACK));
 
     new MythUIButtonListItem(m_exitAction, tr("Prompt"), qVariantFromValue(QString("prompt")));
     new MythUIButtonListItem(m_exitAction, tr("Stop playing"), qVariantFromValue(QString("stop")));
@@ -61,9 +74,13 @@ bool PlayerSettings::Create()
     if (loadAutoPlayCD == 1)
         m_autoPlayCD->SetCheckState(MythUIStateType::Full);
 
-    m_resumeMode->SetHelpText(tr("Resume playback at either the beginning of the "
-                 "active play queue, the beginning of the last track, "
-                 "or an exact point within the last track."));
+    m_resumeMode->SetHelpText(tr("Playback screen - Resume playback at either the beginning of the "
+                 "active play queue, the beginning of the last track played, "
+                 "or an exact point within the last track played or not at all."));
+    m_resumeModeEditor->SetHelpText(tr("Playlist Editor screen - Resume playback at either the beginning of the "
+                 "active play queue, the beginning of the last track played, "
+                 "or an exact point within the last track played or not at all."));
+    m_resumeModeRadio->SetHelpText(tr("Radio screen - Resume playback at the previous station or not at all"));
     m_exitAction->SetHelpText(tr("Specify what action to take when exiting MythMusic plugin."));
     m_autoLookupCD->SetHelpText(tr("Automatically lookup an audio CD if it is "
                  "present and show its information in the "
@@ -83,7 +100,9 @@ bool PlayerSettings::Create()
 
 void PlayerSettings::slotSave(void)
 {
-    gCoreContext->SaveSetting("ResumeMode", m_resumeMode->GetDataValue().toString());
+    gCoreContext->SaveSetting("ResumeModePlayback", m_resumeMode->GetDataValue().toInt());
+    gCoreContext->SaveSetting("ResumeModeEditor", m_resumeModeEditor->GetDataValue().toInt());
+    gCoreContext->SaveSetting("ResumeModeRadio", m_resumeModeRadio->GetDataValue().toInt());
     gCoreContext->SaveSetting("MusicExitAction", m_exitAction->GetDataValue().toString());
 
     int saveAutoLookupCD = (m_autoLookupCD->GetCheckState() == MythUIStateType::Full) ? 1 : 0;
diff --git a/mythplugins/mythmusic/mythmusic/playersettings.h b/mythplugins/mythmusic/mythmusic/playersettings.h
index 53eb336..16447b2 100644
--- a/mythplugins/mythmusic/mythmusic/playersettings.h
+++ b/mythplugins/mythmusic/mythmusic/playersettings.h
@@ -6,7 +6,6 @@
 #include <libmythui/mythuibuttonlist.h>
 #include <libmythui/mythuicheckbox.h>
 
-
 class PlayerSettings : public MythScreenType
 {
     Q_OBJECT
@@ -18,6 +17,8 @@ public:
 
 private:
     MythUIButtonList   *m_resumeMode;
+    MythUIButtonList   *m_resumeModeEditor;
+    MythUIButtonList   *m_resumeModeRadio;
     MythUIButtonList   *m_exitAction;
     MythUICheckBox     *m_autoLookupCD;
     MythUICheckBox     *m_autoPlayCD;
diff --git a/mythplugins/mythmusic/theme/default-wide/musicsettings-ui.xml b/mythplugins/mythmusic/theme/default-wide/musicsettings-ui.xml
index 56ff60f..71d0b15 100644
--- a/mythplugins/mythmusic/theme/default-wide/musicsettings-ui.xml
+++ b/mythplugins/mythmusic/theme/default-wide/musicsettings-ui.xml
@@ -91,11 +91,29 @@
         </textarea>
 
         <textarea name="resumemode_label" from="basetextarea">
-            <area>240,220,400,40</area>
+            <area>240,120,400,40</area>
             <align>right,vcenter</align>
-            <value>Resume mode:</value>
+            <value>Resume mode (Playlist):</value>
         </textarea>
         <buttonlist name="resumemode" from="basemediumselector">
+            <position>650,120</position>
+        </buttonlist>
+
+        <textarea name="resumemodeeditor_label" from="basetextarea">
+            <area>240,170,400,40</area>
+            <align>right,vcenter</align>
+            <value>Resume mode (Playlist Editor):</value>
+        </textarea>
+        <buttonlist name="resumemodeeditor" from="basemediumselector">
+            <position>650,170</position>
+        </buttonlist>
+
+        <textarea name="resumemoderadio_label" from="basetextarea">
+            <area>240,220,400,40</area>
+            <align>right,vcenter</align>
+            <value>Resume mode (Radio):</value>
+        </textarea>
+        <buttonlist name="resumemoderadio" from="basemediumselector">
             <position>650,220</position>
         </buttonlist>
 
diff --git a/mythplugins/mythmusic/theme/default/musicsettings-ui.xml b/mythplugins/mythmusic/theme/default/musicsettings-ui.xml
index 8028639..a77dc9f 100644
--- a/mythplugins/mythmusic/theme/default/musicsettings-ui.xml
+++ b/mythplugins/mythmusic/theme/default/musicsettings-ui.xml
@@ -91,39 +91,57 @@
         </textarea>
 
         <textarea name="resumemode_label" from="basetextarea">
-            <area>20,140,380,40</area>
+            <area>20,60,380,40</area>
             <align>right,vcenter</align>
-            <value>Resume mode:</value>
+            <value>Resume mode (Playlist):</value>
         </textarea>
         <buttonlist name="resumemode" from="baseselector">
-            <position>410,140</position>
+            <position>410,60</position>
+        </buttonlist>
+
+        <textarea name="resumemodeeditor_label" from="basetextarea">
+            <area>20,110,380,40</area>
+            <align>right,vcenter</align>
+            <value>Resume mode (Playlist Editor):</value>
+        </textarea>
+        <buttonlist name="resumemodeeditor" from="baseselector">
+            <position>410,110</position>
+        </buttonlist>
+
+        <textarea name="resumemoderadio_label" from="basetextarea">
+            <area>20,160,380,40</area>
+            <align>right,vcenter</align>
+            <value>Resume mode (Radio):</value>
+        </textarea>
+        <buttonlist name="resumemoderadio" from="baseselector">
+            <position>410,160</position>
         </buttonlist>
 
         <textarea name="exitaction_label" from="basetextarea">
-            <area>20,190,380,40</area>
+            <area>20,210,380,40</area>
             <align>right,vcenter</align>
             <value>Action on exit:</value>
         </textarea>
         <buttonlist name="exitaction" from="baseselector">
-            <position>410,190</position>
+            <position>410,210</position>
         </buttonlist>
 
         <textarea name="autolookupcd_label" from="basetextarea">
-            <area>20,255,380,40</area>
+            <area>20,275,380,40</area>
             <align>right,vcenter</align>
             <value>Automatically lookup CDs:</value>
         </textarea>
         <checkbox name="autolookupcd" from="basecheckbox">
-            <position>410,260</position>
+            <position>410,280</position>
         </checkbox>
 
         <textarea name="autoplaycd_label" from="basetextarea">
-            <area>20,305,380,40</area>
+            <area>20,325,380,40</area>
             <align>right,vcenter</align>
             <value>Automatically Play CDs:</value>
         </textarea>
         <checkbox name="autoplaycd" from="basecheckbox">
-            <position>410,310</position>
+            <position>410,330</position>
         </checkbox>
 
         <textarea name="helptext" from="basetextarea">
-- 
1.7.10.2

