From e7b163fd1de5fc40549245bce2f6d502094cc0b2 Mon Sep 17 00:00:00 2001
From: Stuart Morgan <smorgan@mythtv.org>
Date: Sun, 13 Jul 2014 00:35:35 +0100
Subject: [PATCH 2/2] UPnP: Expose more metadata to UPnP clients

A lot of upnp clients won't use it, but it's there for those that do.

For recordings:
channelID
channelName
callSign
channelNr
seriesTitle
programTitle
episodeNumber*
episodeCount*
recordedStartDateTime
recordedDayOfWeek
seriesID
programID
srsRecordScheduleID

For videos:
seriesTitle
programTitle
episodeNumber*

For music:
playbackCount
lastPlaybackTime

*These likely expect the value to be for the entire series rather than
 per-season since there is no provision for season ID. However since
 it's not that specific we populate them with the episode number
 within a season.
---
 mythtv/libs/libmythupnp/upnpcdsobjects.cpp   |   41 ++++++-
 mythtv/libs/libmythupnp/upnpcdsobjects.h     |    3 +-
 mythtv/programs/mythbackend/upnpcdsmusic.cpp |   21 ++--
 mythtv/programs/mythbackend/upnpcdstv.cpp    |  156 +++++++++++++++++++-------
 mythtv/programs/mythbackend/upnpcdsvideo.cpp |   19 +++-
 5 files changed, 179 insertions(+), 61 deletions(-)

diff --git a/mythtv/libs/libmythupnp/upnpcdsobjects.cpp b/mythtv/libs/libmythupnp/upnpcdsobjects.cpp
index a5874f3..ebb4f23 100644
--- a/mythtv/libs/libmythupnp/upnpcdsobjects.cpp
+++ b/mythtv/libs/libmythupnp/upnpcdsobjects.cpp
@@ -115,7 +115,8 @@ QList<Property*> CDSObject::GetProperties( const QString &sName )
 //
 /////////////////////////////////////////////////////////////////////////////
 
-void CDSObject::SetPropValue( const QString &sName, const QString &sValue )
+void CDSObject::SetPropValue( const QString &sName, const QString &sValue,
+                              const QString &sType )
 {
     Properties::iterator it = m_properties.find(sName);
     if (it !=  m_properties.end() && *it)
@@ -125,6 +126,9 @@ void CDSObject::SetPropValue( const QString &sName, const QString &sValue )
                 QString("SetPropValue(%1) called on property with bAllowMulti. "
                         "Only the last inserted property will be updated."));
         (*it)->SetValue(sValue);
+
+        if (!sType.isEmpty())
+            (*it)->AddAttribute( "type", sType );
     }
 }
 
@@ -399,13 +403,30 @@ CDSObject *CDSObject::CreateMusicTrack( QString sId, QString sTitle, QString sPa
     pObject->AddProperty( new Property( "playlist"            , "upnp" ));
     pObject->AddProperty( new Property( "storageMedium"       , "upnp" ));
     pObject->AddProperty( new Property( "contributor"         , "dc"   ));
+    pObject->AddProperty( new Property( "creator"             , "dc"   ));
     pObject->AddProperty( new Property( "date"                , "dc"   ));
 
+    pObject->AddProperty( new Property( "playbackCount"       , "upnp" ));
+    pObject->AddProperty( new Property( "lastPlaybackTime"    , "upnp" ));
+
     pObject->AddProperty( new Property( "albumArtURI", "upnp", false, "", true)); // TN
     pObject->AddProperty( new Property( "albumArtURI", "upnp", false, "", true)); // SM
     pObject->AddProperty( new Property( "albumArtURI", "upnp", false, "", true)); // MED
     pObject->AddProperty( new Property( "albumArtURI", "upnp", false, "", true)); // LRG
 
+#if 0
+    pObject->AddProperty( new Property( "publisher"       , "dc"   ));
+    pObject->AddProperty( new Property( "language"        , "dc"   ));
+    pObject->AddProperty( new Property( "relation"        , "dc"   ));
+    pObject->AddProperty( new Property( "rights"          , "dc"   ));
+
+
+    pObject->AddProperty( new Property( "playlist"            , "upnp" ));
+    pObject->AddProperty( new Property( "storageMedium"       , "upnp" ));
+    pObject->AddProperty( new Property( "contributor"         , "dc"   ));
+    pObject->AddProperty( new Property( "date"                , "dc"   ));
+#endif
+
     return( pObject );
 }
 
@@ -468,11 +489,26 @@ CDSObject *CDSObject::CreateVideoItem( QString sId, QString sTitle, QString sPar
     pObject->AddProperty( new Property( "rating"         , "upnp" ));
     pObject->AddProperty( new Property( "actor"          , "upnp" ));
     pObject->AddProperty( new Property( "director"       , "upnp" ));
+    pObject->AddProperty( new Property( "episodeNumber"  , "upnp" ));
+    pObject->AddProperty( new Property( "episodeCount"   , "upnp" ));
+    pObject->AddProperty( new Property( "seriesTitle"    , "upnp" ));
+    pObject->AddProperty( new Property( "programTitle"   , "upnp" ));
     pObject->AddProperty( new Property( "description"    , "dc"   ));
     pObject->AddProperty( new Property( "publisher"      , "dc"   ));
     pObject->AddProperty( new Property( "language"       , "dc"   ));
     pObject->AddProperty( new Property( "relation"       , "dc"   ));
 
+    pObject->AddProperty( new Property( "channelID"      , "upnp" ));
+    pObject->AddProperty( new Property( "callSign"       , "upnp" ));
+    pObject->AddProperty( new Property( "channelNr"      , "upnp" ));
+
+    pObject->AddProperty( new Property( "recordedStartDateTime"   , "upnp" ));
+    pObject->AddProperty( new Property( "recordedDuration"        , "upnp" ));
+    pObject->AddProperty( new Property( "recordedDayOfWeek"       , "upnp" ));
+
+    pObject->AddProperty( new Property( "programID"      , "upnp" ));
+    pObject->AddProperty( new Property( "seriesID"       , "upnp" ));
+
     // Added for Microsoft Media Player Compatibility
 
     pObject->AddProperty( new Property( "creator"        , "dc"   ));
@@ -490,7 +526,7 @@ CDSObject *CDSObject::CreateVideoItem( QString sId, QString sTitle, QString sPar
 
 /////////////////////////////////////////////////////////////////////////////
 
-CDSObject *CDSObject::CreateMovie( QString sId, QString sTitle, QString sParentId, CDSObject *pObject )  
+CDSObject *CDSObject::CreateMovie( QString sId, QString sTitle, QString sParentId, CDSObject *pObject )
 {
     if (pObject == NULL)
     {
@@ -524,6 +560,7 @@ CDSObject *CDSObject::CreateVideoBroadcast( QString sId, QString sTitle, QString
     pObject->AddProperty( new Property( "icon"     , "upnp" ));
     pObject->AddProperty( new Property( "region"   , "upnp" ));
     pObject->AddProperty( new Property( "channelNr", "upnp" ));
+    pObject->AddProperty( new Property( "callsign" , "upnp" ));
 
     return( pObject );
 }
diff --git a/mythtv/libs/libmythupnp/upnpcdsobjects.h b/mythtv/libs/libmythupnp/upnpcdsobjects.h
index 1f2b008..1be572e 100644
--- a/mythtv/libs/libmythupnp/upnpcdsobjects.h
+++ b/mythtv/libs/libmythupnp/upnpcdsobjects.h
@@ -205,7 +205,8 @@ class UPNP_PUBLIC CDSObject
         ContainerClass *AddSearchClass( ContainerClass *pClass );
         ContainerClass *AddCreateClass( ContainerClass *pClass );
 
-        void          SetPropValue( const QString &sName, const QString &sValue );
+        void          SetPropValue( const QString &sName, const QString &sValue,
+                                    const QString &type = "" );
         QString       GetPropValue( const QString &sName ) const;
         QString       toXml      ( FilterMap &filter ) const;
         void          toXml      ( QTextStream &os, FilterMap &filter ) const;
diff --git a/mythtv/programs/mythbackend/upnpcdsmusic.cpp b/mythtv/programs/mythbackend/upnpcdsmusic.cpp
index 68011fa..906993b 100644
--- a/mythtv/programs/mythbackend/upnpcdsmusic.cpp
+++ b/mythtv/programs/mythbackend/upnpcdsmusic.cpp
@@ -146,7 +146,8 @@ QString UPnpCDSMusic::GetItemListSQL( QString /* sColumn */ )
     return "SELECT song.song_id as intid, artist.artist_name as artist, "     \
            "album.album_name as album, song.name as title, "                  \
            "genre.genre, song.year, song.track as tracknum, "                 \
-           "song.description, song.filename, song.length, song.size "         \
+           "song.description, song.filename, song.length, song.size, "         \
+           "song.numplays, song.lastplay "                                    \
            "FROM music_songs song "                                           \
            " join music_artists artist on artist.artist_id = song.artist_id " \
            " join music_albums album on album.album_id = song.album_id "      \
@@ -271,6 +272,9 @@ void UPnpCDSMusic::AddItem( const UPnpCDSRequest    *pRequest,
     uint           nLengthMS    = query.value( 9).toInt();
     uint64_t       nFileSize    = (quint64)query.value(10).toULongLong();
 
+    int            nPlaybackCount = query.value(11).toInt();
+    QDateTime      lastPlayedTime = query.value(12).toDateTime();
+
 #if 0
     if ((nNodeIdx == 0) || (nNodeIdx == 1))
     {
@@ -331,23 +335,14 @@ void UPnpCDSMusic::AddItem( const UPnpCDSRequest    *pRequest,
     pItem->SetPropValue( "longDescription"      , sDescription);
 
     pItem->SetPropValue( "artist"               ,  sArtist    );
+    pItem->SetPropValue( "creator"              ,  sArtist    );
     pItem->SetPropValue( "album"                ,  sAlbum     );
     pItem->SetPropValue( "originalTrackNumber"  ,  QString::number(nTrackNum));
     if (nYear > 0 && nYear < 9999)
         pItem->SetPropValue( "date",  QDate(nYear,1,1).toString(Qt::ISODate));
 
-#if 0
-    pObject->AddProperty( new Property( "publisher"       , "dc"   ));
-    pObject->AddProperty( new Property( "language"        , "dc"   ));
-    pObject->AddProperty( new Property( "relation"        , "dc"   ));
-    pObject->AddProperty( new Property( "rights"          , "dc"   ));
-
-
-    pObject->AddProperty( new Property( "playlist"            , "upnp" ));
-    pObject->AddProperty( new Property( "storageMedium"       , "upnp" ));
-    pObject->AddProperty( new Property( "contributor"         , "dc"   ));
-    pObject->AddProperty( new Property( "date"                , "dc"   ));
-#endif
+    pItem->SetPropValue( "playbackCount"        , QString::number(nPlaybackCount));
+    pItem->SetPropValue( "lastPlaybackTime"     , lastPlayedTime.toString(Qt::ISODate));
 
 
     QUrl artURI = URIBase;
diff --git a/mythtv/programs/mythbackend/upnpcdstv.cpp b/mythtv/programs/mythbackend/upnpcdstv.cpp
index 9aae888..9e3d4bc 100644
--- a/mythtv/programs/mythbackend/upnpcdstv.cpp
+++ b/mythtv/programs/mythbackend/upnpcdstv.cpp
@@ -44,51 +44,51 @@ UPnpCDSRootInfo UPnpCDSTv::g_RootNodes[] =
         "SELECT 0 as key, "
           "CONCAT( title, ': ', subtitle) as name, "
           "1 as children "
-            "FROM recorded "
+            "FROM recorded r "
             "%1 "
-            "ORDER BY starttime DESC",
-        "", "starttime DESC" },
+            "ORDER BY r.starttime DESC",
+        "", "r.starttime DESC" },
 
     {   "By Title",
-        "title",
-        "SELECT title as id, "
-          "title as name, "
-          "count( title ) as children "
-            "FROM recorded "
+        "r.title",
+        "SELECT r.title as id, "
+          "r.title as name, "
+          "count( r.title ) as children "
+            "FROM recorded r "
             "%1 "
-            "GROUP BY title "
-            "ORDER BY title",
-        "WHERE title=:KEY", "title" },
+            "GROUP BY r.title "
+            "ORDER BY r.title",
+        "WHERE r.title=:KEY", "r.title" },
 
     {   "By Genre",
-        "category",
-        "SELECT category as id, "
-          "category as name, "
-          "count( category ) as children "
-            "FROM recorded "
+        "r.category",
+        "SELECT r.category as id, "
+          "r.category as name, "
+          "count( r.category ) as children "
+            "FROM recorded r "
             "%1 "
-            "GROUP BY category "
-            "ORDER BY category",
-        "WHERE category=:KEY", "category" },
+            "GROUP BY r.category "
+            "ORDER BY r.category",
+        "WHERE r.category=:KEY", "r.category" },
 
     {   "By Date",
-        "DATE_FORMAT(starttime, '%Y-%m-%d')",
-        "SELECT  DATE_FORMAT(starttime, '%Y-%m-%d') as id, "
-          "DATE_FORMAT(starttime, '%Y-%m-%d %W') as name, "
-          "count( DATE_FORMAT(starttime, '%Y-%m-%d %W') ) as children "
-            "FROM recorded "
+        "DATE_FORMAT(r.starttime, '%Y-%m-%d')",
+        "SELECT  DATE_FORMAT(r.starttime, '%Y-%m-%d') as id, "
+          "DATE_FORMAT(r.starttime, '%Y-%m-%d %W') as name, "
+          "count( DATE_FORMAT(r.starttime, '%Y-%m-%d %W') ) as children "
+            "FROM recorded r "
             "%1 "
             "GROUP BY name "
-            "ORDER BY starttime DESC",
-        "WHERE DATE_FORMAT(starttime, '%Y-%m-%d') =:KEY", "starttime DESC" },
+            "ORDER BY r.starttime DESC",
+        "WHERE DATE_FORMAT(r.starttime, '%Y-%m-%d') =:KEY", "r.starttime DESC" },
 
     {   "By Channel",
-        "chanid",
+        "r.chanid",
         "SELECT channel.chanid as id, "
           "CONCAT(channel.channum, ' ', channel.callsign) as name, "
           "count( channum ) as children "
             "FROM channel "
-                "INNER JOIN recorded ON channel.chanid = recorded.chanid "
+                "INNER JOIN recorded r ON channel.chanid = r.chanid "
             "%1 "
             "GROUP BY name "
             "ORDER BY channel.chanid",
@@ -134,7 +134,7 @@ int UPnpCDSTv::GetRootCount()
 
 QString UPnpCDSTv::GetTableName( QString /* sColumn */)
 {
-    return "recorded";
+    return "recorded r";
 }
 
 /////////////////////////////////////////////////////////////////////////////
@@ -143,12 +143,19 @@ QString UPnpCDSTv::GetTableName( QString /* sColumn */)
 
 QString UPnpCDSTv::GetItemListSQL( QString /* sColumn */ )
 {
-    return "SELECT chanid, starttime, endtime, title, " \
-                  "subtitle, description, category, "   \
-                  "hostname, recgroup, filesize, "      \
-                  "basename, progstart, progend, "      \
-                  "storagegroup, inetref "              \
-           "FROM recorded ";
+    return "SELECT r.chanid, r.starttime, r.endtime, r.title, " \
+                  "r.subtitle, r.description, r.category, "     \
+                  "r.hostname, r.recgroup, r.filesize, "        \
+                  "r.basename, r.progstart, r.progend, "        \
+                  "r.storagegroup, r.inetref, "                 \
+                  "p.category_type, c.callsign, c.channum, "    \
+                  "p.episode, p.totalepisodes, p.season, "      \
+                  "r.programid, r.seriesid, r.recordid, "       \
+                  "c.default_authority, c.name "                \
+           "FROM recorded r "                                   \
+           "LEFT JOIN channel c ON r.chanid=c.chanid "          \
+           "LEFT JOIN recordedprogram p ON p.chanid=r.chanid "  \
+           "                          AND p.starttime=r.progstart";
 }
 
 /////////////////////////////////////////////////////////////////////////////
@@ -160,7 +167,7 @@ void UPnpCDSTv::BuildItemQuery( MSqlQuery &query, const QStringMap &mapParams )
     int     nChanId    = mapParams[ "ChanId"    ].toInt();
     QString sStartTime = mapParams[ "StartTime" ];
 
-    QString sSQL = QString("%1 WHERE chanid=:CHANID AND starttime=:STARTTIME ")
+    QString sSQL = QString("%1 WHERE r.chanid=:CHANID AND r.starttime=:STARTTIME ")
                       .arg( GetItemListSQL() );
 
     query.prepare( sSQL );
@@ -303,6 +310,20 @@ void UPnpCDSTv::AddItem( const UPnpCDSRequest    *pRequest,
     QString        sStorageGrp  = query.value(13).toString();
 
     QString        sInetRef     = query.value(14).toString();
+    QString        sCatType     = query.value(15).toString();
+    QString        sCallsign    = query.value(16).toString();
+    QString        sChanNum     = query.value(17).toString();
+
+    int            nEpisode      = query.value(18).toInt();
+    int            nEpisodeTotal = query.value(19).toInt();
+    int            nSeason       = query.value(20).toInt();
+
+    QString        sProgramId   = query.value(21).toString();
+    QString        sSeriesId    = query.value(22).toString();
+    int            nRecordId    = query.value(23).toInt();
+
+    QString        sDefaultAuthority = query.value(24).toString();
+    QString        sChanName    = query.value(25).toString();
 
     // ----------------------------------------------------------------------
     // Cache Host ip Address & Port
@@ -350,6 +371,59 @@ void UPnpCDSTv::AddItem( const UPnpCDSRequest    *pRequest,
     pItem->SetPropValue( "longDescription", sDescription );
     pItem->SetPropValue( "description"    , sSubtitle    );
 
+    pItem->SetPropValue( "channelName"    , sChanName   );
+    pItem->SetPropValue( "channelID"      , QString::number(nChanid), "NETWORK");
+    pItem->SetPropValue( "callSign"       , sCallsign    );
+    pItem->SetPropValue( "channelNr"      , sChanNum     );
+
+    if (sCatType != "movie")
+    {
+        pItem->SetPropValue( "seriesTitle"  , sTitle);
+        pItem->SetPropValue( "programTitle"  , sSubtitle);
+    }
+    else
+        pItem->SetPropValue( "programTitle"  , sTitle);
+
+    if (   nEpisode > 0 || nSeason > 0) // There has got to be a better way
+    {
+        pItem->SetPropValue( "episodeNumber" , QString::number(nEpisode));
+        pItem->SetPropValue( "episodeCount"  , QString::number(nEpisodeTotal));
+    }
+
+    pItem->SetPropValue( "recordedStartDateTime", dtStartTime.toString(Qt::ISODate)); //dtStartTime
+    //pItem->SetPropValue( "recordedDuration", );
+    pItem->SetPropValue( "recordedDayOfWeek"    , dtStartTime.toString("ddd"));
+    pItem->SetPropValue( "srsRecordScheduleID"  , QString::number(nRecordId));
+
+    if (!sSeriesId.isEmpty())
+    {
+        // FIXME: This should be set correctly for EIT data to SI_SERIESID and
+        //        for known sources such as TMS to the correct identifier
+        QString sIdType = "mythtv.org_XMLTV";
+        if (sProgramId.contains(sDefaultAuthority))
+            sIdType = "mythtv.org_EIT";
+
+        pItem->SetPropValue( "seriesID", sSeriesId, sIdType );
+    }
+
+    if (!sProgramId.isEmpty())
+    {
+        // FIXME: This should be set correctly for EIT data to SI_PROGRAMID and
+        //        for known sources such as TMS to the correct identifier
+        QString sIdType = "mythtv.org_XMLTV";
+        if (sProgramId.contains(sDefaultAuthority))
+            sIdType = "mythtv.org_EIT";
+
+        pItem->SetPropValue( "programID", sProgramId, sIdType );
+    }
+
+    pItem->SetPropValue( "date"          , dtStartTime.toString(Qt::ISODate));
+
+
+    // Bookmark support
+    //pItem->SetPropValue( "lastPlaybackPosition", QString::number());
+
+
     //pItem->SetPropValue( "producer"       , );
     //pItem->SetPropValue( "rating"         , );
     //pItem->SetPropValue( "actor"          , );
@@ -364,11 +438,10 @@ void UPnpCDSTv::AddItem( const UPnpCDSRequest    *pRequest,
     // (Won't display correct Title without them)
     // ----------------------------------------------------------------------
 
-    pItem->SetPropValue( "creator"       , "[Unknown Author]" );
-    pItem->SetPropValue( "artist"        , "[Unknown Author]" );
-    pItem->SetPropValue( "album"         , "[Unknown Series]" );
-    pItem->SetPropValue( "actor"         , "[Unknown Author]" );
-    pItem->SetPropValue( "date"          , dtStartTime.toString(Qt::ISODate));
+//     pItem->SetPropValue( "creator"       , "[Unknown Author]" );
+//     pItem->SetPropValue( "artist"        , "[Unknown Author]" );
+//     pItem->SetPropValue( "album"         , "[Unknown Series]" );
+//     pItem->SetPropValue( "actor"         , "[Unknown Author]" );
 
     pResults->Add( pItem );
 
@@ -416,7 +489,6 @@ void UPnpCDSTv::AddItem( const UPnpCDSRequest    *pRequest,
     resURI.addQueryItem("StartTime", dtStartTime.toString(Qt::ISODate));
 
     Resource *pRes = pItem->AddResource( sProtocol, resURI.toEncoded() );
-    LOG(VB_GENERAL, LOG_NOTICE, resURI.toEncoded());
     uint uiStart = dtProgStart.toTime_t();
     uint uiEnd   = dtProgEnd.toTime_t();
     uint uiDurMS   = (uiEnd - uiStart) * 1000;
diff --git a/mythtv/programs/mythbackend/upnpcdsvideo.cpp b/mythtv/programs/mythbackend/upnpcdsvideo.cpp
index 957811d..7f8c59a 100644
--- a/mythtv/programs/mythbackend/upnpcdsvideo.cpp
+++ b/mythtv/programs/mythbackend/upnpcdsvideo.cpp
@@ -383,8 +383,8 @@ void UPnpCDSVideo::AddItem( const UPnpCDSRequest    *pRequest,
     // int             nYear        = query.value( 7).toInt();
     // int             nUserRating  = query.value( 8).toInt();
     int            nLength      = query.value( 9).toInt();
-    // int             nSeason      = query.value(10).toInt();
-    // int             nEpisode     = query.value(11).toInt();
+    int            nSeason      = query.value(10).toInt();
+    int            nEpisode     = query.value(11).toInt();
     QString        sCoverArt    = query.value(12).toString();
     QDateTime      dtInsertDate =
         MythDate::as_utc(query.value(13).toDateTime());
@@ -457,13 +457,26 @@ void UPnpCDSVideo::AddItem( const UPnpCDSRequest    *pRequest,
     pItem->m_sWriteStatus = "WRITABLE";
 
     pItem->SetPropValue( "longDescription", sPlot );
-    // ?? pItem->SetPropValue( "description"    , sTitle );
+    // ?? pItem->SetPropValue( "description"    , sPlot );
     pItem->SetPropValue( "director"       , sDirector );
 
+    if (nEpisode > 0 || nSeason > 0) // There has got to be a better way
+    {
+        pItem->SetPropValue( "seriesTitle"  , sTitle);
+        pItem->SetPropValue( "programTitle"  , sSubtitle);
+        pItem->SetPropValue( "episodeNumber"  , QString::number(nEpisode));
+        //pItem->SetPropValue( "episodeCount"  , nEpisodeCount);
+    }
+
+    // TODO Implement the following
+    // pItem->SetPropValue( "genre"       , sCategory );
+
+    // HACK: Windows Media Centre Compat
     pItem->SetPropValue( "genre"          , "[Unknown Genre]"     );
     pItem->SetPropValue( "actor"          , "[Unknown Author]"    );
     pItem->SetPropValue( "creator"        , "[Unknown Creator]"   );
     pItem->SetPropValue( "album"          , "[Unknown Album]"     );
+    ////
 
     //pItem->SetPropValue( "producer"       , );
     //pItem->SetPropValue( "rating"         , );
-- 
1.7.10.2

