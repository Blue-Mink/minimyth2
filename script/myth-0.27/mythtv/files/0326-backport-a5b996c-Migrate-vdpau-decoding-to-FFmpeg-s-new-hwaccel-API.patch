diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/avformatdecoder.cpp mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/avformatdecoder.cpp
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/avformatdecoder.cpp	2014-05-05 12:04:42.569959286 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/avformatdecoder.cpp	2014-05-05 12:05:09.096476382 +0200
@@ -222,20 +222,6 @@
     return 1;
 }
 
-static AVCodec *find_vdpau_decoder(AVCodec *c, enum CodecID id)
-{
-    AVCodec *codec = c;
-    while (codec)
-    {
-        if (codec->id == id && CODEC_IS_VDPAU(codec))
-            return codec;
-
-        codec = codec->next;
-    }
-
-    return c;
-}
-
 static void myth_av_log(void *ptr, int level, const char* fmt, va_list vl)
 {
     if (silence_ffmpeg_logging)
@@ -1396,27 +1382,10 @@
     return fps;
 }
 
-static bool IS_VDPAU_PIX_FMT(enum PixelFormat fmt)
-{
-    return
-        fmt == PIX_FMT_VDPAU_H264  ||
-        fmt == PIX_FMT_VDPAU_MPEG1 ||
-        fmt == PIX_FMT_VDPAU_MPEG2 ||
-        fmt == PIX_FMT_VDPAU_MPEG4 ||
-        fmt == PIX_FMT_VDPAU_WMV3  ||
-        fmt == PIX_FMT_VDPAU_VC1;
-}
-
 static enum PixelFormat get_format_vdpau(struct AVCodecContext *avctx,
                                          const enum PixelFormat *fmt)
 {
-    int i = 0;
-
-    for(i=0; fmt[i]!=PIX_FMT_NONE; i++)
-        if (IS_VDPAU_PIX_FMT(fmt[i]))
-            break;
-
-    return fmt[i];
+    return AV_PIX_FMT_VDPAU;
 }
 
 // Declared seperately to allow attribute
@@ -1496,9 +1465,6 @@
     enc->error_rate = 0;
 
     AVCodec *codec = avcodec_find_decoder(enc->codec_id);
-    // look for a vdpau capable codec
-    if (codec_is_vdpau(video_codec_id) && !CODEC_IS_VDPAU(codec))
-        codec = find_vdpau_decoder(codec, enc->codec_id);
 
     if (selectedStream)
     {
@@ -1515,7 +1481,7 @@
     if (metatag && metatag->value && QString("180") == metatag->value)
         video_inverted = true;
 
-    if (CODEC_IS_VDPAU(codec))
+    if (codec_is_vdpau(video_codec_id))
     {
         enc->get_buffer      = get_avf_buffer_vdpau;
         enc->get_format      = get_format_vdpau;
@@ -2328,7 +2294,6 @@
 
                 if (vdpau_mcid >= video_codec_id)
                 {
-                    enc->codec_id = (CodecID) myth2av_codecid(vdpau_mcid);
                     video_codec_id = vdpau_mcid;
                 }
 #endif // USING_VDPAU
@@ -2418,11 +2383,6 @@
                 QString("Using %1 for video decoding")
                 .arg(GetCodecDecoderName()));
 
-            if (codec_is_vdpau(video_codec_id) && !CODEC_IS_VDPAU(codec))
-            {
-                codec = find_vdpau_decoder(codec, enc->codec_id);
-            }
-
             if (!enc->codec)
             {
                 QMutexLocker locker(avcodeclock);
@@ -2783,8 +2743,7 @@
     VideoFrame *frame = nd->GetPlayer()->GetNextVideoFrame();
 
     pic->data[0] = frame->buf;
-    pic->data[1] = frame->priv[0];
-    pic->data[2] = frame->priv[1];
+    pic->data[1] = pic->data[2] = NULL;
 
     pic->linesize[0] = 0;
     pic->linesize[1] = 0;
@@ -2798,6 +2757,12 @@
 #ifdef USING_VDPAU
     struct vdpau_render_state *render = (struct vdpau_render_state *)frame->buf;
     render->state |= FF_VDPAU_STATE_USED_FOR_REFERENCE;
+    pic->data[3] = (uint8_t*)(uintptr_t)render->surface;
+    static uint8_t *dummy[1] = { 0 };
+    if (nd->GetPlayer())
+    {
+        c->hwaccel_context = nd->GetPlayer()->GetDecoderContext(NULL, dummy[0]);
+    }
 #endif
 
     pic->reordered_opaque = c->reordered_opaque;
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/videoout_nullvdpau.cpp mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/videoout_nullvdpau.cpp
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/videoout_nullvdpau.cpp	2014-05-05 12:04:42.549959399 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/videoout_nullvdpau.cpp	2014-05-05 12:05:09.243142221 +0200
@@ -29,6 +29,7 @@
     m_checked_surface_ownership(false), m_shadowBuffers(NULL),
     m_surfaceSize(QSize(0,0))
 {
+    m_context.bitstream_buffers_allocated = 0;
 }
 
 VideoOutputNullVDPAU::~VideoOutputNullVDPAU()
@@ -72,8 +73,16 @@
 bool VideoOutputNullVDPAU::InitRender(void)
 {
     QMutexLocker locker(&m_lock);
+
+    if (m_context.bitstream_buffers_allocated)
+    {
+        av_freep(&m_context.bitstream_buffers);
+    }
+    memset(&m_context, 0, sizeof(AVVDPAUContext));
+    m_context.render = Render;
+
     m_render = new MythRenderVDPAU();
-    if (m_render && m_render->CreateDecodeOnly())
+    if (m_render->CreateDecodeOnly())
         return true;
     LOG(VB_GENERAL, LOG_ERR, LOC + "Failed to initialise VDPAU");
     return false;
@@ -89,8 +98,14 @@
         m_render->DecrRef();
     }
 
+    if (m_context.bitstream_buffers_allocated)
+    {
+        av_freep(&m_context.bitstream_buffers);
+        m_context.bitstream_buffers_allocated = 0;
+    }
+
     m_decoder = 0;
-    m_render = NULL;
+    m_render  = NULL;
     m_pix_fmt = -1;
 }
 
@@ -269,9 +284,9 @@
         }
 
         uint max_refs = MIN_REFERENCE_FRAMES;
-        if (frame->pix_fmt == PIX_FMT_VDPAU_H264)
+        if (video_codec_id == kCodec_H264_VDPAU)
         {
-            max_refs = render->info.h264.num_ref_frames;
+            max_refs = m_context.info.h264.num_ref_frames;
             if (max_refs < 1 || max_refs > MAX_REFERENCE_FRAMES)
             {
                 uint32_t round_width  = (frame->width + 15) & ~15;
@@ -321,29 +336,29 @@
         }
 
         VdpDecoderProfile vdp_decoder_profile;
-        switch (frame->pix_fmt)
+        switch (video_codec_id)
         {
-            case PIX_FMT_VDPAU_MPEG1:
+            case kCodec_MPEG1_VDPAU:
                 vdp_decoder_profile = VDP_DECODER_PROFILE_MPEG1;
                 break;
-            case PIX_FMT_VDPAU_MPEG2:
+            case kCodec_MPEG2_VDPAU:
                 vdp_decoder_profile = VDP_DECODER_PROFILE_MPEG2_MAIN;
                 break;
-            case PIX_FMT_VDPAU_MPEG4:
+            case kCodec_MPEG4_VDPAU:
                 vdp_decoder_profile = VDP_DECODER_PROFILE_MPEG4_PART2_ASP;
                 break;
-            case PIX_FMT_VDPAU_H264:
+            case kCodec_H264_VDPAU:
                 vdp_decoder_profile = VDP_DECODER_PROFILE_H264_HIGH;
                 break;
-            case PIX_FMT_VDPAU_WMV3:
+            case kCodec_WMV3_VDPAU:
                 vdp_decoder_profile = VDP_DECODER_PROFILE_VC1_MAIN;
                 break;
-            case PIX_FMT_VDPAU_VC1:
+            case kCodec_VC1_VDPAU:
                 vdp_decoder_profile = VDP_DECODER_PROFILE_VC1_ADVANCED;
                 break;
             default:
                 LOG(VB_GENERAL, LOG_ERR, LOC +
-                    "Picture format is not supported.");
+                    "Codec is not supported.");
                 errorState = kError_Unknown;
                 return;
         }
@@ -372,7 +387,7 @@
         return;
     }
 
-    m_render->Decode(m_decoder, render);
+    m_render->Decode(m_decoder, render, &m_context);
 }
 
 void VideoOutputNullVDPAU::ClearAfterSeek(void)
@@ -613,3 +628,16 @@
     }
     return true;
 }
+
+void* VideoOutputNullVDPAU::GetDecoderContext(unsigned char* buf, uint8_t*& id)
+{
+    return &m_context;
+}
+
+VdpStatus VideoOutputNullVDPAU::Render(VdpDecoder decoder, VdpVideoSurface target,
+                                       VdpPictureInfo const *picture_info,
+                                       uint32_t bitstream_buffer_count,
+                                       VdpBitstreamBuffer const *bitstream_buffers)
+{
+    return VDP_STATUS_OK;
+}
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/videoout_nullvdpau.h mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/videoout_nullvdpau.h
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/videoout_nullvdpau.h	2014-05-05 12:04:42.549959399 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/videoout_nullvdpau.h	2014-05-05 12:05:09.296475255 +0200
@@ -39,6 +39,7 @@
                       const QSize &video_dim_disp,
                       float aspect, WId winid,
                       const QRect &win_rect, MythCodecID codec_id);
+    virtual void* GetDecoderContext(unsigned char* buf, uint8_t*& id);
     virtual bool InputChanged(const QSize &video_dim_buf,
                               const QSize &video_dim_disp,
                               float        aspect,
@@ -70,6 +71,10 @@
                                     const QString &name) { return false; }
     virtual MythPainter *GetOSDPainter(void) { return NULL; }
     virtual void DrawSlice(VideoFrame *frame, int x, int y, int w, int h);
+    static VdpStatus Render(VdpDecoder decoder, VdpVideoSurface target,
+                            VdpPictureInfo const *picture_info,
+                            uint32_t bitstream_buffer_count,
+                            VdpBitstreamBuffer const *bitstream_buffers);
 
     virtual VideoFrame *GetLastDecodedFrame(void);
     virtual VideoFrame *GetLastShownFrame(void);
@@ -93,6 +98,7 @@
 
   private:
     MythRenderVDPAU *m_render;
+    AVVDPAUContext   m_context;
     QMutex           m_lock;
     uint             m_decoder;
     int              m_pix_fmt;
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/videoout_vdpau.cpp mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/videoout_vdpau.cpp
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/videoout_vdpau.cpp	2014-05-05 12:04:42.566625971 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/videoout_vdpau.cpp	2014-05-05 12:05:09.326475086 +0200
@@ -67,6 +67,7 @@
 {
     if (gCoreContext->GetNumSetting("UseVideoModes", 0))
         display_res = DisplayRes::GetDisplayRes(true);
+    m_context.bitstream_buffers_allocated = 0;
 }
 
 VideoOutputVDPAU::~VideoOutputVDPAU()
@@ -101,7 +102,7 @@
     QMutexLocker locker(&m_lock);
     window.SetNeedRepaint(true);
     bool ok = VideoOutput::Init(video_dim_buf, video_dim_disp,
-                                aspect, winid, win_rect,codec_id);
+                                aspect, winid, win_rect, codec_id);
     if (db_vdisp_profile)
         db_vdisp_profile->SetVideoRenderer("vdpau");
 
@@ -130,9 +131,16 @@
     QMutexLocker locker(&m_lock);
 
     const QSize size = window.GetDisplayVisibleRect().size();
-    m_render = new MythRenderVDPAU();
 
-    if (m_render && m_render->Create(size, m_win))
+    if (m_context.bitstream_buffers_allocated)
+    {
+        av_freep(&m_context.bitstream_buffers);
+    }
+    memset(&m_context, 0, sizeof(AVVDPAUContext));
+    m_context.render = Render;
+
+    m_render = new MythRenderVDPAU();
+    if (m_render->Create(size, m_win))
     {
         m_osd_painter = new MythVDPAUPainter(m_render);
         if (m_osd_painter)
@@ -168,6 +176,12 @@
         m_render = NULL;
     }
 
+    if (m_context.bitstream_buffers_allocated)
+    {
+        av_freep(&m_context.bitstream_buffers);
+        m_context.bitstream_buffers_allocated = 0;
+    }
+
     m_checked_output_surfaces = false;
     m_osd_painter = NULL;
     m_decoder = 0;
@@ -587,9 +601,9 @@
         }
 
         uint max_refs = MIN_REFERENCE_FRAMES;
-        if (frame->pix_fmt == PIX_FMT_VDPAU_H264)
+        if (video_codec_id == kCodec_H264_VDPAU)
         {
-            max_refs = render->info.h264.num_ref_frames;
+            max_refs = m_context.info.h264.num_ref_frames;
             if (max_refs < 1 || max_refs > MAX_REFERENCE_FRAMES)
             {
                 uint32_t round_width  = (frame->width + 15) & ~15;
@@ -633,29 +647,29 @@
         }
 
         VdpDecoderProfile vdp_decoder_profile;
-        switch (frame->pix_fmt)
+        switch (video_codec_id)
         {
-            case PIX_FMT_VDPAU_MPEG1:
+            case kCodec_MPEG1_VDPAU:
                 vdp_decoder_profile = VDP_DECODER_PROFILE_MPEG1;
                 break;
-            case PIX_FMT_VDPAU_MPEG2:
+            case kCodec_MPEG2_VDPAU:
                 vdp_decoder_profile = VDP_DECODER_PROFILE_MPEG2_MAIN;
                 break;
-            case PIX_FMT_VDPAU_MPEG4:
+            case kCodec_MPEG4_VDPAU:
                 vdp_decoder_profile = VDP_DECODER_PROFILE_MPEG4_PART2_ASP;
                 break;
-            case PIX_FMT_VDPAU_H264:
+            case kCodec_H264_VDPAU:
                 vdp_decoder_profile = VDP_DECODER_PROFILE_H264_HIGH;
                 break;
-            case PIX_FMT_VDPAU_WMV3:
+            case kCodec_WMV3_VDPAU:
                 vdp_decoder_profile = VDP_DECODER_PROFILE_VC1_MAIN;
                 break;
-            case PIX_FMT_VDPAU_VC1:
+            case kCodec_VC1_VDPAU:
                 vdp_decoder_profile = VDP_DECODER_PROFILE_VC1_ADVANCED;
                 break;
             default:
                 LOG(VB_GENERAL, LOG_ERR, LOC +
-                    "Picture format is not supported.");
+                    "Codec is not supported.");
                 errorState = kError_Unknown;
                 return;
         }
@@ -684,7 +698,7 @@
         return;
     }
 
-    m_render->Decode(m_decoder, render);
+    m_render->Decode(m_decoder, render, &m_context);
 }
 
 void VideoOutputVDPAU::Show(FrameScanType scan)
@@ -1327,3 +1341,16 @@
     }
     m_render->SetVideoFlip();
 }
+
+void* VideoOutputVDPAU::GetDecoderContext(unsigned char* buf, uint8_t*& id)
+{
+    return &m_context;
+}
+
+VdpStatus VideoOutputVDPAU::Render(VdpDecoder decoder, VdpVideoSurface target,
+                         VdpPictureInfo const *picture_info,
+                         uint32_t bitstream_buffer_count,
+                         VdpBitstreamBuffer const *bitstream_buffers)
+{
+    return VDP_STATUS_OK;
+}
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/videoout_vdpau.h mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/videoout_vdpau.h
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythtv/videoout_vdpau.h	2014-05-05 12:04:42.566625971 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythtv/videoout_vdpau.h	2014-05-05 12:05:09.343141659 +0200
@@ -25,6 +25,7 @@
               const QSize &video_dim_disp,
               float aspect,
               WId winid, const QRect &win_rect, MythCodecID codec_id);
+    virtual void* GetDecoderContext(unsigned char* buf, uint8_t*& id);
     bool SetDeinterlacingEnabled(bool interlaced);
     bool SetupDeinterlace(bool interlaced, const QString& ovrf="");
     bool ApproveDeintFilter(const QString& filtername) const;
@@ -34,6 +35,10 @@
                       FrameScanType scan);
     void PrepareFrame(VideoFrame*, FrameScanType, OSD *osd);
     void DrawSlice(VideoFrame*, int x, int y, int w, int h);
+    static VdpStatus Render(VdpDecoder decoder, VdpVideoSurface target,
+                            VdpPictureInfo const *picture_info,
+                            uint32_t bitstream_buffer_count,
+                            VdpBitstreamBuffer const *bitstream_buffers);
     void Show(FrameScanType);
     void ClearAfterSeek(void);
     bool InputChanged(const QSize &video_dim_buf,
@@ -105,6 +110,7 @@
 
     Window               m_win;
     MythRenderVDPAU     *m_render;
+    AVVDPAUContext       m_context;
 
     uint                 m_decoder_buffer_size;
     uint                 m_process_buffer_size;
@@ -136,5 +142,3 @@
 };
 
 #endif // VIDEOOUT_VDPAU_H
-
-
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythui/mythrender_vdpau.cpp mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythui/mythrender_vdpau.cpp
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythui/mythrender_vdpau.cpp	2014-05-05 12:04:42.583292544 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythui/mythrender_vdpau.cpp	2014-05-05 12:05:09.349808287 +0200
@@ -1515,7 +1515,8 @@
     m_videoSurfaces[id].m_owner = QThread::currentThread();
 }
 
-void MythRenderVDPAU::Decode(uint id, struct vdpau_render_state *render)
+void MythRenderVDPAU::Decode(uint id, struct vdpau_render_state *render,
+                             AVVDPAUContext *context)
 {
     CHECK_VIDEO_SURFACES()
 
@@ -1528,9 +1529,9 @@
 
     INIT_ST
     vdp_st = vdp_decoder_render(m_decoders[id].m_id, render->surface,
-                               (VdpPictureInfo const *)&(render->info),
-                                render->bitstream_buffers_used,
-                                render->bitstream_buffers);
+                               (VdpPictureInfo const *)&(context->info),
+                                context->bitstream_buffers_used,
+                                context->bitstream_buffers);
     CHECK_ST
 }
 
diff -Naur mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythui/mythrender_vdpau.h mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythui/mythrender_vdpau.h
--- mythtv-0.27-20140504-ge2acf0d-old/mythtv/libs/libmythui/mythrender_vdpau.h	2014-05-05 12:04:42.586625858 +0200
+++ mythtv-0.27-20140504-ge2acf0d-new/mythtv/libs/libmythui/mythrender_vdpau.h	2014-05-05 12:05:09.373141489 +0200
@@ -134,7 +134,8 @@
     void  ClearVideoSurface(uint id);
     void  ChangeVideoSurfaceOwner(uint id);
 
-    void  Decode(uint id, struct vdpau_render_state *render);
+    void  Decode(uint id, struct vdpau_render_state *render,
+                 AVVDPAUContext *context);
     void  SetVideoFlip(void) { m_flipFrames = true; }
 
   private:
