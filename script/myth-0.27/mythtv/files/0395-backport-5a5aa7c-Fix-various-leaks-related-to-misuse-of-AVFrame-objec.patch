From 5a5aa7cb1bfec033c8bf7459d89afdef4a0102e8 Mon Sep 17 00:00:00 2001
From: Jean-Yves Avenard <jyavenard@mythtv.org>
Date: Sat, 7 Jun 2014 03:21:49 +1000
Subject: [PATCH 05/13] Fix various leaks related to misuse of AVFrame object

---
 .../mytharchive/mytharchive/thumbfinder.cpp        |    5 ++-
 mythplugins/mytharchive/mytharchivehelper/main.cpp |   20 ++++++----
 mythtv/libs/libmythtv/mhi.cpp                      |   10 +++--
 .../libmythtv/recorders/NuppelVideoRecorder.cpp    |   39 ++++++++++++--------
 .../libs/libmythtv/recorders/NuppelVideoRecorder.h |    1 -
 5 files changed, 44 insertions(+), 31 deletions(-)

diff --git a/mythplugins/mytharchive/mytharchive/thumbfinder.cpp b/mythplugins/mytharchive/mytharchive/thumbfinder.cpp
index 4358b63..5ddb23b 100644
--- a/mythplugins/mytharchive/mytharchive/thumbfinder.cpp
+++ b/mythplugins/mytharchive/mytharchive/thumbfinder.cpp
@@ -643,7 +643,7 @@ bool ThumbFinder::initAVCodec(const QString &inFile)
     int bufflen = m_frameWidth * m_frameHeight * 4;
     m_outputbuf = new unsigned char[bufflen];
 
-    m_frame = avcodec_alloc_frame();
+    m_frame = av_frame_alloc();
 
     m_frameFile = getTempDirectory() + "work/frame.jpg";
 
@@ -847,6 +847,7 @@ bool ThumbFinder::getFrameImage(bool needKeyFrame, int64_t requiredPTS)
             if (m_firstIFramePTS == -1)
                 m_firstIFramePTS = pkt.dts;
 
+            av_frame_unref(m_frame);
             avcodec_decode_video2(m_codecCtx, m_frame, &frameFinished, &pkt);
 
             if (requiredPTS != -1 && pkt.dts != (int64_t)AV_NOPTS_VALUE && pkt.dts < requiredPTS)
@@ -899,7 +900,7 @@ void ThumbFinder::closeAVCodec()
         delete[] m_outputbuf;
 
     // free the frame
-    av_free(m_frame);
+    av_frame_free(&m_frame);
 
     // close the codec
     if (m_codecCtx)
diff --git a/mythplugins/mytharchive/mytharchivehelper/main.cpp b/mythplugins/mytharchive/mytharchivehelper/main.cpp
index 8d5dd2b..6dcbb2d 100644
--- a/mythplugins/mytharchive/mytharchivehelper/main.cpp
+++ b/mythplugins/mytharchive/mytharchivehelper/main.cpp
@@ -65,6 +65,7 @@ using namespace std;
 #include <mythsystemlegacy.h>
 #include <mythdate.h>
 #include <mythlogging.h>
+#include <mythavutil.h>
 
 extern "C" {
 #include <libavcodec/avcodec.h>
@@ -1679,7 +1680,11 @@ static int grabThumbnail(QString inFile, QString thumbList, QString outFile, int
 
     // get list of required thumbs
     QStringList list = thumbList.split(",", QString::SkipEmptyParts);
-    AVFrame *frame = av_frame_alloc();
+    MythAVFrame frame;
+    if (!frame)
+    {
+        return 1;
+    }
     AVPacket pkt;
     AVPicture orig;
     AVPicture retbuf;
@@ -1703,6 +1708,7 @@ static int grabThumbnail(QString inFile, QString thumbList, QString outFile, int
                 thumbCount++;
 
                 avcodec_flush_buffers(codecCtx);
+                av_frame_unref(frame);
                 avcodec_decode_video2(codecCtx, frame, &frameFinished, &pkt);
                 keyFrame = frame->key_frame;
 
@@ -1715,6 +1721,7 @@ static int grabThumbnail(QString inFile, QString thumbList, QString outFile, int
                     if (pkt.stream_index == videostream)
                     {
                         frameNo++;
+                        av_frame_unref(frame);
                         avcodec_decode_video2(codecCtx, frame, &frameFinished, &pkt);
                         keyFrame = frame->key_frame;
                     }
@@ -1739,14 +1746,14 @@ static int grabThumbnail(QString inFile, QString thumbList, QString outFile, int
                         avpicture_fill(&retbuf, outputbuf,
                                        PIX_FMT_RGB32, width, height);
 
-                        avpicture_deinterlace((AVPicture*)frame,
-                                              (AVPicture*)frame,
+                        AVFrame *tmp = frame;
+                        avpicture_deinterlace((AVPicture*)tmp,
+                                              (AVPicture*)tmp,
                                               codecCtx->pix_fmt, width, height);
 
-
                         myth_sws_img_convert(
                                     &retbuf, PIX_FMT_RGB32,
-                                    (AVPicture*) frame,
+                                    (AVPicture*) tmp,
                                     codecCtx->pix_fmt, width, height);
 
                         QImage img(outputbuf, width, height,
@@ -1794,9 +1801,6 @@ static int grabThumbnail(QString inFile, QString thumbList, QString outFile, int
     if (outputbuf)
         delete[] outputbuf;
 
-    // free the frame
-    av_frame_free(&frame);
-
     // close the codec
     avcodec_close(codecCtx);
 
diff --git a/mythtv/libs/libmythtv/mhi.cpp b/mythtv/libs/libmythtv/mhi.cpp
index 4cc9ec9..cf39bc2 100644
--- a/mythtv/libs/libmythtv/mhi.cpp
+++ b/mythtv/libs/libmythtv/mhi.cpp
@@ -16,6 +16,7 @@
 #include "myth_imgconvert.h"
 #include "mythlogging.h"
 #include "mythmainwindow.h"
+#include "mythavutil.h"
 
 static bool       ft_loaded = false;
 static FT_Library ft_library;
@@ -1803,7 +1804,7 @@ void MHIBitmap::CreateFromJPEG(const unsigned char *data, int length)
 void MHIBitmap::CreateFromMPEG(const unsigned char *data, int length)
 {
     AVCodecContext *c = NULL;
-    AVFrame *picture = NULL;
+    MythAVFrame picture;
     AVPacket pkt;
     uint8_t *buff = NULL;
     int gotPicture = 0, len;
@@ -1813,9 +1814,10 @@ void MHIBitmap::CreateFromMPEG(const unsigned char *data, int length)
     AVCodec *codec = avcodec_find_decoder(CODEC_ID_MPEG2VIDEO);
     if (!codec)
         return;
+    if (!picture)
+        return;
 
     c = avcodec_alloc_context3(NULL);
-    picture = av_frame_alloc();
 
     if (avcodec_open2(c, codec, NULL) < 0)
         goto Close;
@@ -1861,8 +1863,9 @@ void MHIBitmap::CreateFromMPEG(const unsigned char *data, int length)
         avpicture_fill(&retbuf, outputbuf, PIX_FMT_RGB24,
                        nContentWidth, nContentHeight);
 
+        AVFrame *tmp = picture;
         myth_sws_img_convert(
-            &retbuf, PIX_FMT_RGB24, (AVPicture*)picture, c->pix_fmt,
+            &retbuf, PIX_FMT_RGB24, (AVPicture*)tmp, c->pix_fmt,
                     nContentWidth, nContentHeight);
 
         uint8_t * buf = outputbuf;
@@ -1887,7 +1890,6 @@ Close:
     av_free_packet(&pkt);
     avcodec_close(c);
     av_free(c);
-    av_frame_free(&picture);
 }
 
 // Scale the bitmap.  Only used for image derived from MPEG I-frames.
diff --git a/mythtv/libs/libmythtv/recorders/NuppelVideoRecorder.cpp b/mythtv/libs/libmythtv/recorders/NuppelVideoRecorder.cpp
index ed57a6b..29fc540 100644
--- a/mythtv/libs/libmythtv/recorders/NuppelVideoRecorder.cpp
+++ b/mythtv/libs/libmythtv/recorders/NuppelVideoRecorder.cpp
@@ -32,6 +32,7 @@ using namespace std;
 #include "mythlogging.h"
 #include "vbitext/cc.h"
 #include "vbitext/vbi.h"
+#include "mythavutil.h"
 
 #if HAVE_BIGENDIAN
 extern "C" {
@@ -191,7 +192,6 @@ NuppelVideoRecorder::NuppelVideoRecorder(TVRec *rec, ChannelBase *channel) :
 
     go7007 = false;
     resetcapture = false;
-    memset(&mpa_picture, 0, sizeof(mpa_picture));
 
     SetPositionMapType(MARK_KEYFRAME);
 }
@@ -523,17 +523,12 @@ bool NuppelVideoRecorder::SetupAVCodecVideo(void)
 
     mpa_vidctx = avcodec_alloc_context3(NULL);
 
-    avcodec_get_frame_defaults(&mpa_picture);
-
     switch (picture_format)
     {
         case PIX_FMT_YUV420P:
         case PIX_FMT_YUV422P:
         case PIX_FMT_YUVJ420P:
             mpa_vidctx->pix_fmt = picture_format;
-            mpa_picture.linesize[0] = w_out;
-            mpa_picture.linesize[1] = w_out / 2;
-            mpa_picture.linesize[2] = w_out / 2;
             break;
         default:
             LOG(VB_GENERAL, LOG_ERR, LOC + QString("Unknown picture format: %1")
@@ -2936,18 +2931,30 @@ void NuppelVideoRecorder::WriteVideo(VideoFrame *frame, bool skipsync,
 
     if (useavcodec)
     {
-        mpa_picture.data[0] = planes[0];
-        mpa_picture.data[1] = planes[1];
-        mpa_picture.data[2] = planes[2];
-        mpa_picture.linesize[0] = frame->width;
-        mpa_picture.linesize[1] = frame->width / 2;
-        mpa_picture.linesize[2] = frame->width / 2;
-        mpa_picture.type = FF_BUFFER_TYPE_SHARED;
+        MythAVFrame mpa_picture;
+
+        switch (picture_format)
+        {
+            case PIX_FMT_YUV420P:
+            case PIX_FMT_YUV422P:
+            case PIX_FMT_YUVJ420P:
+                mpa_picture->linesize[0] = w_out;
+                mpa_picture->linesize[1] = w_out / 2;
+                mpa_picture->linesize[2] = w_out / 2;
+                break;
+        }
+        mpa_picture->data[0] = planes[0];
+        mpa_picture->data[1] = planes[1];
+        mpa_picture->data[2] = planes[2];
+        mpa_picture->linesize[0] = frame->width;
+        mpa_picture->linesize[1] = frame->width / 2;
+        mpa_picture->linesize[2] = frame->width / 2;
+        mpa_picture->type = FF_BUFFER_TYPE_SHARED;
 
         if (wantkeyframe)
-            mpa_picture.pict_type = AV_PICTURE_TYPE_I;
+            mpa_picture->pict_type = AV_PICTURE_TYPE_I;
         else
-            mpa_picture.pict_type = AV_PICTURE_TYPE_NONE;
+            mpa_picture->pict_type = AV_PICTURE_TYPE_NONE;
 
         if (!hardware_encode)
         {
@@ -2959,7 +2966,7 @@ void NuppelVideoRecorder::WriteVideo(VideoFrame *frame, bool skipsync,
             int got_packet = 0;
 
             QMutexLocker locker(avcodeclock);
-            tmp = avcodec_encode_video2(mpa_vidctx, &packet, &mpa_picture,
+            tmp = avcodec_encode_video2(mpa_vidctx, &packet, mpa_picture,
                                         &got_packet);
 
             if (tmp < 0 || !got_packet)
diff --git a/mythtv/libs/libmythtv/recorders/NuppelVideoRecorder.h b/mythtv/libs/libmythtv/recorders/NuppelVideoRecorder.h
index 2b8ff1c..9811e28 100644
--- a/mythtv/libs/libmythtv/recorders/NuppelVideoRecorder.h
+++ b/mythtv/libs/libmythtv/recorders/NuppelVideoRecorder.h
@@ -253,7 +253,6 @@ class MTV_PUBLIC NuppelVideoRecorder : public V4LRecorder, public CC608Input
 
     AVCodec *mpa_vidcodec;
     AVCodecContext *mpa_vidctx;
-    AVFrame mpa_picture;
 
     int targetbitrate;
     int scalebitrate;
-- 
1.7.10.2

