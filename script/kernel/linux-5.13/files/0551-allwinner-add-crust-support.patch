diff -Naur linux-5.12-old/drivers/clk/clk.c linux-5.12-new/drivers/clk/clk.c
--- linux-5.12-old/drivers/clk/clk.c	2021-04-25 22:49:08.000000000 +0200
+++ linux-5.12-new/drivers/clk/clk.c	2021-04-26 19:35:41.969998606 +0200
@@ -4283,6 +4283,37 @@
 EXPORT_SYMBOL_GPL(devm_clk_hw_get_clk);
 
 /*
+ * clk-conf helpers
+ */
+
+int __clk_protect(struct clk *clk)
+{
+	struct clk_core *core = clk->core;
+	int ret = 0;
+
+	clk_prepare_lock();
+
+	/*
+	 * If CLK_IS_CRITICAL was set in the clock's init data, then
+	 * the clock was already prepared/enabled when it was added.
+	 */
+	if (core->flags & CLK_IS_CRITICAL)
+		goto out;
+
+	core->flags |= CLK_IS_CRITICAL;
+	ret = clk_core_prepare(core);
+	if (ret)
+		goto out;
+
+	ret = clk_core_enable_lock(core);
+
+out:
+	clk_prepare_unlock();
+
+	return ret;
+}
+
+/*
  * clkdev helpers
  */
 
diff -Naur linux-5.12-old/drivers/clk/clk-conf.c linux-5.12-new/drivers/clk/clk-conf.c
--- linux-5.12-old/drivers/clk/clk-conf.c	2021-04-25 22:49:08.000000000 +0200
+++ linux-5.12-new/drivers/clk/clk-conf.c	2021-04-26 19:35:41.969998606 +0200
@@ -11,6 +11,54 @@
 #include <linux/of.h>
 #include <linux/printk.h>
 
+#include "clk.h"
+
+static int __set_clk_flags(struct device_node *node)
+{
+	struct of_phandle_args clkspec;
+	struct property *prop;
+	int i, index = 0, rc;
+	const __be32 *cur;
+	struct clk *clk;
+	u32 nr_cells;
+
+	rc = of_property_read_u32(node, "#clock-cells", &nr_cells);
+	if (rc < 0) {
+		pr_err("clk: missing #clock-cells property on %pOF\n", node);
+		return rc;
+	}
+
+	clkspec.np         = node;
+	clkspec.args_count = nr_cells;
+
+	of_property_for_each_u32(node, "protected-clocks", prop, cur, clkspec.args[0]) {
+		/* read the remainder of the clock specifier */
+		for (i = 1; i < nr_cells; ++i) {
+			cur = of_prop_next_u32(prop, cur, &clkspec.args[i]);
+			if (!cur) {
+				pr_err("clk: invalid value of protected-clocks"
+				       " property at %pOF\n", node);
+				return -EINVAL;
+			}
+		}
+		clk = of_clk_get_from_provider(&clkspec);
+		if (IS_ERR(clk)) {
+			if (PTR_ERR(clk) != -EPROBE_DEFER)
+				pr_err("clk: couldn't get protected clock"
+				       " %u for %pOF\n", index, node);
+			return PTR_ERR(clk);
+		}
+
+		rc = __clk_protect(clk);
+		if (rc < 0)
+			pr_warn("clk: failed to protect %s: %d\n",
+				__clk_get_name(clk), rc);
+		clk_put(clk);
+		index++;
+	}
+	return 0;
+}
+
 static int __set_clk_parents(struct device_node *node, bool clk_supplier)
 {
 	struct of_phandle_args clkspec;
@@ -135,6 +183,12 @@
 	if (!node)
 		return 0;
 
+	if (clk_supplier) {
+		rc = __set_clk_flags(node);
+		if (rc < 0)
+			return rc;
+	}
+
 	rc = __set_clk_parents(node, clk_supplier);
 	if (rc < 0)
 		return rc;
diff -Naur linux-5.12-old/drivers/clk/clk.h linux-5.12-new/drivers/clk/clk.h
--- linux-5.12-old/drivers/clk/clk.h	2021-04-25 22:49:08.000000000 +0200
+++ linux-5.12-new/drivers/clk/clk.h	2021-04-26 19:35:41.969998606 +0200
@@ -24,6 +24,7 @@
 #ifdef CONFIG_COMMON_CLK
 struct clk *clk_hw_create_clk(struct device *dev, struct clk_hw *hw,
 			      const char *dev_id, const char *con_id);
+int __clk_protect(struct clk *clk);
 void __clk_put(struct clk *clk);
 #else
 /* All these casts to avoid ifdefs in clkdev... */
@@ -33,6 +34,7 @@
 {
 	return (struct clk *)hw;
 }
+static inline int __clk_protect(struct clk *clk) { return 0; }
 static inline void __clk_put(struct clk *clk) { }
 
 #endif
diff -Naur linux-5.12-old/drivers/clk/qcom/common.c linux-5.12-new/drivers/clk/qcom/common.c
--- linux-5.12-old/drivers/clk/qcom/common.c	2021-04-25 22:49:08.000000000 +0200
+++ linux-5.12-new/drivers/clk/qcom/common.c	2021-04-26 19:35:41.969998606 +0200
@@ -194,22 +194,6 @@
 }
 EXPORT_SYMBOL_GPL(qcom_cc_register_sleep_clk);
 
-/* Drop 'protected-clocks' from the list of clocks to register */
-static void qcom_cc_drop_protected(struct device *dev, struct qcom_cc *cc)
-{
-	struct device_node *np = dev->of_node;
-	struct property *prop;
-	const __be32 *p;
-	u32 i;
-
-	of_property_for_each_u32(np, "protected-clocks", prop, p, i) {
-		if (i >= cc->num_rclks)
-			continue;
-
-		cc->rclks[i] = NULL;
-	}
-}
-
 static struct clk_hw *qcom_cc_clk_hw_get(struct of_phandle_args *clkspec,
 					 void *data)
 {
@@ -272,8 +256,6 @@
 	cc->rclks = rclks;
 	cc->num_rclks = num_clks;
 
-	qcom_cc_drop_protected(dev, cc);
-
 	for (i = 0; i < num_clk_hws; i++) {
 		ret = devm_clk_hw_register(dev, clk_hws[i]);
 		if (ret)
diff -Naur linux-5.12-old/drivers/firmware/arm_scpi.c linux-5.12-new/drivers/firmware/arm_scpi.c
--- linux-5.12-old/drivers/firmware/arm_scpi.c	2021-04-25 22:49:08.000000000 +0200
+++ linux-5.12-new/drivers/firmware/arm_scpi.c	2021-04-26 19:35:41.969998606 +0200
@@ -231,7 +231,8 @@
 
 struct scpi_chan {
 	struct mbox_client cl;
-	struct mbox_chan *chan;
+	struct mbox_chan *rx_chan;
+	struct mbox_chan *tx_chan;
 	void __iomem *tx_payload;
 	void __iomem *rx_payload;
 	struct list_head rx_pending;
@@ -505,7 +506,7 @@
 	msg->rx_len = rx_len;
 	reinit_completion(&msg->done);
 
-	ret = mbox_send_message(scpi_chan->chan, msg);
+	ret = mbox_send_message(scpi_chan->tx_chan, msg);
 	if (ret < 0 || !rx_buf)
 		goto out;
 
@@ -854,8 +855,13 @@
 	struct scpi_drvinfo *info = data;
 	int i;
 
-	for (i = 0; i < info->num_chans; i++)
-		mbox_free_channel(info->channels[i].chan);
+	for (i = 0; i < info->num_chans; i++) {
+		struct scpi_chan *pchan = &info->channels[i];
+
+		if (pchan->tx_chan != pchan->rx_chan)
+			mbox_free_channel(pchan->tx_chan);
+		mbox_free_channel(pchan->rx_chan);
+	}
 }
 
 static int scpi_remove(struct platform_device *pdev)
@@ -903,6 +909,7 @@
 	struct resource res;
 	struct device *dev = &pdev->dev;
 	struct device_node *np = dev->of_node;
+	bool use_mbox_names = false;
 
 	scpi_info = devm_kzalloc(dev, sizeof(*scpi_info), GFP_KERNEL);
 	if (!scpi_info)
@@ -916,6 +923,14 @@
 		dev_err(dev, "no mboxes property in '%pOF'\n", np);
 		return -ENODEV;
 	}
+	if (of_get_property(dev->of_node, "mbox-names", NULL)) {
+		use_mbox_names = true;
+		if (count != 2) {
+			dev_err(dev, "need exactly 2 mboxes with mbox-names\n");
+			return -ENODEV;
+		}
+		count /= 2;
+	}
 
 	scpi_info->channels = devm_kcalloc(dev, count, sizeof(struct scpi_chan),
 					   GFP_KERNEL);
@@ -961,15 +976,34 @@
 		mutex_init(&pchan->xfers_lock);
 
 		ret = scpi_alloc_xfer_list(dev, pchan);
-		if (!ret) {
-			pchan->chan = mbox_request_channel(cl, idx);
-			if (!IS_ERR(pchan->chan))
-				continue;
-			ret = PTR_ERR(pchan->chan);
-			if (ret != -EPROBE_DEFER)
-				dev_err(dev, "failed to get channel%d err %d\n",
-					idx, ret);
+		if (ret)
+			return ret;
+
+		if (use_mbox_names) {
+			pchan->rx_chan = mbox_request_channel_byname(cl, "rx");
+			if (IS_ERR(pchan->rx_chan)) {
+				ret = PTR_ERR(pchan->rx_chan);
+				goto fail;
+			}
+			pchan->tx_chan = mbox_request_channel_byname(cl, "tx");
+			if (IS_ERR(pchan->rx_chan)) {
+				ret = PTR_ERR(pchan->tx_chan);
+				goto fail;
+			}
+		} else {
+			pchan->rx_chan = mbox_request_channel(cl, idx);
+			if (IS_ERR(pchan->rx_chan)) {
+				ret = PTR_ERR(pchan->rx_chan);
+				goto fail;
+			}
+			pchan->tx_chan = pchan->rx_chan;
 		}
+		continue;
+
+fail:
+		if (ret != -EPROBE_DEFER)
+			dev_err(dev, "failed to get channel%d err %d\n",
+				idx, ret);
 		return ret;
 	}
 
diff -Naur linux-5.12-old/drivers/irqchip/irq-sun6i-r.c linux-5.12-new/drivers/irqchip/irq-sun6i-r.c
--- linux-5.12-old/drivers/irqchip/irq-sun6i-r.c	2021-04-25 22:49:08.000000000 +0200
+++ linux-5.12-new/drivers/irqchip/irq-sun6i-r.c	2021-04-22 13:33:56.306666562 +0200
@@ -1,46 +1,9 @@
 // SPDX-License-Identifier: GPL-2.0-only
-/*
- * The R_INTC in Allwinner A31 and newer SoCs manages several types of
- * interrupts, as shown below:
- *
- *             NMI IRQ                DIRECT IRQs           MUXED IRQs
- *              bit 0                  bits 1-15^           bits 19-31
- *
- *   +---------+                      +---------+    +---------+  +---------+
- *   | NMI Pad |                      |  IRQ d  |    |  IRQ m  |  | IRQ m+7 |
- *   +---------+                      +---------+    +---------+  +---------+
- *        |                             |     |         |    |      |    |
- *        |                             |     |         |    |......|    |
- * +------V------+ +------------+       |     |         | +--V------V--+ |
- * |   Invert/   | | Write 1 to |       |     |         | |  AND with  | |
- * | Edge Detect | | PENDING[0] |       |     |         | |  MUX[m/8]  | |
- * +-------------+ +------------+       |     |         | +------------+ |
- *            |       |                 |     |         |       |        |
- *         +--V-------V--+           +--V--+  |      +--V--+    |     +--V--+
- *         | Set    Reset|           | GIC |  |      | GIC |    |     | GIC |
- *         |    Latch    |           | SPI |  |      | SPI |... |  ...| SPI |
- *         +-------------+           | N+d |  |      |  m  |    |     | m+7 |
- *             |     |               +-----+  |      +-----+    |     +-----+
- *             |     |                        |                 |
- *     +-------V-+ +-V----------+   +---------V--+     +--------V--------+
- *     | GIC SPI | |  AND with  |   |  AND with  |     |    AND with     |
- *     | N (=32) | |  ENABLE[0] |   |  ENABLE[d] |     |  ENABLE[19+m/8] |
- *     +---------+ +------------+   +------------+     +-----------------+
- *                        |                |                    |
- *                 +------V-----+   +------V-----+     +--------V--------+
- *                 |    Read    |   |    Read    |     |     Read        |
- *                 | PENDING[0] |   | PENDING[d] |     | PENDING[19+m/8] |
- *                 +------------+   +------------+     +-----------------+
- *
- * ^ bits 16-18 are direct IRQs for peripherals with banked interrupts, such as
- *   the MSGBOX. These IRQs do not map to any GIC SPI.
- *
- * The H6 variant adds two more (banked) direct IRQs and implements the full
- * set of 128 mux bits. This requires a second set of top-level registers.
- */
+//
+// Allwinner A31 and newer SoCs R_INTC driver
+//
 
-#include <linux/bitmap.h>
-#include <linux/interrupt.h>
+#include <linux/atomic.h>
 #include <linux/irq.h>
 #include <linux/irqchip.h>
 #include <linux/irqdomain.h>
@@ -51,278 +14,222 @@
 
 #include <dt-bindings/interrupt-controller/arm-gic.h>
 
-#define SUN6I_NMI_CTRL			(0x0c)
-#define SUN6I_IRQ_PENDING(n)		(0x10 + 4 * (n))
-#define SUN6I_IRQ_ENABLE(n)		(0x40 + 4 * (n))
-#define SUN6I_MUX_ENABLE(n)		(0xc0 + 4 * (n))
-
-#define SUN6I_NMI_SRC_TYPE_LEVEL_LOW	0
-#define SUN6I_NMI_SRC_TYPE_EDGE_FALLING	1
-#define SUN6I_NMI_SRC_TYPE_LEVEL_HIGH	2
-#define SUN6I_NMI_SRC_TYPE_EDGE_RISING	3
-
-#define SUN6I_NMI_BIT			BIT(0)
-
-#define SUN6I_NMI_NEEDS_ACK		((void *)1)
-
-#define SUN6I_NR_TOP_LEVEL_IRQS		64
-#define SUN6I_NR_DIRECT_IRQS		16
-#define SUN6I_NR_MUX_BITS		128
-
-struct sun6i_r_intc_variant {
-	u32		first_mux_irq;
-	u32		nr_mux_irqs;
-	u32		mux_valid[BITS_TO_U32(SUN6I_NR_MUX_BITS)];
-};
+#define NMI_HWIRQ		0
+#define NMI_HWIRQ_BIT		BIT(NMI_HWIRQ)
+
+#define SUN6I_R_INTC_NR_IRQS	16
+
+#define SUN6I_R_INTC_NMI_CTRL	0x0c
+#define SUN6I_R_INTC_PENDING	0x10
+#define SUN6I_R_INTC_ENABLE	0x40
 
 static void __iomem *base;
-static irq_hw_number_t nmi_hwirq;
-static DECLARE_BITMAP(wake_irq_enabled, SUN6I_NR_TOP_LEVEL_IRQS);
-static DECLARE_BITMAP(wake_mux_enabled, SUN6I_NR_MUX_BITS);
-static DECLARE_BITMAP(wake_mux_valid, SUN6I_NR_MUX_BITS);
+static irq_hw_number_t parent_offset;
+static u32 parent_type;
+#ifdef CONFIG_PM_SLEEP
+static atomic_t wake_mask;
+#endif
 
-static void sun6i_r_intc_ack_nmi(void)
-{
-	writel_relaxed(SUN6I_NMI_BIT, base + SUN6I_IRQ_PENDING(0));
-}
+static struct irq_chip sun6i_r_intc_edge_chip;
+static struct irq_chip sun6i_r_intc_level_chip;
 
-static void sun6i_r_intc_nmi_ack(struct irq_data *data)
+static void sun6i_r_intc_nmi_ack(void)
 {
-	if (irqd_get_trigger_type(data) & IRQ_TYPE_EDGE_BOTH)
-		sun6i_r_intc_ack_nmi();
-	else
-		data->chip_data = SUN6I_NMI_NEEDS_ACK;
+	/*
+	 * The NMI IRQ channel has a latch, separate from its trigger.
+	 * This latch must be cleared to clear the output to the GIC.
+	 */
+	writel_relaxed(NMI_HWIRQ_BIT, base + SUN6I_R_INTC_PENDING);
 }
 
-static void sun6i_r_intc_nmi_eoi(struct irq_data *data)
+static void sun6i_r_intc_irq_mask(struct irq_data *data)
 {
-	/* For oneshot IRQs, delay the ack until the IRQ is unmasked. */
-	if (data->chip_data == SUN6I_NMI_NEEDS_ACK && !irqd_irq_masked(data)) {
-		data->chip_data = NULL;
-		sun6i_r_intc_ack_nmi();
-	}
+	if (data->hwirq == NMI_HWIRQ)
+		sun6i_r_intc_nmi_ack();
 
-	irq_chip_eoi_parent(data);
+	irq_chip_mask_parent(data);
 }
 
-static void sun6i_r_intc_nmi_unmask(struct irq_data *data)
+static void sun6i_r_intc_irq_unmask(struct irq_data *data)
 {
-	if (data->chip_data == SUN6I_NMI_NEEDS_ACK) {
-		data->chip_data = NULL;
-		sun6i_r_intc_ack_nmi();
-	}
+	if (data->hwirq == NMI_HWIRQ)
+		sun6i_r_intc_nmi_ack();
 
 	irq_chip_unmask_parent(data);
 }
 
-static int sun6i_r_intc_nmi_set_type(struct irq_data *data, unsigned int type)
+static int sun6i_r_intc_irq_set_type(struct irq_data *data, unsigned int type)
 {
-	u32 nmi_src_type;
-
-	switch (type) {
-	case IRQ_TYPE_EDGE_RISING:
-		nmi_src_type = SUN6I_NMI_SRC_TYPE_EDGE_RISING;
-		break;
-	case IRQ_TYPE_EDGE_FALLING:
-		nmi_src_type = SUN6I_NMI_SRC_TYPE_EDGE_FALLING;
-		break;
-	case IRQ_TYPE_LEVEL_HIGH:
-		nmi_src_type = SUN6I_NMI_SRC_TYPE_LEVEL_HIGH;
-		break;
-	case IRQ_TYPE_LEVEL_LOW:
-		nmi_src_type = SUN6I_NMI_SRC_TYPE_LEVEL_LOW;
-		break;
-	default:
-		return -EINVAL;
-	}
-
-	writel_relaxed(nmi_src_type, base + SUN6I_NMI_CTRL);
-
 	/*
-	 * The "External NMI" GIC input connects to a latch inside R_INTC, not
-	 * directly to the pin. So the GIC trigger type does not depend on the
-	 * NMI pin trigger type.
+	 * Only the NMI IRQ is routed through this interrupt controller on its
+	 * way to the GIC. Other IRQs are routed to the GIC in parallel and
+	 * must have a trigger type appropriate for the GIC.
+	 *
+	 * The "External NMI" input to the GIC actually comes from bit 0 of
+	 * this device's PENDING register. So the IRQ type of the NMI, as seen
+	 * by the GIC, does not depend on the IRQ type of the NMI pin itself.
 	 */
-	return irq_chip_set_type_parent(data, IRQ_TYPE_LEVEL_HIGH);
-}
+	if (data->hwirq == NMI_HWIRQ) {
+		struct irq_chip *chip;
+		u32 nmi_src_type;
+
+		switch (type) {
+		case IRQ_TYPE_LEVEL_LOW:
+			chip = &sun6i_r_intc_level_chip;
+			nmi_src_type = 0;
+			break;
+		case IRQ_TYPE_EDGE_FALLING:
+			chip = &sun6i_r_intc_edge_chip;
+			nmi_src_type = 1;
+			break;
+		case IRQ_TYPE_LEVEL_HIGH:
+			chip = &sun6i_r_intc_level_chip;
+			nmi_src_type = 2;
+			break;
+		case IRQ_TYPE_EDGE_RISING:
+			chip = &sun6i_r_intc_edge_chip;
+			nmi_src_type = 3;
+			break;
+		default:
+			pr_err("%pOF: invalid trigger type %d for IRQ %d\n",
+			       irq_domain_get_of_node(data->domain), type,
+			       data->irq);
+			return -EBADR;
+		}
 
-static int sun6i_r_intc_nmi_set_irqchip_state(struct irq_data *data,
-					      enum irqchip_irq_state which,
-					      bool state)
-{
-	if (which == IRQCHIP_STATE_PENDING && !state)
-		sun6i_r_intc_ack_nmi();
+		irq_set_chip_handler_name_locked(data, chip,
+						 handle_fasteoi_irq, NULL);
+
+		writel_relaxed(nmi_src_type, base + SUN6I_R_INTC_NMI_CTRL);
+
+		/* Send the R_INTC -> GIC trigger type to the GIC driver. */
+		type = parent_type;
+	}
 
-	return irq_chip_set_parent_state(data, which, state);
+	return irq_chip_set_type_parent(data, type);
 }
 
+#ifdef CONFIG_PM_SLEEP
 static int sun6i_r_intc_irq_set_wake(struct irq_data *data, unsigned int on)
 {
-	unsigned long offset_from_nmi = data->hwirq - nmi_hwirq;
-
-	if (offset_from_nmi < SUN6I_NR_DIRECT_IRQS)
-		assign_bit(offset_from_nmi, wake_irq_enabled, on);
-	else if (test_bit(data->hwirq, wake_mux_valid))
-		assign_bit(data->hwirq, wake_mux_enabled, on);
+	if (on)
+		atomic_or(BIT(data->hwirq), &wake_mask);
 	else
-		/* Not wakeup capable. */
-		return -EPERM;
+		atomic_andnot(BIT(data->hwirq), &wake_mask);
 
 	return 0;
 }
+#else
+#define sun6i_r_intc_irq_set_wake NULL
+#endif
 
-static struct irq_chip sun6i_r_intc_nmi_chip = {
+static struct irq_chip sun6i_r_intc_edge_chip = {
 	.name			= "sun6i-r-intc",
-	.irq_ack		= sun6i_r_intc_nmi_ack,
-	.irq_mask		= irq_chip_mask_parent,
-	.irq_unmask		= sun6i_r_intc_nmi_unmask,
-	.irq_eoi		= sun6i_r_intc_nmi_eoi,
+	.irq_mask		= sun6i_r_intc_irq_mask,
+	.irq_unmask		= irq_chip_unmask_parent,
+	.irq_eoi		= irq_chip_eoi_parent,
 	.irq_set_affinity	= irq_chip_set_affinity_parent,
-	.irq_set_type		= sun6i_r_intc_nmi_set_type,
-	.irq_set_irqchip_state	= sun6i_r_intc_nmi_set_irqchip_state,
+	.irq_set_type		= sun6i_r_intc_irq_set_type,
+	.irq_get_irqchip_state	= irq_chip_get_parent_state,
+	.irq_set_irqchip_state	= irq_chip_set_parent_state,
 	.irq_set_wake		= sun6i_r_intc_irq_set_wake,
+	.irq_set_vcpu_affinity	= irq_chip_set_vcpu_affinity_parent,
 	.flags			= IRQCHIP_SET_TYPE_MASKED,
 };
 
-static struct irq_chip sun6i_r_intc_wakeup_chip = {
+static struct irq_chip sun6i_r_intc_level_chip = {
 	.name			= "sun6i-r-intc",
 	.irq_mask		= irq_chip_mask_parent,
-	.irq_unmask		= irq_chip_unmask_parent,
+	.irq_unmask		= sun6i_r_intc_irq_unmask,
 	.irq_eoi		= irq_chip_eoi_parent,
 	.irq_set_affinity	= irq_chip_set_affinity_parent,
-	.irq_set_type		= irq_chip_set_type_parent,
+	.irq_set_type		= sun6i_r_intc_irq_set_type,
+	.irq_get_irqchip_state	= irq_chip_get_parent_state,
+	.irq_set_irqchip_state	= irq_chip_set_parent_state,
 	.irq_set_wake		= sun6i_r_intc_irq_set_wake,
+	.irq_set_vcpu_affinity	= irq_chip_set_vcpu_affinity_parent,
 	.flags			= IRQCHIP_SET_TYPE_MASKED,
 };
 
-static int sun6i_r_intc_domain_translate(struct irq_domain *domain,
-					 struct irq_fwspec *fwspec,
-					 unsigned long *hwirq,
-					 unsigned int *type)
-{
-	/* Accept the old two-cell binding for the NMI only. */
-	if (fwspec->param_count == 2 && fwspec->param[0] == 0) {
-		*hwirq = nmi_hwirq;
-		*type  = fwspec->param[1] & IRQ_TYPE_SENSE_MASK;
-		return 0;
-	}
-
-	/* Otherwise this binding should match the GIC SPI binding. */
-	if (fwspec->param_count < 3)
-		return -EINVAL;
-	if (fwspec->param[0] != GIC_SPI)
-		return -EINVAL;
-
-	*hwirq = fwspec->param[1];
-	*type  = fwspec->param[2] & IRQ_TYPE_SENSE_MASK;
-
-	return 0;
-}
-
 static int sun6i_r_intc_domain_alloc(struct irq_domain *domain,
 				     unsigned int virq,
 				     unsigned int nr_irqs, void *arg)
 {
 	struct irq_fwspec *fwspec = arg;
 	struct irq_fwspec gic_fwspec;
-	unsigned long hwirq;
+	irq_hw_number_t hwirq;
 	unsigned int type;
 	int i, ret;
 
-	ret = sun6i_r_intc_domain_translate(domain, fwspec, &hwirq, &type);
+	ret = irq_domain_translate_twocell(domain, fwspec, &hwirq, &type);
 	if (ret)
 		return ret;
-	if (hwirq + nr_irqs > SUN6I_NR_MUX_BITS)
+	if (hwirq + nr_irqs > SUN6I_R_INTC_NR_IRQS)
 		return -EINVAL;
 
 	/* Construct a GIC-compatible fwspec from this fwspec. */
 	gic_fwspec = (struct irq_fwspec) {
 		.fwnode      = domain->parent->fwnode,
 		.param_count = 3,
-		.param       = { GIC_SPI, hwirq, type },
+		.param       = { GIC_SPI, parent_offset + hwirq, type },
 	};
 
-	ret = irq_domain_alloc_irqs_parent(domain, virq, nr_irqs, &gic_fwspec);
-	if (ret)
-		return ret;
-
-	for (i = 0; i < nr_irqs; ++i, ++hwirq, ++virq) {
-		if (hwirq == nmi_hwirq) {
-			irq_domain_set_hwirq_and_chip(domain, virq, hwirq,
-						      &sun6i_r_intc_nmi_chip, 0);
-			irq_set_handler(virq, handle_fasteoi_ack_irq);
-		} else {
-			irq_domain_set_hwirq_and_chip(domain, virq, hwirq,
-						      &sun6i_r_intc_wakeup_chip, 0);
-		}
-	}
+	for (i = 0; i < nr_irqs; ++i)
+		irq_domain_set_hwirq_and_chip(domain, virq + i, hwirq + i,
+					      &sun6i_r_intc_level_chip, NULL);
 
-	return 0;
+	return irq_domain_alloc_irqs_parent(domain, virq, nr_irqs, &gic_fwspec);
 }
 
 static const struct irq_domain_ops sun6i_r_intc_domain_ops = {
-	.translate	= sun6i_r_intc_domain_translate,
+	.translate	= irq_domain_translate_twocell,
 	.alloc		= sun6i_r_intc_domain_alloc,
 	.free		= irq_domain_free_irqs_common,
 };
 
+#ifdef CONFIG_PM_SLEEP
 static int sun6i_r_intc_suspend(void)
 {
-	u32 buf[BITS_TO_U32(max(SUN6I_NR_TOP_LEVEL_IRQS, SUN6I_NR_MUX_BITS))];
-	int i;
-
-	/* Wake IRQs are enabled during system sleep and shutdown. */
-	bitmap_to_arr32(buf, wake_irq_enabled, SUN6I_NR_TOP_LEVEL_IRQS);
-	for (i = 0; i < BITS_TO_U32(SUN6I_NR_TOP_LEVEL_IRQS); ++i)
-		writel_relaxed(buf[i], base + SUN6I_IRQ_ENABLE(i));
-	bitmap_to_arr32(buf, wake_mux_enabled, SUN6I_NR_MUX_BITS);
-	for (i = 0; i < BITS_TO_U32(SUN6I_NR_MUX_BITS); ++i)
-		writel_relaxed(buf[i], base + SUN6I_MUX_ENABLE(i));
+	/* All wake IRQs are enabled during system sleep. */
+	writel_relaxed(atomic_read(&wake_mask), base + SUN6I_R_INTC_ENABLE);
 
 	return 0;
 }
 
 static void sun6i_r_intc_resume(void)
 {
-	int i;
-
 	/* Only the NMI is relevant during normal operation. */
-	writel_relaxed(SUN6I_NMI_BIT, base + SUN6I_IRQ_ENABLE(0));
-	for (i = 1; i < BITS_TO_U32(SUN6I_NR_TOP_LEVEL_IRQS); ++i)
-		writel_relaxed(0, base + SUN6I_IRQ_ENABLE(i));
-}
-
-static void sun6i_r_intc_shutdown(void)
-{
-	sun6i_r_intc_suspend();
+	writel_relaxed(NMI_HWIRQ_BIT, base + SUN6I_R_INTC_ENABLE);
 }
 
 static struct syscore_ops sun6i_r_intc_syscore_ops = {
 	.suspend	= sun6i_r_intc_suspend,
 	.resume		= sun6i_r_intc_resume,
-	.shutdown	= sun6i_r_intc_shutdown,
 };
 
+static void sun6i_r_intc_syscore_init(void)
+{
+	register_syscore_ops(&sun6i_r_intc_syscore_ops);
+}
+#else
+static inline void sun6i_r_intc_syscore_init(void) {}
+#endif
+
 static int __init sun6i_r_intc_init(struct device_node *node,
-				    struct device_node *parent,
-				    const struct sun6i_r_intc_variant *v)
+				    struct device_node *parent)
 {
 	struct irq_domain *domain, *parent_domain;
-	struct of_phandle_args nmi_parent;
+	struct of_phandle_args parent_irq;
 	int ret;
 
-	/* Extract the NMI hwirq number from the OF node. */
-	ret = of_irq_parse_one(node, 0, &nmi_parent);
+	/* Extract the R_INTC -> GIC mapping from the OF node. */
+	ret = of_irq_parse_one(node, 0, &parent_irq);
 	if (ret)
 		return ret;
-	if (nmi_parent.args_count < 3 ||
-	    nmi_parent.args[0] != GIC_SPI ||
-	    nmi_parent.args[2] != IRQ_TYPE_LEVEL_HIGH)
+	if (parent_irq.args_count != 3 || parent_irq.args[0] != GIC_SPI)
 		return -EINVAL;
-	nmi_hwirq = nmi_parent.args[1];
-
-	bitmap_set(wake_irq_enabled, v->first_mux_irq, v->nr_mux_irqs);
-	bitmap_from_arr32(wake_mux_valid, v->mux_valid, SUN6I_NR_MUX_BITS);
+	parent_offset = parent_irq.args[1];
+	parent_type   = parent_irq.args[2];
 
 	parent_domain = irq_find_host(parent);
 	if (!parent_domain) {
@@ -336,7 +243,8 @@
 		return PTR_ERR(base);
 	}
 
-	domain = irq_domain_add_hierarchy(parent_domain, 0, 0, node,
+	domain = irq_domain_add_hierarchy(parent_domain, 0,
+					  SUN6I_R_INTC_NR_IRQS, node,
 					  &sun6i_r_intc_domain_ops, NULL);
 	if (!domain) {
 		pr_err("%pOF: Failed to allocate domain\n", node);
@@ -344,36 +252,12 @@
 		return -ENOMEM;
 	}
 
-	register_syscore_ops(&sun6i_r_intc_syscore_ops);
+	/* Clear and enable the NMI. */
+	writel_relaxed(NMI_HWIRQ_BIT, base + SUN6I_R_INTC_PENDING);
+	writel_relaxed(NMI_HWIRQ_BIT, base + SUN6I_R_INTC_ENABLE);
 
-	sun6i_r_intc_ack_nmi();
-	sun6i_r_intc_resume();
+	sun6i_r_intc_syscore_init();
 
 	return 0;
 }
-
-static const struct sun6i_r_intc_variant sun6i_a31_r_intc_variant __initconst = {
-	.first_mux_irq	= 19,
-	.nr_mux_irqs	= 13,
-	.mux_valid	= { 0xffffffff, 0xfff80000, 0xffffffff, 0x0000000f },
-};
-
-static int __init sun6i_a31_r_intc_init(struct device_node *node,
-					struct device_node *parent)
-{
-	return sun6i_r_intc_init(node, parent, &sun6i_a31_r_intc_variant);
-}
-IRQCHIP_DECLARE(sun6i_a31_r_intc, "allwinner,sun6i-a31-r-intc", sun6i_a31_r_intc_init);
-
-static const struct sun6i_r_intc_variant sun50i_h6_r_intc_variant __initconst = {
-	.first_mux_irq	= 21,
-	.nr_mux_irqs	= 16,
-	.mux_valid	= { 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff },
-};
-
-static int __init sun50i_h6_r_intc_init(struct device_node *node,
-					struct device_node *parent)
-{
-	return sun6i_r_intc_init(node, parent, &sun50i_h6_r_intc_variant);
-}
-IRQCHIP_DECLARE(sun50i_h6_r_intc, "allwinner,sun50i-h6-r-intc", sun50i_h6_r_intc_init);
+IRQCHIP_DECLARE(sun6i_r_intc, "allwinner,sun6i-a31-r-intc", sun6i_r_intc_init);
diff -Naur linux-5.12-old/drivers/rtc/rtc-sun6i.c linux-5.12-new/drivers/rtc/rtc-sun6i.c
--- linux-5.12-old/drivers/rtc/rtc-sun6i.c	2021-04-25 22:49:08.000000000 +0200
+++ linux-5.12-new/drivers/rtc/rtc-sun6i.c	2021-04-26 19:35:41.969998606 +0200
@@ -25,6 +25,7 @@
 #include <linux/of_address.h>
 #include <linux/of_device.h>
 #include <linux/platform_device.h>
+#include <linux/pm_wakeirq.h>
 #include <linux/rtc.h>
 #include <linux/slab.h>
 #include <linux/types.h>
@@ -641,33 +642,6 @@
 	.alarm_irq_enable	= sun6i_rtc_alarm_irq_enable
 };
 
-#ifdef CONFIG_PM_SLEEP
-/* Enable IRQ wake on suspend, to wake up from RTC. */
-static int sun6i_rtc_suspend(struct device *dev)
-{
-	struct sun6i_rtc_dev *chip = dev_get_drvdata(dev);
-
-	if (device_may_wakeup(dev))
-		enable_irq_wake(chip->irq);
-
-	return 0;
-}
-
-/* Disable IRQ wake on resume. */
-static int sun6i_rtc_resume(struct device *dev)
-{
-	struct sun6i_rtc_dev *chip = dev_get_drvdata(dev);
-
-	if (device_may_wakeup(dev))
-		disable_irq_wake(chip->irq);
-
-	return 0;
-}
-#endif
-
-static SIMPLE_DEV_PM_OPS(sun6i_rtc_pm_ops,
-	sun6i_rtc_suspend, sun6i_rtc_resume);
-
 static int sun6i_rtc_probe(struct platform_device *pdev)
 {
 	struct sun6i_rtc_dev *chip = sun6i_rtc;
@@ -718,6 +692,11 @@
 	clk_prepare_enable(chip->losc);
 
 	device_init_wakeup(&pdev->dev, 1);
+	ret = dev_pm_set_wake_irq(&pdev->dev, chip->irq);
+	if (ret) {
+		dev_err(&pdev->dev, "Could not set wake IRQ\n");
+		return ret;
+	}
 
 	chip->rtc = devm_rtc_allocate_device(&pdev->dev);
 	if (IS_ERR(chip->rtc))
@@ -758,7 +737,6 @@
 	.driver		= {
 		.name		= "sun6i-rtc",
 		.of_match_table = sun6i_rtc_dt_ids,
-		.pm = &sun6i_rtc_pm_ops,
 	},
 };
 builtin_platform_driver(sun6i_rtc_driver);
