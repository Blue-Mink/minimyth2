
This reverts https://github.com/torvalds/linux/commit/842d9346b2fdda4d2fb8ccb5b87faef1ac01ab51
as this commit brekas vaapi video decode with i965 vaapi driver.
ref: https://github.com/intel/intel-vaapi-driver/issues/551


diff --speed-large-files --no-dereference --minimal -Naur linux-5.19.3/drivers/gpu/drm/i915/gem/i915_gem_execbuffer.c linux-5.19.3/drivers/gpu/drm/i915/gem/i915_gem_execbuffer.c
--- linux-5.19.3/drivers/gpu/drm/i915/gem/i915_gem_execbuffer.c	2022-08-21 15:20:09.000000000 +0200
+++ linux-5.19.3/drivers/gpu/drm/i915/gem/i915_gem_execbuffer.c	2022-08-23 09:39:42.159987108 +0200
@@ -999,8 +999,7 @@
 			}
 		}
 
-		/* Reserve enough slots to accommodate composite fences */
-		err = dma_resv_reserve_fences(vma->obj->base.resv, eb->num_batches);
+		err = dma_resv_reserve_fences(vma->obj->base.resv, 1);
 		if (err)
 			return err;
 
diff --speed-large-files --no-dereference --minimal -Naur linux-5.19.3/drivers/gpu/drm/i915/i915_vma.c linux-5.19.3/drivers/gpu/drm/i915/i915_vma.c
--- linux-5.19.3/drivers/gpu/drm/i915/i915_vma.c	2022-08-21 15:20:09.000000000 +0200
+++ linux-5.19.3/drivers/gpu/drm/i915/i915_vma.c	2022-08-23 09:39:42.159987108 +0200
@@ -23,7 +23,6 @@
  */
 
 #include <linux/sched/mm.h>
-#include <linux/dma-fence-array.h>
 #include <drm/drm_gem.h>
 
 #include "display/intel_frontbuffer.h"
@@ -1828,21 +1827,6 @@
 	if (unlikely(err))
 		return err;
 
-	/*
-	 * Reserve fences slot early to prevent an allocation after preparing
-	 * the workload and associating fences with dma_resv.
-	 */
-	if (fence && !(flags & __EXEC_OBJECT_NO_RESERVE)) {
-		struct dma_fence *curr;
-		int idx;
-
-		dma_fence_array_for_each(curr, idx, fence)
-			;
-		err = dma_resv_reserve_fences(vma->obj->base.resv, idx);
-		if (unlikely(err))
-			return err;
-	}
-
 	if (flags & EXEC_OBJECT_WRITE) {
 		struct intel_frontbuffer *front;
 
@@ -1852,23 +1836,31 @@
 				i915_active_add_request(&front->write, rq);
 			intel_frontbuffer_put(front);
 		}
-	}
 
-	if (fence) {
-		struct dma_fence *curr;
-		enum dma_resv_usage usage;
-		int idx;
+		if (!(flags & __EXEC_OBJECT_NO_RESERVE)) {
+			err = dma_resv_reserve_fences(vma->obj->base.resv, 1);
+			if (unlikely(err))
+				return err;
+		}
 
-		obj->read_domains = 0;
-		if (flags & EXEC_OBJECT_WRITE) {
-			usage = DMA_RESV_USAGE_WRITE;
+		if (fence) {
+			dma_resv_add_fence(vma->obj->base.resv, fence,
+					   DMA_RESV_USAGE_WRITE);
 			obj->write_domain = I915_GEM_DOMAIN_RENDER;
-		} else {
-			usage = DMA_RESV_USAGE_READ;
+			obj->read_domains = 0;
+		}
+	} else {
+		if (!(flags & __EXEC_OBJECT_NO_RESERVE)) {
+			err = dma_resv_reserve_fences(vma->obj->base.resv, 1);
+			if (unlikely(err))
+				return err;
 		}
 
-		dma_fence_array_for_each(curr, idx, fence)
-			dma_resv_add_fence(vma->obj->base.resv, curr, usage);
+		if (fence) {
+			dma_resv_add_fence(vma->obj->base.resv, fence,
+					   DMA_RESV_USAGE_READ);
+			obj->write_domain = 0;
+		}
 	}
 
 	if (flags & EXEC_OBJECT_NEEDS_FENCE && vma->fence)
