From 700d75bd75d08a85429fa41cb0fb140603ec0003 Mon Sep 17 00:00:00 2001
From: Qiang Yu <yuq825@gmail.com>
Date: Sat, 9 Feb 2019 15:54:15 +0800
Subject: [PATCH 05/20] drm/lima: use drm syncobj to replace native fence

Signed-off-by: Qiang Yu <yuq825@gmail.com>
---
 drivers/gpu/drm/lima/lima_ctx.c   |  19 ------
 drivers/gpu/drm/lima/lima_ctx.h   |   3 -
 drivers/gpu/drm/lima/lima_drv.c   |  94 ++++------------------------
 drivers/gpu/drm/lima/lima_drv.h   |   8 +--
 drivers/gpu/drm/lima/lima_gem.c   | 126 ++++++++++++++++++--------------------
 drivers/gpu/drm/lima/lima_sched.c |  65 +++-----------------
 drivers/gpu/drm/lima/lima_sched.h |  10 +--
 include/uapi/drm/lima_drm.h       |  70 +++++----------------
 8 files changed, 100 insertions(+), 295 deletions(-)

diff --git a/drivers/gpu/drm/lima/lima_ctx.c b/drivers/gpu/drm/lima/lima_ctx.c
index 724ac40..439cb44 100644
--- a/drivers/gpu/drm/lima/lima_ctx.c
+++ b/drivers/gpu/drm/lima/lima_ctx.c
@@ -103,22 +103,3 @@ void lima_ctx_mgr_fini(struct lima_ctx_mgr *mgr)
 
 	idr_destroy(&mgr->handles);
 }
-
-struct dma_fence *lima_ctx_get_native_fence(struct lima_ctx_mgr *mgr,
-					    u32 ctx, u32 pipe, u32 seq)
-{
-	struct lima_ctx *c;
-	struct dma_fence *ret;
-
-	if (pipe >= lima_pipe_num)
-		return ERR_PTR(-EINVAL);
-
-	c = lima_ctx_get(mgr, ctx);
-	if (!c)
-		return ERR_PTR(-ENOENT);
-
-	ret = lima_sched_context_get_fence(c->context + pipe, seq);
-
-	lima_ctx_put(c);
-	return ret;
-}
diff --git a/drivers/gpu/drm/lima/lima_ctx.h b/drivers/gpu/drm/lima/lima_ctx.h
index 80e55e1..2d32ff9 100644
--- a/drivers/gpu/drm/lima/lima_ctx.h
+++ b/drivers/gpu/drm/lima/lima_ctx.h
@@ -27,7 +27,4 @@ void lima_ctx_put(struct lima_ctx *ctx);
 void lima_ctx_mgr_init(struct lima_ctx_mgr *mgr);
 void lima_ctx_mgr_fini(struct lima_ctx_mgr *mgr);
 
-struct dma_fence *lima_ctx_get_native_fence(struct lima_ctx_mgr *mgr,
-					    u32 ctx, u32 pipe, u32 seq);
-
 #endif
diff --git a/drivers/gpu/drm/lima/lima_drv.c b/drivers/gpu/drm/lima/lima_drv.c
index 6962d2d..e13d0cd 100644
--- a/drivers/gpu/drm/lima/lima_drv.c
+++ b/drivers/gpu/drm/lima/lima_drv.c
@@ -82,12 +82,11 @@ static int lima_ioctl_gem_va(struct drm_device *dev, void *data, struct drm_file
 
 static int lima_ioctl_gem_submit(struct drm_device *dev, void *data, struct drm_file *file)
 {
-	struct drm_lima_gem_submit_in *args = data;
+	struct drm_lima_gem_submit *args = data;
 	struct lima_device *ldev = to_lima_dev(dev);
 	struct lima_drm_priv *priv = file->driver_priv;
 	struct drm_lima_gem_submit_bo *bos;
 	struct ttm_validate_buffer *vbs;
-	union drm_lima_gem_submit_dep *deps = NULL;
 	struct lima_sched_pipe *pipe;
 	struct lima_sched_task *task;
 	struct lima_ctx *ctx;
@@ -98,8 +97,7 @@ static int lima_ioctl_gem_submit(struct drm_device *dev, void *data, struct drm_
 	if (args->pipe >= lima_pipe_num || args->nr_bos == 0)
 		return -EINVAL;
 
-	if (args->flags & ~(LIMA_SUBMIT_FLAG_EXPLICIT_FENCE |
-			    LIMA_SUBMIT_FLAG_SYNC_FD_OUT))
+	if (args->flags & ~(LIMA_SUBMIT_FLAG_EXPLICIT_FENCE))
 		return -EINVAL;
 
 	pipe = ldev->pipe + args->pipe;
@@ -122,40 +120,26 @@ static int lima_ioctl_gem_submit(struct drm_device *dev, void *data, struct drm_
 		goto out0;
 	}
 
-	if (args->nr_deps) {
-		deps = kvcalloc(args->nr_deps, sizeof(*submit.deps), GFP_KERNEL);
-		if (!deps) {
-			err = -ENOMEM;
-			goto out1;
-		}
-
-		size = args->nr_deps * sizeof(*submit.deps);
-		if (copy_from_user(deps, u64_to_user_ptr(args->deps), size)) {
-			err = -EFAULT;
-			goto out2;
-		}
-	}
-
 	task = kmem_cache_zalloc(pipe->task_slab, GFP_KERNEL);
 	if (!task) {
 		err = -ENOMEM;
-		goto out2;
+		goto out1;
 	}
 
 	task->frame = task + 1;
 	if (copy_from_user(task->frame, u64_to_user_ptr(args->frame), args->frame_size)) {
 		err = -EFAULT;
-		goto out3;
+		goto out2;
 	}
 
 	err = pipe->task_validate(pipe, task);
 	if (err)
-		goto out3;
+		goto out2;
 
 	ctx = lima_ctx_get(&priv->ctx_mgr, args->ctx);
 	if (!ctx) {
 		err = -ENOENT;
-		goto out3;
+		goto out2;
 	}
 
 	submit.pipe = args->pipe;
@@ -164,25 +148,19 @@ static int lima_ioctl_gem_submit(struct drm_device *dev, void *data, struct drm_
 	submit.nr_bos = args->nr_bos;
 	submit.task = task;
 	submit.ctx = ctx;
-	submit.deps = deps;
-	submit.nr_deps = args->nr_deps;
 	submit.flags = args->flags;
+	submit.in_sync[0] = args->in_sync[0];
+	submit.in_sync[1] = args->in_sync[1];
+	submit.out_sync = args->out_sync;
 
 	err = lima_gem_submit(file, &submit);
-	if (!err) {
-		struct drm_lima_gem_submit_out *out = data;
-		out->fence = submit.fence;
-		out->done = submit.done;
-		out->sync_fd = submit.sync_fd;
-	}
+	if (!err)
+		args->done = submit.done;
 
 	lima_ctx_put(ctx);
-out3:
+out2:
 	if (err)
 		kmem_cache_free(pipe->task_slab, task);
-out2:
-	if (deps)
-		kvfree(deps);
 out1:
 	kvfree(vbs);
 out0:
@@ -190,51 +168,6 @@ static int lima_ioctl_gem_submit(struct drm_device *dev, void *data, struct drm_
 	return err;
 }
 
-static int lima_wait_fence(struct dma_fence *fence, u64 timeout_ns)
-{
-	signed long ret;
-
-	if (!timeout_ns)
-		ret = dma_fence_is_signaled(fence) ? 0 : -EBUSY;
-	else {
-		unsigned long timeout = lima_timeout_to_jiffies(timeout_ns);
-
-		/* must use long for result check because in 64bit arch int
-		 * will overflow if timeout is too large and get <0 result
-		 */
-		ret = dma_fence_wait_timeout(fence, true, timeout);
-		if (ret == 0)
-			ret = timeout ? -ETIMEDOUT : -EBUSY;
-		else if (ret > 0)
-			ret = 0;
-	}
-
-	return ret;
-}
-
-static int lima_ioctl_wait_fence(struct drm_device *dev, void *data, struct drm_file *file)
-{
-	struct drm_lima_wait_fence *args = data;
-	struct lima_drm_priv *priv = file->driver_priv;
-	struct dma_fence *fence;
-	int err = 0;
-
-	fence = lima_ctx_get_native_fence(&priv->ctx_mgr, args->ctx,
-					  args->pipe, args->seq);
-	if (IS_ERR(fence))
-		return PTR_ERR(fence);
-
-	if (fence) {
-		err = lima_wait_fence(fence, args->timeout_ns);
-		args->error = fence->error;
-		dma_fence_put(fence);
-	}
-	else
-		args->error = 0;
-
-	return err;
-}
-
 static int lima_ioctl_gem_wait(struct drm_device *dev, void *data, struct drm_file *file)
 {
 	struct drm_lima_gem_wait *args = data;
@@ -312,7 +245,6 @@ static const struct drm_ioctl_desc lima_drm_driver_ioctls[] = {
 	DRM_IOCTL_DEF_DRV(LIMA_GEM_INFO, lima_ioctl_gem_info, DRM_AUTH|DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(LIMA_GEM_VA, lima_ioctl_gem_va, DRM_AUTH|DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(LIMA_GEM_SUBMIT, lima_ioctl_gem_submit, DRM_AUTH|DRM_RENDER_ALLOW),
-	DRM_IOCTL_DEF_DRV(LIMA_WAIT_FENCE, lima_ioctl_wait_fence, DRM_AUTH|DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(LIMA_GEM_WAIT, lima_ioctl_gem_wait, DRM_AUTH|DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(LIMA_CTX, lima_ioctl_ctx, DRM_AUTH|DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(LIMA_GEM_MOD, lima_ioctl_gem_mod, DRM_AUTH|DRM_RENDER_ALLOW),
@@ -330,7 +262,7 @@ static const struct file_operations lima_drm_driver_fops = {
 };
 
 static struct drm_driver lima_drm_driver = {
-	.driver_features    = DRIVER_RENDER | DRIVER_GEM | DRIVER_PRIME,
+	.driver_features    = DRIVER_RENDER | DRIVER_GEM | DRIVER_PRIME | DRIVER_SYNCOBJ,
 	.open               = lima_drm_driver_open,
 	.postclose          = lima_drm_driver_postclose,
 	.ioctls             = lima_drm_driver_ioctls,
diff --git a/drivers/gpu/drm/lima/lima_drv.h b/drivers/gpu/drm/lima/lima_drv.h
index 455bf44..c32f303 100644
--- a/drivers/gpu/drm/lima/lima_drv.h
+++ b/drivers/gpu/drm/lima/lima_drv.h
@@ -40,14 +40,12 @@ struct lima_submit {
 	struct list_head duplicates;
 	struct list_head validated;
 
-	union drm_lima_gem_submit_dep *deps;
-	u32 nr_deps;
+	u32 in_sync[2];
+	u32 out_sync;
 
 	struct lima_sched_task *task;
 
-	uint32_t fence;
-	uint32_t done;
-	int sync_fd;
+	u32 done;
 };
 
 static inline struct lima_drm_priv *
diff --git a/drivers/gpu/drm/lima/lima_gem.c b/drivers/gpu/drm/lima/lima_gem.c
index 69b3d95..eca63fe 100644
--- a/drivers/gpu/drm/lima/lima_gem.c
+++ b/drivers/gpu/drm/lima/lima_gem.c
@@ -2,6 +2,7 @@
 /* Copyright 2017-2018 Qiang Yu <yuq825@gmail.com> */
 
 #include <drm/drmP.h>
+#include <drm/drm_syncobj.h>
 #include <linux/dma-mapping.h>
 #include <linux/pagemap.h>
 #include <linux/sync_file.h>
@@ -268,64 +269,29 @@ static int lima_gem_sync_bo(struct lima_sched_task *task, struct lima_bo *bo,
 	return err;
 }
 
-static int lima_gem_add_deps(struct lima_ctx_mgr *mgr, struct lima_submit *submit)
+static int lima_gem_add_deps(struct drm_file *file, struct lima_submit *submit)
 {
-	int i, err = 0;
+	int i, err;
 
-	for (i = 0; i < submit->nr_deps; i++) {
-		union drm_lima_gem_submit_dep *dep = submit->deps + i;
-		struct dma_fence *fence;
+	for (i = 0; i < ARRAY_SIZE(submit->in_sync); i++) {
+		struct dma_fence *fence = NULL;
 
-		if (dep->type == LIMA_SUBMIT_DEP_FENCE) {
-			fence = lima_ctx_get_native_fence(
-				mgr, dep->fence.ctx, dep->fence.pipe,
-				dep->fence.seq);
-			if (IS_ERR(fence)) {
-				err = PTR_ERR(fence);
-				break;
-			}
-		}
-		else if (dep->type == LIMA_SUBMIT_DEP_SYNC_FD) {
-			fence = sync_file_get_fence(dep->sync_fd.fd);
-			if (!fence) {
-				err = -EINVAL;
-				break;
-			}
-		}
-		else {
-			err = -EINVAL;
-			break;
-		}
+		if (!submit->in_sync[i])
+			continue;
 
-		if (fence) {
-			err = lima_sched_task_add_dep(submit->task, fence);
-			if (err) {
-				dma_fence_put(fence);
-				break;
-			}
-		}
-	}
-
-	return err;
-}
-
-static int lima_gem_get_sync_fd(struct dma_fence *fence)
-{
-	struct sync_file *sync_file;
-	int fd;
-
-	fd = get_unused_fd_flags(O_CLOEXEC);
-	if (fd < 0)
-		return fd;
+		err = drm_syncobj_find_fence(file, submit->in_sync[i],
+					     0, 0, &fence);
+		if (err)
+			return err;
 
-	sync_file = sync_file_create(fence);
-	if (!sync_file) {
-		put_unused_fd(fd);
-		return -ENOMEM;
+		err = lima_sched_task_add_dep(submit->task, fence);
+		if (err) {
+			dma_fence_put(fence);
+			return err;
+		}
 	}
 
-	fd_install(fd, sync_file->file);
-	return fd;
+	return 0;
 }
 
 int lima_gem_submit(struct drm_file *file, struct lima_submit *submit)
@@ -333,6 +299,8 @@ int lima_gem_submit(struct drm_file *file, struct lima_submit *submit)
 	int i, err = 0;
 	struct lima_drm_priv *priv = to_lima_drm_priv(file);
 	struct lima_vm *vm = priv->vm;
+	struct drm_syncobj *out_sync = NULL;
+	struct dma_fence *fence;
 
 	INIT_LIST_HEAD(&submit->validated);
 	INIT_LIST_HEAD(&submit->duplicates);
@@ -370,10 +338,18 @@ int lima_gem_submit(struct drm_file *file, struct lima_submit *submit)
 	if (err)
 		goto out1;
 
-	err = lima_gem_add_deps(&priv->ctx_mgr, submit);
+	err = lima_gem_add_deps(file, submit);
 	if (err)
 		goto out2;
 
+	if (submit->out_sync) {
+		out_sync = drm_syncobj_find(file, submit->out_sync);
+		if (!out_sync) {
+			err = -ENOENT;
+			goto out2;
+		}
+	}
+
 	for (i = 0; i < submit->nr_bos; i++) {
 		struct ttm_validate_buffer *vb = submit->vbs + i;
 		struct lima_bo *bo = ttm_to_lima_bo(vb->bo);
@@ -381,26 +357,21 @@ int lima_gem_submit(struct drm_file *file, struct lima_submit *submit)
 			submit->task, bo, vb->num_shared == 0,
 			submit->flags & LIMA_SUBMIT_FLAG_EXPLICIT_FENCE);
 		if (err)
-			goto out2;
+			goto out3;
 	}
 
-	if (submit->flags & LIMA_SUBMIT_FLAG_SYNC_FD_OUT) {
-		int fd = lima_gem_get_sync_fd(
-			&submit->task->base.s_fence->finished);
-		if (fd < 0) {
-			err = fd;
-			goto out2;
-		}
-		submit->sync_fd = fd;
-	}
+	fence = lima_sched_context_queue_task(
+		submit->ctx->context + submit->pipe, submit->task, &submit->done);
 
-	submit->fence = lima_sched_context_queue_task(
-		submit->ctx->context + submit->pipe, submit->task,
-		&submit->done);
+	ttm_eu_fence_buffer_objects(&submit->ticket, &submit->validated, fence);
 
-	ttm_eu_fence_buffer_objects(&submit->ticket, &submit->validated,
-				    &submit->task->base.s_fence->finished);
+	if (out_sync)
+		drm_syncobj_replace_fence(out_sync, fence);
 
+	dma_fence_put(fence);
+out3:
+	if (out_sync)
+		drm_syncobj_put(out_sync);
 out2:
 	if (err)
 		lima_sched_task_fini(submit->task);
@@ -417,6 +388,27 @@ int lima_gem_submit(struct drm_file *file, struct lima_submit *submit)
 	return err;
 }
 
+static unsigned long lima_timeout_to_jiffies(u64 timeout_ns)
+{
+	unsigned long timeout_jiffies;
+	ktime_t timeout;
+
+	/* clamp timeout if it's to large */
+	if (((s64)timeout_ns) < 0)
+		return MAX_SCHEDULE_TIMEOUT;
+
+	timeout = ktime_sub(ns_to_ktime(timeout_ns), ktime_get());
+	if (ktime_to_ns(timeout) < 0)
+		return 0;
+
+	timeout_jiffies = nsecs_to_jiffies(ktime_to_ns(timeout));
+	/*  clamp timeout to avoid unsigned-> signed overflow */
+	if (timeout_jiffies > MAX_SCHEDULE_TIMEOUT )
+		return MAX_SCHEDULE_TIMEOUT;
+
+	return timeout_jiffies;
+}
+
 int lima_gem_wait(struct drm_file *file, u32 handle, u32 op, u64 timeout_ns)
 {
 	bool write = op & LIMA_GEM_WAIT_WRITE;
diff --git a/drivers/gpu/drm/lima/lima_sched.c b/drivers/gpu/drm/lima/lima_sched.c
index 285d6d7..58fb274 100644
--- a/drivers/gpu/drm/lima/lima_sched.c
+++ b/drivers/gpu/drm/lima/lima_sched.c
@@ -196,8 +196,7 @@ void lima_sched_context_fini(struct lima_sched_pipe *pipe,
 }
 
 static uint32_t lima_sched_context_add_fence(struct lima_sched_context *context,
-					     struct dma_fence *fence,
-					     uint32_t *done)
+					     struct dma_fence *fence)
 {
 	uint32_t seq, idx, i;
 	struct dma_fence *other;
@@ -229,46 +228,19 @@ static uint32_t lima_sched_context_add_fence(struct lima_sched_context *context,
 
 	dma_fence_put(other);
 
-	*done = i;
-	return seq;
+	return i;
 }
 
-struct dma_fence *lima_sched_context_get_fence(
-	struct lima_sched_context *context, uint32_t seq)
+struct dma_fence *lima_sched_context_queue_task(struct lima_sched_context *context,
+						struct lima_sched_task *task,
+						uint32_t *done)
 {
-	struct dma_fence *fence;
-	int idx;
-	uint32_t max, min;
+	struct dma_fence *fence = dma_fence_get(&task->base.s_fence->finished);
 
-	mutex_lock(&context->lock);
-
-	max = context->sequence - 1;
-	min = context->sequence - lima_sched_max_tasks;
-
-	/* handle overflow case */
-	if ((min < max && (seq < min || seq > max)) ||
-	    (min > max && (seq < min && seq > max))) {
-		    fence = NULL;
-		    goto out;
-	}
-
-	idx = seq & (lima_sched_max_tasks - 1);
-	fence = dma_fence_get(context->fences[idx]);
-
-out:
-	mutex_unlock(&context->lock);
-
-	return fence;
-}
+	*done = lima_sched_context_add_fence(context, fence);
 
-uint32_t lima_sched_context_queue_task(struct lima_sched_context *context,
-				       struct lima_sched_task *task,
-				       uint32_t *done)
-{
-	uint32_t seq = lima_sched_context_add_fence(
-		context, &task->base.s_fence->finished, done);
 	drm_sched_entity_push_job(&task->base, &context->base);
-	return seq;
+	return fence;
 }
 
 static struct dma_fence *lima_sched_dependency(struct drm_sched_job *job,
@@ -454,27 +426,6 @@ void lima_sched_pipe_fini(struct lima_sched_pipe *pipe)
 	drm_sched_fini(&pipe->base);
 }
 
-unsigned long lima_timeout_to_jiffies(u64 timeout_ns)
-{
-	unsigned long timeout_jiffies;
-	ktime_t timeout;
-
-	/* clamp timeout if it's to large */
-	if (((s64)timeout_ns) < 0)
-		return MAX_SCHEDULE_TIMEOUT;
-
-	timeout = ktime_sub(ns_to_ktime(timeout_ns), ktime_get());
-	if (ktime_to_ns(timeout) < 0)
-		return 0;
-
-	timeout_jiffies = nsecs_to_jiffies(ktime_to_ns(timeout));
-	/*  clamp timeout to avoid unsigned-> signed overflow */
-	if (timeout_jiffies > MAX_SCHEDULE_TIMEOUT )
-		return MAX_SCHEDULE_TIMEOUT;
-
-	return timeout_jiffies;
-}
-
 void lima_sched_pipe_task_done(struct lima_sched_pipe *pipe)
 {
 	if (pipe->error)
diff --git a/drivers/gpu/drm/lima/lima_sched.h b/drivers/gpu/drm/lima/lima_sched.h
index e139376..533dbfb 100644
--- a/drivers/gpu/drm/lima/lima_sched.h
+++ b/drivers/gpu/drm/lima/lima_sched.h
@@ -84,11 +84,9 @@ int lima_sched_context_init(struct lima_sched_pipe *pipe,
 			    atomic_t *guilty);
 void lima_sched_context_fini(struct lima_sched_pipe *pipe,
 			     struct lima_sched_context *context);
-uint32_t lima_sched_context_queue_task(struct lima_sched_context *context,
-				       struct lima_sched_task *task,
-				       uint32_t *done);
-struct dma_fence *lima_sched_context_get_fence(
-	struct lima_sched_context *context, uint32_t seq);
+struct dma_fence *lima_sched_context_queue_task(struct lima_sched_context *context,
+						struct lima_sched_task *task,
+						uint32_t *done);
 
 int lima_sched_pipe_init(struct lima_sched_pipe *pipe, const char *name);
 void lima_sched_pipe_fini(struct lima_sched_pipe *pipe);
@@ -103,6 +101,4 @@ static inline void lima_sched_pipe_mmu_error(struct lima_sched_pipe *pipe)
 int lima_sched_slab_init(void);
 void lima_sched_slab_fini(void);
 
-unsigned long lima_timeout_to_jiffies(u64 timeout_ns);
-
 #endif
diff --git a/include/uapi/drm/lima_drm.h b/include/uapi/drm/lima_drm.h
index c44757b..b5f02dd 100644
--- a/include/uapi/drm/lima_drm.h
+++ b/include/uapi/drm/lima_drm.h
@@ -51,27 +51,6 @@ struct drm_lima_gem_submit_bo {
 	__u32 flags;   /* in */
 };
 
-#define LIMA_SUBMIT_DEP_FENCE   0x00
-#define LIMA_SUBMIT_DEP_SYNC_FD 0x01
-
-struct drm_lima_gem_submit_dep_fence {
-	__u32 type;
-	__u32 ctx;
-	__u32 pipe;
-	__u32 seq;
-};
-
-struct drm_lima_gem_submit_dep_sync_fd {
-	__u32 type;
-	__u32 fd;
-};
-
-union drm_lima_gem_submit_dep {
-	__u32 type;
-	struct drm_lima_gem_submit_dep_fence fence;
-	struct drm_lima_gem_submit_dep_sync_fd sync_fd;
-};
-
 #define LIMA_GP_FRAME_REG_NUM 6
 
 struct drm_lima_gp_frame {
@@ -106,38 +85,19 @@ struct drm_lima_m450_pp_frame {
 #define LIMA_PIPE_PP  0x01
 
 #define LIMA_SUBMIT_FLAG_EXPLICIT_FENCE (1 << 0)
-#define LIMA_SUBMIT_FLAG_SYNC_FD_OUT    (1 << 1)
-
-struct drm_lima_gem_submit_in {
-	__u32 ctx;
-	__u32 pipe;
-	__u32 nr_bos;
-	__u32 frame_size;
-	__u64 bos;
-	__u64 frame;
-	__u64 deps;
-	__u32 nr_deps;
-	__u32 flags;
-};
 
-struct drm_lima_gem_submit_out {
-	__u32 fence;
-	__u32 done;
-	__u32 sync_fd;
-	__u32 _pad;
-};
-
-union drm_lima_gem_submit {
-	struct drm_lima_gem_submit_in in;
-	struct drm_lima_gem_submit_out out;
-};
-
-struct drm_lima_wait_fence {
+struct drm_lima_gem_submit {
 	__u32 ctx;         /* in */
 	__u32 pipe;        /* in */
-	__u64 timeout_ns;  /* in */
-	__u32 seq;         /* in */
-	__u32 error;       /* out */
+	__u32 nr_bos;      /* in */
+	__u32 frame_size;  /* in */
+	__u64 bos;         /* in */
+	__u64 frame;       /* in */
+	__u32 flags;       /* in */
+	__u32 out_sync;    /* in */
+	__u32 in_sync[2];  /* in */
+	__u32 done;        /* out */
+	__u32 _pad;
 };
 
 #define LIMA_GEM_WAIT_READ   0x01
@@ -171,17 +131,15 @@ struct drm_lima_gem_mod {
 #define DRM_LIMA_GEM_INFO    0x02
 #define DRM_LIMA_GEM_VA      0x03
 #define DRM_LIMA_GEM_SUBMIT  0x04
-#define DRM_LIMA_WAIT_FENCE  0x05
-#define DRM_LIMA_GEM_WAIT    0x06
-#define DRM_LIMA_CTX         0x07
-#define DRM_LIMA_GEM_MOD     0x08
+#define DRM_LIMA_GEM_WAIT    0x05
+#define DRM_LIMA_CTX         0x06
+#define DRM_LIMA_GEM_MOD     0x07
 
 #define DRM_IOCTL_LIMA_INFO DRM_IOR(DRM_COMMAND_BASE + DRM_LIMA_INFO, struct drm_lima_info)
 #define DRM_IOCTL_LIMA_GEM_CREATE DRM_IOWR(DRM_COMMAND_BASE + DRM_LIMA_GEM_CREATE, struct drm_lima_gem_create)
 #define DRM_IOCTL_LIMA_GEM_INFO DRM_IOWR(DRM_COMMAND_BASE + DRM_LIMA_GEM_INFO, struct drm_lima_gem_info)
 #define DRM_IOCTL_LIMA_GEM_VA DRM_IOW(DRM_COMMAND_BASE + DRM_LIMA_GEM_VA, struct drm_lima_gem_va)
-#define DRM_IOCTL_LIMA_GEM_SUBMIT DRM_IOWR(DRM_COMMAND_BASE + DRM_LIMA_GEM_SUBMIT, union drm_lima_gem_submit)
-#define DRM_IOCTL_LIMA_WAIT_FENCE DRM_IOWR(DRM_COMMAND_BASE + DRM_LIMA_WAIT_FENCE, struct drm_lima_wait_fence)
+#define DRM_IOCTL_LIMA_GEM_SUBMIT DRM_IOWR(DRM_COMMAND_BASE + DRM_LIMA_GEM_SUBMIT, struct drm_lima_gem_submit)
 #define DRM_IOCTL_LIMA_GEM_WAIT DRM_IOW(DRM_COMMAND_BASE + DRM_LIMA_GEM_WAIT, struct drm_lima_gem_wait)
 #define DRM_IOCTL_LIMA_CTX DRM_IOWR(DRM_COMMAND_BASE + DRM_LIMA_CTX, struct drm_lima_ctx)
 #define DRM_IOCTL_LIMA_GEM_MOD DRM_IOWR(DRM_COMMAND_BASE + DRM_LIMA_GEM_MOD, struct drm_lima_gem_mod)
-- 
2.7.1

