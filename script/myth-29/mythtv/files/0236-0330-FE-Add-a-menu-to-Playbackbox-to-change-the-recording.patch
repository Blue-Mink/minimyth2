From edf3eaaad1a41f3738187091e86c1eb8e5536fac Mon Sep 17 00:00:00 2001
From: Lawrence Rust <lvr@softsystem.co.uk>
Date: Mon, 13 Apr 2015 16:58:58 +0100
Subject: [PATCH 330/333] FE: Add a menu to Playbackbox to change the
 recording category

Signed-off-by: Lawrence Rust <lvr@softsystem.co.uk>
---
 mythtv/libs/libmyth/programinfo.cpp          |   19 +++++++
 mythtv/libs/libmyth/programinfo.h            |    1 +
 mythtv/programs/mythfrontend/playbackbox.cpp |   74 ++++++++++++++++++++++++++
 mythtv/programs/mythfrontend/playbackbox.h   |    2 +
 4 files changed, 96 insertions(+)

diff --git a/mythtv/libs/libmyth/programinfo.cpp b/mythtv/libs/libmyth/programinfo.cpp
index 3bec015..aa07b09 100644
--- a/mythtv/libs/libmyth/programinfo.cpp
+++ b/mythtv/libs/libmyth/programinfo.cpp
@@ -4756,6 +4756,25 @@ void ProgramInfo::SaveStars(uint u, uint range_max)
     SendUpdateEvent();
 }
 
+void ProgramInfo::SaveCategory(const QString &newCategory)
+{
+    MSqlQuery query(MSqlQuery::InitCon());
+
+    query.prepare(
+        "UPDATE recorded "
+        "SET category = :CATEGORY "
+        "WHERE chanid = :CHANID AND starttime = :STARTTIME "
+        "AND recordid = :RECORDID");
+
+    query.bindValue(":CATEGORY",   newCategory);
+    query.bindValue(":CHANID",     chanid);
+    query.bindValue(":STARTTIME",  recstartts);
+    query.bindValue(":RECORDID",   recordid);
+    query.exec();
+
+    SendUpdateEvent();
+}
+
 /** \brief Attempts to ascertain if the main file for this ProgramInfo
  *         is readable.
  *  \note This method often initiates a QUERY_CHECKFILE MythProto
diff --git a/mythtv/libs/libmyth/programinfo.h b/mythtv/libs/libmyth/programinfo.h
index 1aa1536..adc07b5 100644
--- a/mythtv/libs/libmyth/programinfo.h
+++ b/mythtv/libs/libmyth/programinfo.h
@@ -605,6 +605,7 @@ class MPUBLIC ProgramInfo
     void SaveSeasonEpisode(uint seas, uint ep);
     void SaveInetRef(const QString &inet);
     void SaveStars(uint u, uint range_max);
+    void SaveCategory(const QString &);
 
     // Extremely slow functions that cannot be called from the UI thread.
     QString DiscoverRecordingDirectory(void) const;
diff --git a/mythtv/programs/mythfrontend/playbackbox.cpp b/mythtv/programs/mythfrontend/playbackbox.cpp
index 1fab439..a625188 100644
--- a/mythtv/programs/mythfrontend/playbackbox.cpp
+++ b/mythtv/programs/mythfrontend/playbackbox.cpp
@@ -7,6 +7,7 @@
 #include <QLocale>
 #include <QTimer>
 #include <QMap>
+#include <QScopedPointer>
 
 // MythTV
 #include "mythnotificationcenter.h"     // for ShowNotificationError, etc
@@ -3069,6 +3070,7 @@ MythMenu* PlaybackBox::createRecordingMenu(void)
         menu->AddItem(tr("Mark as Damaged"), SLOT(toggleDamaged()));
 
     menu->AddItem(tr("Change Recording Metadata"), SLOT(showMetadataEditor()));
+    menu->AddItem(tr("Select Recording Category"), SLOT(doRecordingCategory()));
 
     menu->AddItem(tr("Custom Edit"), SLOT(EditCustom()));
 
@@ -5155,6 +5157,78 @@ void PlaybackBox::setPlayGroup(QString newPlayGroup)
     }
 }
 
+static char const kszAddNewCategory[] = "addnewcategory";
+void PlaybackBox::doRecordingCategory()
+{
+    ProgramInfo *pginfo = GetCurrentProgram();
+    if (!pginfo)
+        return;
+
+    MSqlQuery query(MSqlQuery::InitCon());
+    query.prepare("SELECT DISTINCT category FROM recorded "
+                    "WHERE deletepending = 0 ORDER BY category");
+
+    QStringList displayNames(tr("<Add New>"));
+    QStringList groupNames(kszAddNewCategory);
+
+    if (!query.exec())
+        return;
+
+    while (query.next())
+    {
+        QString c = query.value(0).toString();
+        if (c.isEmpty())
+            continue;
+        groupNames.push_back(c);
+        displayNames.push_back(c);
+    }
+
+    QString label = tr("Select Recording Category") +
+        CreateProgramInfoString(*pginfo);
+
+    QScopedPointer<GroupSelector> gs(new GroupSelector(
+        m_popupStack, label, displayNames, groupNames,
+        pginfo->GetCategory()));
+
+    if (gs->Create())
+    {
+        connect(gs.data(), SIGNAL(result(QString)), SLOT(setRecordingCategory(QString)));
+        m_popupStack->AddScreen(gs.take());
+    }
+}
+
+void PlaybackBox::setRecordingCategory(const QString &newCategory)
+{
+    if (newCategory == kszAddNewCategory)
+    {
+        MythScreenStack *popupStack =
+            GetMythMainWindow()->GetStack("popup stack");
+
+        MythTextInputDialog *newcat = new MythTextInputDialog(
+            popupStack, tr("New Recording Category"));
+
+        connect(newcat, SIGNAL(haveResult(QString)),
+                SLOT(setRecordingCategory(QString)));
+
+        if (newcat->Create())
+            popupStack->AddScreen(newcat, false);
+        else
+            delete newcat;
+        return;
+    }
+
+    MythUIButtonListItem *item = m_recordingList->GetItemCurrent();
+    if (!item)
+        return;
+
+    ProgramInfo *pginfo = qVariantValue<ProgramInfo *>(item->GetData());
+    if (!pginfo)
+        return;
+
+    item->SetText(newCategory, "category");
+    pginfo->SaveCategory(newCategory);
+    }
+
 void PlaybackBox::showRecGroupPasswordChanger(void)
 {
     MythUIButtonListItem *item = m_groupList->GetItemCurrent();
diff --git a/mythtv/programs/mythfrontend/playbackbox.h b/mythtv/programs/mythfrontend/playbackbox.h
index 38aad06..ac0ac3e 100644
--- a/mythtv/programs/mythfrontend/playbackbox.h
+++ b/mythtv/programs/mythfrontend/playbackbox.h
@@ -183,6 +183,8 @@ class PlaybackBox : public ScheduleCommon
     void askStop();
 
     void doAllowRerecord();
+    void doRecordingCategory();
+    void setRecordingCategory(const QString &newCategory);
 
     void askDelete();
     void Undelete(void);
-- 
1.7.9.5

