diff -Naur mythtv-master-build-old/mythplugins/mythweb/includes/utils.php mythtv-master-build-new/mythplugins/mythweb/includes/utils.php
--- mythtv-master-build-old/mythplugins/mythweb/includes/utils.php	2015-08-24 10:51:39.000000000 +0200
+++ mythtv-master-build-new/mythplugins/mythweb/includes/utils.php	2015-08-25 11:21:14.501164015 +0200
@@ -244,6 +244,8 @@
             case 'flvp': return "$url.flvp";
             case 'flv' : return "$url.flv";
             case 'mp4' : return "$url.mp4";
+            case 'ogv' : return "$url.ogv";
+            case 'webm': return "$url.webm";
         }
     // No more dsmyth filters, so return the URL no matter what the browser is.
         return $url;
diff -Naur mythtv-master-build-old/mythplugins/mythweb/modules/stream/handler.pl mythtv-master-build-new/mythplugins/mythweb/modules/stream/handler.pl
--- mythtv-master-build-old/mythplugins/mythweb/modules/stream/handler.pl	2015-08-24 10:51:39.000000000 +0200
+++ mythtv-master-build-new/mythplugins/mythweb/modules/stream/handler.pl	2015-08-25 11:21:14.501164015 +0200
@@ -12,14 +12,35 @@
 
     require "modules/$Path[0]/tv.pl";
 
+# Use the MythTV Services API URL if the $filename URL is not local
     unless ($filename) {
-        print header(),
-              "$basename does not exist in any recognized storage group directories for this host.";
-        exit;
+        # Retrieve the backend IP and port
+        $sh = $dbh->prepare('SELECT data FROM settings WHERE value=?');
+        $sh->execute('BackendServerIP');
+        my ($backend_server_ip)   = $sh->fetchrow_array;
+        $sh->execute('BackendStatusPort');
+        my ($backend_status_port) = $sh->fetchrow_array;
+        $sh->finish();
+
+        # Reformat the recording start time
+        use HTTP::Date qw(time2isoz);
+        $starttime_isoz = time2isoz($starttime);
+        $starttime_isoz =~ s/ /T/g;
+
+        # Generate the MythTV Services API URL
+        $filename = "http://${backend_server_ip}:${backend_status_port}/Content/GetRecording?ChanId=${chanid}&StartTime=${starttime_isoz}";
     }
 
+# HTML5 video/ogv
+    if ($ENV{'REQUEST_URI'} =~ /\.ogv$/i) {
+        require "modules/$Path[0]/stream_ogv.pl";
+    }
+# HTML5 video/webm
+    elsif ($ENV{'REQUEST_URI'} =~ /\.webm$/i) {
+        require "modules/$Path[0]/stream_webm.pl";
+    }
 # ASX mode?
-    if ($ENV{'REQUEST_URI'} =~ /\.asx$/i) {
+    elsif ($ENV{'REQUEST_URI'} =~ /\.asx$/i) {
         require "modules/$Path[0]/stream_asx.pl";
     }
 # Flash?
diff -Naur mythtv-master-build-old/mythplugins/mythweb/modules/stream/stream_ogv.pl mythtv-master-build-new/mythplugins/mythweb/modules/stream/stream_ogv.pl
--- mythtv-master-build-old/mythplugins/mythweb/modules/stream/stream_ogv.pl	1970-01-01 01:00:00.000000000 +0100
+++ mythtv-master-build-new/mythplugins/mythweb/modules/stream/stream_ogv.pl	2015-08-25 11:16:58.000000000 +0200
@@ -0,0 +1,178 @@
+#!/usr/bin/perl
+#
+# MythWeb Streaming/Download module
+#
+# @url       $URL$
+# @date      $Date$
+# @version   $Revision$
+# @author    $Author$
+#
+
+    use POSIX qw(ceil floor);
+
+# round to the nearest even integer
+    sub round_even {
+        my ($in) = @_;
+        my $n = floor($in);
+        return ($n % 2 == 0) ? $n : ceil($in);
+    }
+
+    our $ffmpeg_pid;
+    our $ffmpeg_pgid;
+
+# Shutdown cleanup, of various types
+    $ffmpeg_pgid = setpgrp(0,0);
+    $SIG{'TERM'} = \&shutdown_handler;
+    $SIG{'PIPE'} = \&shutdown_handler;
+    END {
+        shutdown_handler();
+    }
+    sub shutdown_handler {
+        kill(1, $ffmpeg_pid) if ($ffmpeg_pid);
+        kill(-1, $ffmpeg_pid) if ($ffmpeg_pid);
+    }
+
+# Find ffmpeg
+    $ffmpeg = '';
+    foreach my $path (split(/:/, $ENV{'PATH'}.':/usr/local/bin:/usr/bin'), '.') {
+        if (-e "$path/mythffmpeg") {
+            $ffmpeg = "$path/mythffmpeg";
+            last;
+        }
+        if (-e "$path/ffmpeg") {
+            $ffmpeg = "$path/ffmpeg";
+            last;
+        }
+        elsif ($^O eq 'darwin' && -e "$path/ffmpeg.app") {
+            $ffmpeg = "$path/ffmpeg.app";
+            last;
+        }
+    }
+
+# Load some conversion settings from the database
+    $sh = $dbh->prepare('SELECT data FROM settings WHERE value=? AND hostname IS NULL');
+    $sh->execute('WebFLV_w');
+    my ($width)    = $sh->fetchrow_array;
+    $sh->execute('WebFLV_vb');
+    my ($vbitrate) = $sh->fetchrow_array;
+    $sh->execute('WebFLV_ab');
+    my ($abitrate) = $sh->fetchrow_array;
+    $sh->finish();
+# auto-detect height based on aspect ratio
+    $sh = $dbh->prepare('SELECT data FROM recordedmarkup WHERE chanid=? ' .
+                        'AND starttime=FROM_UNIXTIME(?) AND type=30 ' .
+                        'AND data IS NOT NULL ORDER BY mark LIMIT 1');
+    $sh->execute($chanid,$starttime);
+    $x = $sh->fetchrow_array;           # type = 30
+    $sh->finish();
+
+    $sh = $dbh->prepare('SELECT data FROM recordedmarkup WHERE chanid=? ' .
+                        'AND starttime=FROM_UNIXTIME(?) AND type=31 ' .
+                        'AND data IS NOT NULL ORDER BY mark LIMIT 1');
+    $sh->execute($chanid,$starttime);
+    $y = $sh->fetchrow_array if ($x);   # type = 31
+    $sh->finish();
+
+    if (!$x || !$y || $x <= 720) {      # <=720 means SD
+        $sh = $dbh->prepare('SELECT recordedmarkup.type, ' .
+               'recordedmarkup.data '.
+               'FROM recordedmarkup ' .
+               'WHERE recordedmarkup.chanid = ? ' .
+               'AND recordedmarkup.starttime = FROM_UNIXTIME(?)  ' .
+               'AND recordedmarkup.type IN (10, 11, 12, 13, 14) ' .
+               'GROUP BY recordedmarkup.type  ' .
+               'ORDER BY SUM((SELECT IFNULL(rm.mark, recordedmarkup.mark) ' .
+               '   FROM recordedmarkup AS rm ' .
+               '   WHERE rm.chanid = recordedmarkup.chanid ' .
+               '   AND rm.starttime = recordedmarkup.starttime ' .
+               '   AND rm.type IN (10, 11, 12, 13, 14)  ' .
+               '   AND rm.mark > recordedmarkup.mark ' .
+               '   ORDER BY rm.mark ASC LIMIT 1)- recordedmarkup.mark) DESC ' .
+               'LIMIT 1');
+        $sh->execute($chanid,$starttime);
+        $aspect = $sh->fetchrow_hashref;
+        $sh->finish();
+
+        if( $aspect->{'type'} == 10 ) {
+            $x = $y = 1;
+        } elsif( $aspect->{'type'}== 11 ) {
+            $x = 4; $y = 3;
+        } elsif( $aspect->{'type'}== 12 ) {
+            $x = 16; $y = 9;
+        } elsif( $aspect->{'type'}== 13 ) {
+            $x = 2.21; $y = 1;
+        } elsif( $aspect->{'type'}== 14 ) {
+            $x = $aspect->{'data'}; $y = 1000000;
+        } else {
+            $x = 4; $y = 3;
+        }
+    }
+    $height = round_even($width * ($y/$x));
+
+    $width    = 320 unless ($width    && $width    > 1);
+    $height   = 240 unless ($height   && $height   > 1);
+    $vbitrate = 256 unless ($vbitrate && $vbitrate > 1);
+    $abitrate = 64  unless ($abitrate && $abitrate > 1);
+
+my $ffmpeg_command = $ffmpeg
+                        .' -y'
+                        .' -i '.shell_escape("$filename")
+                        .' -s '.shell_escape("${width}x${height}")
+                        .' -g 30'
+                        .' -r 24'
+                        .' -f ogg'
+                        .' -codec:a libvorbis'
+                        .' -codec:v libtheora'
+                        .' -strict -2'
+                        .' -deinterlace'
+                        .' -async 2'
+                        .' -ac 2'
+                        .' -ar 11025'
+                        .' -b:a '.shell_escape("${abitrate}k")
+                        .' -b:v '.shell_escape("${vbitrate}k")
+                        .' /dev/stdout 2>/dev/null |';
+
+# Print the movie
+    $ffmpeg_pid = open(DATA, $ffmpeg_command);
+    unless ($ffmpeg_pid) {
+        print header(),
+                "Can't do ffmpeg: $!\n${ffmpeg_command}";
+        exit;
+    }
+    # Guess the filesize based on duration and bitrate. This allows for progressive download behavior
+    my $lengthSec;
+    $dur = `$ffmpeg -i $filename 2>&1 | /usr/bin/grep "Duration" | /usr/bin/cut -d ' ' -f 4 | /bin/sed s/,//`;
+    if ($dur && $dur =~ /\d*:\d*:.*/) {
+        @times = split(':',$dur);
+        $lengthSec = $times[0]*3600+$times[1]*60+$times[2];
+        $size = int(1.05*$lengthSec*($vbitrate*1024+$abitrate*1024)/8);
+        print header(-type                  => 'video/ogg',
+                     -Content_length        => $size,
+                     -Accept_Ranges         => 'bytes',
+                     -Timing_Allow_Origin   => '*'
+                    );
+    } else {
+        print header(-type => 'video/ogg');
+    }
+
+# RFC 3875 4.3.3. script MUST NOT provide a response message-body for a HEAD request
+    if ($ENV{'REQUEST_METHOD'} eq 'HEAD') {
+        exit;
+    }
+
+    my $buffer;
+    if (read DATA, $buffer, 53) {
+        print $buffer;
+        read DATA, $buffer, 8;
+        $durPrint = reverse pack("d",$lengthSec);
+        print $durPrint;
+        while (read DATA, $buffer, 262144) {
+        # Exit if the output pipe is broken i.e. client disconnect
+            unless (print $buffer ) {
+                last;
+            }
+        }
+    }
+    close DATA;
+
+    1;
diff -Naur mythtv-master-build-old/mythplugins/mythweb/modules/stream/stream_webm.pl mythtv-master-build-new/mythplugins/mythweb/modules/stream/stream_webm.pl
--- mythtv-master-build-old/mythplugins/mythweb/modules/stream/stream_webm.pl	1970-01-01 01:00:00.000000000 +0100
+++ mythtv-master-build-new/mythplugins/mythweb/modules/stream/stream_webm.pl	2015-08-25 11:17:27.000000000 +0200
@@ -0,0 +1,179 @@
+#!/usr/bin/perl
+#
+# MythWeb Streaming/Download module
+#
+# @url       $URL$
+# @date      $Date$
+# @version   $Revision$
+# @author    $Author$
+#
+
+    use POSIX qw(ceil floor);
+
+# round to the nearest even integer
+    sub round_even {
+        my ($in) = @_;
+        my $n = floor($in);
+        return ($n % 2 == 0) ? $n : ceil($in);
+    }
+
+    our $ffmpeg_pid;
+    our $ffmpeg_pgid;
+
+# Shutdown cleanup, of various types
+    $ffmpeg_pgid = setpgrp(0,0);
+    $SIG{'TERM'} = \&shutdown_handler;
+    $SIG{'PIPE'} = \&shutdown_handler;
+    END {
+        shutdown_handler();
+    }
+    sub shutdown_handler {
+        kill(1, $ffmpeg_pid) if ($ffmpeg_pid);
+        kill(-1, $ffmpeg_pid) if ($ffmpeg_pid);
+    }
+
+# Find ffmpeg
+    $ffmpeg = '';
+    foreach my $path (split(/:/, $ENV{'PATH'}.':/usr/local/bin:/usr/bin'), '.') {
+        if (-e "$path/mythffmpeg") {
+            $ffmpeg = "$path/mythffmpeg";
+            last;
+        }
+        if (-e "$path/ffmpeg") {
+            $ffmpeg = "$path/ffmpeg";
+            last;
+        }
+        elsif ($^O eq 'darwin' && -e "$path/ffmpeg.app") {
+            $ffmpeg = "$path/ffmpeg.app";
+            last;
+        }
+    }
+
+# Load some conversion settings from the database
+    $sh = $dbh->prepare('SELECT data FROM settings WHERE value=? AND hostname IS NULL');
+    $sh->execute('WebFLV_w');
+    my ($width)    = $sh->fetchrow_array;
+    $sh->execute('WebFLV_vb');
+    my ($vbitrate) = $sh->fetchrow_array;
+    $sh->execute('WebFLV_ab');
+    my ($abitrate) = $sh->fetchrow_array;
+    $sh->finish();
+# auto-detect height based on aspect ratio
+    $sh = $dbh->prepare('SELECT data FROM recordedmarkup WHERE chanid=? ' .
+                        'AND starttime=FROM_UNIXTIME(?) AND type=30 ' .
+                        'AND data IS NOT NULL ORDER BY mark LIMIT 1');
+    $sh->execute($chanid,$starttime);
+    $x = $sh->fetchrow_array;           # type = 30
+    $sh->finish();
+
+    $sh = $dbh->prepare('SELECT data FROM recordedmarkup WHERE chanid=? ' .
+                        'AND starttime=FROM_UNIXTIME(?) AND type=31 ' .
+                        'AND data IS NOT NULL ORDER BY mark LIMIT 1');
+    $sh->execute($chanid,$starttime);
+    $y = $sh->fetchrow_array if ($x);   # type = 31
+    $sh->finish();
+
+    if (!$x || !$y || $x <= 720) {      # <=720 means SD
+        $sh = $dbh->prepare('SELECT recordedmarkup.type, ' .
+               'recordedmarkup.data '.
+               'FROM recordedmarkup ' .
+               'WHERE recordedmarkup.chanid = ? ' .
+               'AND recordedmarkup.starttime = FROM_UNIXTIME(?)  ' .
+               'AND recordedmarkup.type IN (10, 11, 12, 13, 14) ' .
+               'GROUP BY recordedmarkup.type  ' .
+               'ORDER BY SUM((SELECT IFNULL(rm.mark, recordedmarkup.mark) ' .
+               '   FROM recordedmarkup AS rm ' .
+               '   WHERE rm.chanid = recordedmarkup.chanid ' .
+               '   AND rm.starttime = recordedmarkup.starttime ' .
+               '   AND rm.type IN (10, 11, 12, 13, 14)  ' .
+               '   AND rm.mark > recordedmarkup.mark ' .
+               '   ORDER BY rm.mark ASC LIMIT 1)- recordedmarkup.mark) DESC ' .
+               'LIMIT 1');
+        $sh->execute($chanid,$starttime);
+        $aspect = $sh->fetchrow_hashref;
+        $sh->finish();
+
+        if( $aspect->{'type'} == 10 ) {
+            $x = $y = 1;
+        } elsif( $aspect->{'type'}== 11 ) {
+            $x = 4; $y = 3;
+        } elsif( $aspect->{'type'}== 12 ) {
+            $x = 16; $y = 9;
+        } elsif( $aspect->{'type'}== 13 ) {
+            $x = 2.21; $y = 1;
+        } elsif( $aspect->{'type'}== 14 ) {
+            $x = $aspect->{'data'}; $y = 1000000;
+        } else {
+            $x = 4; $y = 3;
+        }
+    }
+    $height = round_even($width * ($y/$x));
+
+    $width    = 320 unless ($width    && $width    > 1);
+    $height   = 240 unless ($height   && $height   > 1);
+    $vbitrate = 256 unless ($vbitrate && $vbitrate > 1);
+    $abitrate = 64  unless ($abitrate && $abitrate > 1);
+
+    my $ffmpeg_command = $ffmpeg
+                        .' -y'
+                        .' -i '.shell_escape("$filename")
+                        .' -s '.shell_escape("${width}x${height}")
+                        .' -g 30'
+                        .' -r 24'
+                        .' -f webm'
+                        .' -codec:a libvorbis'
+                        .' -codec:v libvpx'
+                        .' -strict -2'
+                        .' -deinterlace'
+                        .' -async 2'
+                        .' -ac 2'
+                        .' -ar 11025'
+                        .' -b:a '.shell_escape("${abitrate}k")
+                        .' -b:v '.shell_escape("${vbitrate}k")
+                        .' /dev/stdout 2>/dev/null |';
+
+# Print the movie
+    $ffmpeg_pid = open(DATA, $ffmpeg_command);
+    unless ($ffmpeg_pid) {
+        print header(),
+                "Can't do ffmpeg: $!\n${ffmpeg_command}";
+        exit;
+    }
+    # Guess the filesize based on duration and bitrate. This allows for progressive download behavior
+    my $lengthSec;
+    $dur = `$ffmpeg -i $filename 2>&1 | /usr/bin/grep "Duration" | /usr/bin/cut -d ' ' -f 4 | /bin/sed s/,//`;
+    if ($dur && $dur =~ /\d*:\d*:.*/) {
+        @times = split(':',$dur);
+        $lengthSec = $times[0]*3600+$times[1]*60+$times[2];
+        $size = int(1.05*$lengthSec*($vbitrate*1024+$abitrate*1024)/8);
+        print header(-type                  => 'video/webm',
+                     -Content_length        => $size,
+                     -Accept_Ranges         => 'bytes',
+                     -Timing_Allow_Origin   => '*'
+                    );
+    } else {
+        print header(-type => 'video/webm');
+    }
+
+# RFC 3875 4.3.3. script MUST NOT provide a response message-body for a HEAD request
+    if ($ENV{'REQUEST_METHOD'} eq 'HEAD') {
+        exit;
+    }
+
+    my $buffer;
+    if (read DATA, $buffer, 53) {
+        print $buffer;
+        read DATA, $buffer, 8;
+        $durPrint = reverse pack("d",$lengthSec);
+        print $durPrint;
+        while (read DATA, $buffer, 262144) {
+        # Exit if the output pipe is broken i.e. client disconnect
+            unless (print $buffer ) {
+                last;
+            }
+        }
+    }
+
+    close DATA;
+
+    1;
diff -Naur mythtv-master-build-old/mythplugins/mythweb/modules/tv/tmpl/default/detail.php mythtv-master-build-new/mythplugins/mythweb/modules/tv/tmpl/default/detail.php
--- mythtv-master-build-old/mythplugins/mythweb/modules/tv/tmpl/default/detail.php	2015-08-24 10:51:42.000000000 +0200
+++ mythtv-master-build-new/mythplugins/mythweb/modules/tv/tmpl/default/detail.php	2015-08-25 11:21:14.504497335 +0200
@@ -37,6 +37,12 @@
 <script type="text/javascript">
 <!--
 
+// Android devices need the following to play HTML5 video
+    var video = document.getElementById('video');
+    video.addEventListener('click', function(){
+        video.play();
+    }, false);
+
 // Keep track of the autoexpire flag
     var autoexpire = <?php echo $program->auto_expire ? 1 : 0 ?>;
 
@@ -665,6 +671,10 @@
 
             <div class="x-pixmap">
 <?php   if (setting('WebFLV_on')) { ?>
+          <!--Embed HTML5 video if supported. Current disable as there is issue with predownload in browser players-->
+            <!--<video id="video" controls="controls" preload="none" width="<?php echo $flv_w ?>" height="<?php echo $flv_h ?>" poster="<?php echo $program->thumb_url($flv_w,0) ?>">
+                <source src="<?php echo video_url($program, 'webm'); ?>" type="video/webm" />
+                <source src="<?php echo video_url($program, 'ogv'); ?>" type="video/ogg" />-->
 <?php       if (file_exists('js/libs/flowplayer/flowplayer.swf')) { ?>
 
 
@@ -674,6 +684,8 @@
                 id="player">
             </a>
 
+          <!--Close HTML5 video tag-->
+            <!--</video>-->
             <!-- this will install flowplayer inside previous A- tag. -->
             <script>
                 flowplayer(
diff -Naur mythtv-master-build-old/mythplugins/mythweb/mythweb.conf.apache mythtv-master-build-new/mythplugins/mythweb/mythweb.conf.apache
--- mythtv-master-build-old/mythplugins/mythweb/mythweb.conf.apache	2015-08-24 10:51:39.000000000 +0200
+++ mythtv-master-build-new/mythplugins/mythweb/mythweb.conf.apache	2015-08-25 11:21:14.504497335 +0200
@@ -192,6 +192,10 @@
     # those are, so we should tell it.
         AddType video/nuppelvideo   .nuv
 
+    # Support HTML5 video formats which can be encoded and streamed "on-the-fly"
+        AddType video/ogg           .ogv .ogg
+        AddType video/webm          .webm
+
     # Specify the MIME type for favicon.ico in case the server configuration
     # doesn't or in case the server configuration uses the IANA-approved MIME type
     # (image/vnd.microsoft.icon)--which most browsers won't recognize.
