From a98462d7c91e1643b1886f29617348fd4a9de27b Mon Sep 17 00:00:00 2001
From: Lawrence Rust <lvr@softsystem.co.uk>
Date: Wed, 5 Jun 2013 19:11:21 +0100
Subject: [PATCH 118/333] SimpleDBStorage: Where possible use Get/SetSetting
 to speed frontend startup

Load() and Store() make single un-cached dbase calls which can be slow
on remote frontends.  Get/SetSetting are cached so use them when the
table name is 'settings'.

Signed-off-by: Lawrence Rust <lvr@softsystem.co.uk>
---
 mythtv/libs/libmythbase/mythcorecontext.h |    2 +
 mythtv/libs/libmythbase/mythdb.cpp        |   11 ++++++
 mythtv/libs/libmythbase/mythdb.h          |    1 +
 mythtv/libs/libmythbase/mythstorage.cpp   |   57 ++++++++++++++++++++++++++---
 4 files changed, 65 insertions(+), 6 deletions(-)

diff --git a/mythtv/libs/libmythbase/mythcorecontext.h b/mythtv/libs/libmythbase/mythcorecontext.h
index 3abe59d..dbf52bb 100644
--- a/mythtv/libs/libmythbase/mythcorecontext.h
+++ b/mythtv/libs/libmythbase/mythcorecontext.h
@@ -187,6 +187,8 @@ class MBASE_PUBLIC MythCoreContext : public QObject, public MythObservable, publ
     void ActivateSettingsCache(bool activate = true);
     void OverrideSettingForSession(const QString &key, const QString &value);
     void ClearOverrideSettingForSession(const QString &key);
+    bool IsOverrideSettingForSession(const QString &key)
+        { return GetDB()->IsOverrideSettingForSession(key); }
 
     void dispatch(const MythEvent &event);
 
diff --git a/mythtv/libs/libmythbase/mythdb.cpp b/mythtv/libs/libmythbase/mythdb.cpp
index 1616e34..0447655 100644
--- a/mythtv/libs/libmythbase/mythdb.cpp
+++ b/mythtv/libs/libmythbase/mythdb.cpp
@@ -873,6 +873,17 @@ void MythDB::OverrideSettingForSession(
     d->settingsCacheLock.unlock();
 }
 
+bool MythDB::IsOverrideSettingForSession(const QString &key) const
+{
+    QString mk = key.toLower();
+
+    d->settingsCacheLock.lockForRead();
+    SettingsMap::iterator oit = d->overriddenSettings.find(mk);
+    bool bOverridden = (oit != d->overriddenSettings.end());
+    d->settingsCacheLock.unlock();
+    return bOverridden;
+}
+
 /// \brief Clears session Overrides for the given setting.
 void MythDB::ClearOverrideSettingForSession(const QString &key)
 {
diff --git a/mythtv/libs/libmythbase/mythdb.h b/mythtv/libs/libmythbase/mythdb.h
index 5a37f02..d8a53aa 100644
--- a/mythtv/libs/libmythbase/mythdb.h
+++ b/mythtv/libs/libmythbase/mythdb.h
@@ -37,6 +37,7 @@ class MBASE_PUBLIC MythDB
     void ActivateSettingsCache(bool activate = true);
     void OverrideSettingForSession(const QString &key, const QString &newValue);
     void ClearOverrideSettingForSession(const QString &key);
+    bool IsOverrideSettingForSession(const QString &key) const;
 
     void SaveSetting(const QString &key, int newValue);
     void SaveSetting(const QString &key, const QString &newValue);
diff --git a/mythtv/libs/libmythbase/mythstorage.cpp b/mythtv/libs/libmythbase/mythstorage.cpp
index a56c492..8a60804 100644
--- a/mythtv/libs/libmythbase/mythstorage.cpp
+++ b/mythtv/libs/libmythbase/mythstorage.cpp
@@ -3,15 +3,46 @@
 // Myth headers
 #include "mythstorage.h"
 #include "mythdb.h"
+#include "mythcorecontext.h"
+#include "mythlogging.h"
+
+const char kUnset[] = "<unset_value>";
 
 void SimpleDBStorage::Load(void)
 {
-    MSqlQuery query(MSqlQuery::InitCon());
     MSqlBindings bindings;
+    QString const where = GetWhereClause(bindings);
+    QString const table = GetTableName();
+    QString const column = GetColumnName();
+
+    // Use the dbase settings cache if possible
+    if (table == "settings" && column == "data" && bindings.contains(":WHEREVALUE") )
+    {
+        QString value = bindings.value(":WHEREVALUE").toString();
+        QString data = !bindings.contains(":WHEREHOSTNAME") ?
+            gCoreContext->GetSetting(value, kUnset) :
+            gCoreContext->GetSettingOnHost(value,
+                bindings.value(":WHEREHOSTNAME").toString(), kUnset);
+        if (data != kUnset)
+        {
+            initval = gCoreContext->IsOverrideSettingForSession(value) ? kUnset: data;
+            user->SetDBValue(data);
+        }
+        else
+        {
+            LOG(VB_GENERAL, LOG_WARNING, QString(
+                "SimpleDBStorage: %1 has no saved setting. Using default '%2'")
+                    .arg(value).arg(user->GetDBValue()) );
+            initval = kUnset; // Force save
+        }
+        return;
+    }
+
+    MSqlQuery query(MSqlQuery::InitCon());
     query.prepare(
-        "SELECT " + GetColumnName() +
-        "  FROM " + GetTableName() +
-        " WHERE " + GetWhereClause(bindings));
+        "SELECT " + column +
+        "  FROM " + table +
+        " WHERE " + where);
     query.bindValues(bindings);
 
     if (!query.exec() || !query.isActive())
@@ -35,9 +66,23 @@ void SimpleDBStorage::Save(QString _table)
     if (!IsSaveRequired())
         return;
 
+    // Use the dbase settings cache if possible
     MSqlBindings bindings;
+    QString const where = GetWhereClause(bindings);
+
+    if (_table == "settings" && bindings.contains(":WHEREVALUE") )
+    {
+        QString value = bindings.value(":WHEREVALUE").toString();
+        if (bindings.contains(":WHEREHOSTNAME"))
+            gCoreContext->SaveSettingOnHost(value,
+                user->GetDBValue(), bindings.value(":WHEREHOSTNAME").toString());
+        else
+            gCoreContext->SaveSettingOnHost(value, user->GetDBValue(), "");
+        return;
+    }
+
     QString querystr = QString("SELECT * FROM " + _table + " WHERE "
-                               + GetWhereClause(bindings) + ';');
+                               + where + ';');
 
     MSqlQuery query(MSqlQuery::InitCon());
     query.prepare(querystr);
@@ -102,7 +147,7 @@ bool SimpleDBStorage::IsSaveRequired(void) const
 
 void SimpleDBStorage::SetSaveRequired(void)
 {
-    initval.clear();
+    initval = kUnset;
 }
 
 //////////////////////////////////////////////////////////////////////
-- 
1.7.9.5

